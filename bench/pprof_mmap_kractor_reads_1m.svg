<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="2500" height="598" onload="init(evt)" viewBox="0 0 2500 598" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="598" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="581.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="2490" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="2490" y="581.00"> </text><svg id="frames" x="10" width="2480" total_samples="39905"><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (7 samples, 0.02%)</title><rect x="0.0125%" y="165" width="0.0175%" height="15" fill="rgb(227,0,7)" fg:x="5" fg:w="7"/><text x="0.1325%" y="175.50"></text></g><g><title>rayon_core::registry::Registry::in_worker (7 samples, 0.02%)</title><rect x="0.0301%" y="165" width="0.0175%" height="15" fill="rgb(217,0,24)" fg:x="12" fg:w="7"/><text x="0.1501%" y="175.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (7 samples, 0.02%)</title><rect x="0.0301%" y="149" width="0.0175%" height="15" fill="rgb(221,193,54)" fg:x="12" fg:w="7"/><text x="0.1501%" y="159.50"></text></g><g><title>rayon_core::latch::LockLatch::wait_and_reset (7 samples, 0.02%)</title><rect x="0.0301%" y="133" width="0.0175%" height="15" fill="rgb(248,212,6)" fg:x="12" fg:w="7"/><text x="0.1501%" y="143.50"></text></g><g><title>std::sys::sync::condvar::futex::Condvar::wait (7 samples, 0.02%)</title><rect x="0.0301%" y="117" width="0.0175%" height="15" fill="rgb(208,68,35)" fg:x="12" fg:w="7"/><text x="0.1501%" y="127.50"></text></g><g><title>std::sys::sync::condvar::futex::Condvar::wait_optional_timeout (7 samples, 0.02%)</title><rect x="0.0301%" y="101" width="0.0175%" height="15" fill="rgb(232,128,0)" fg:x="12" fg:w="7"/><text x="0.1501%" y="111.50"></text></g><g><title>std::sys::pal::unix::futex::futex_wait (7 samples, 0.02%)</title><rect x="0.0301%" y="85" width="0.0175%" height="15" fill="rgb(207,160,47)" fg:x="12" fg:w="7"/><text x="0.1501%" y="95.50"></text></g><g><title>syscall (7 samples, 0.02%)</title><rect x="0.0301%" y="69" width="0.0175%" height="15" fill="rgb(228,23,34)" fg:x="12" fg:w="7"/><text x="0.1501%" y="79.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read_buf (14 samples, 0.04%)</title><rect x="0.0626%" y="101" width="0.0351%" height="15" fill="rgb(218,30,26)" fg:x="25" fg:w="14"/><text x="0.1826%" y="111.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Read&gt;::read_buf (14 samples, 0.04%)</title><rect x="0.0626%" y="85" width="0.0351%" height="15" fill="rgb(220,122,19)" fg:x="25" fg:w="14"/><text x="0.1826%" y="95.50"></text></g><g><title>std::sys::fs::unix::File::read_buf (14 samples, 0.04%)</title><rect x="0.0626%" y="69" width="0.0351%" height="15" fill="rgb(250,228,42)" fg:x="25" fg:w="14"/><text x="0.1826%" y="79.50"></text></g><g><title>std::sys::pal::unix::fd::FileDesc::read_buf (14 samples, 0.04%)</title><rect x="0.0626%" y="53" width="0.0351%" height="15" fill="rgb(240,193,28)" fg:x="25" fg:w="14"/><text x="0.1826%" y="63.50"></text></g><g><title>read (14 samples, 0.04%)</title><rect x="0.0626%" y="37" width="0.0351%" height="15" fill="rgb(216,20,37)" fg:x="25" fg:w="14"/><text x="0.1826%" y="47.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (7 samples, 0.02%)</title><rect x="0.0977%" y="101" width="0.0175%" height="15" fill="rgb(206,188,39)" fg:x="39" fg:w="7"/><text x="0.2177%" y="111.50"></text></g><g><title>core::slice::memchr::memchr_aligned (6 samples, 0.02%)</title><rect x="0.1153%" y="101" width="0.0150%" height="15" fill="rgb(217,207,13)" fg:x="46" fg:w="6"/><text x="0.2353%" y="111.50"></text></g><g><title>&lt;std::io::Lines&lt;B&gt; as core::iter::traits::iterator::Iterator&gt;::next (40 samples, 0.10%)</title><rect x="0.0501%" y="133" width="0.1002%" height="15" fill="rgb(231,73,38)" fg:x="20" fg:w="40"/><text x="0.1701%" y="143.50"></text></g><g><title>std::io::append_to_string (38 samples, 0.10%)</title><rect x="0.0551%" y="117" width="0.0952%" height="15" fill="rgb(225,20,46)" fg:x="22" fg:w="38"/><text x="0.1751%" y="127.50"></text></g><g><title>core::str::converts::from_utf8 (8 samples, 0.02%)</title><rect x="0.1303%" y="101" width="0.0200%" height="15" fill="rgb(210,31,41)" fg:x="52" fg:w="8"/><text x="0.2503%" y="111.50"></text></g><g><title>core::str::validations::run_utf8_validation (8 samples, 0.02%)</title><rect x="0.1303%" y="85" width="0.0200%" height="15" fill="rgb(221,200,47)" fg:x="52" fg:w="8"/><text x="0.2503%" y="95.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (19 samples, 0.05%)</title><rect x="0.1579%" y="117" width="0.0476%" height="15" fill="rgb(226,26,5)" fg:x="63" fg:w="19"/><text x="0.2779%" y="127.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::next (18 samples, 0.05%)</title><rect x="0.1604%" y="101" width="0.0451%" height="15" fill="rgb(249,33,26)" fg:x="64" fg:w="18"/><text x="0.2804%" y="111.50"></text></g><g><title>_start (93 samples, 0.23%)</title><rect x="0.0025%" y="517" width="0.2331%" height="15" fill="rgb(235,183,28)" fg:x="1" fg:w="93"/><text x="0.1225%" y="527.50"></text></g><g><title>__libc_start_main (93 samples, 0.23%)</title><rect x="0.0025%" y="501" width="0.2331%" height="15" fill="rgb(221,5,38)" fg:x="1" fg:w="93"/><text x="0.1225%" y="511.50"></text></g><g><title>Py_BytesMain (93 samples, 0.23%)</title><rect x="0.0025%" y="485" width="0.2331%" height="15" fill="rgb(247,18,42)" fg:x="1" fg:w="93"/><text x="0.1225%" y="495.50"></text></g><g><title>Py_RunMain (93 samples, 0.23%)</title><rect x="0.0025%" y="469" width="0.2331%" height="15" fill="rgb(241,131,45)" fg:x="1" fg:w="93"/><text x="0.1225%" y="479.50"></text></g><g><title>_PyRun_AnyFileObject (93 samples, 0.23%)</title><rect x="0.0025%" y="453" width="0.2331%" height="15" fill="rgb(249,31,29)" fg:x="1" fg:w="93"/><text x="0.1225%" y="463.50"></text></g><g><title>_PyRun_SimpleFileObject (93 samples, 0.23%)</title><rect x="0.0025%" y="437" width="0.2331%" height="15" fill="rgb(225,111,53)" fg:x="1" fg:w="93"/><text x="0.1225%" y="447.50"></text></g><g><title>PyEval_EvalCode (93 samples, 0.23%)</title><rect x="0.0025%" y="421" width="0.2331%" height="15" fill="rgb(238,160,17)" fg:x="1" fg:w="93"/><text x="0.1225%" y="431.50"></text></g><g><title>_PyEval_EvalFrameDefault (93 samples, 0.23%)</title><rect x="0.0025%" y="405" width="0.2331%" height="15" fill="rgb(214,148,48)" fg:x="1" fg:w="93"/><text x="0.1225%" y="415.50"></text></g><g><title>PyObject_Vectorcall (93 samples, 0.23%)</title><rect x="0.0025%" y="389" width="0.2331%" height="15" fill="rgb(232,36,49)" fg:x="1" fg:w="93"/><text x="0.1225%" y="399.50"></text></g><g><title>_cffi_f_run_Rmainloop (93 samples, 0.23%)</title><rect x="0.0025%" y="373" width="0.2331%" height="15" fill="rgb(209,103,24)" fg:x="1" fg:w="93"/><text x="0.1225%" y="383.50"></text></g><g><title>run_Rmainloop (93 samples, 0.23%)</title><rect x="0.0025%" y="357" width="0.2331%" height="15" fill="rgb(229,88,8)" fg:x="1" fg:w="93"/><text x="0.1225%" y="367.50"></text></g><g><title>run_Rmainloop (93 samples, 0.23%)</title><rect x="0.0025%" y="341" width="0.2331%" height="15" fill="rgb(213,181,19)" fg:x="1" fg:w="93"/><text x="0.1225%" y="351.50"></text></g><g><title>Rf_ReplIteration (93 samples, 0.23%)</title><rect x="0.0025%" y="325" width="0.2331%" height="15" fill="rgb(254,191,54)" fg:x="1" fg:w="93"/><text x="0.1225%" y="335.50"></text></g><g><title>Rf_eval (93 samples, 0.23%)</title><rect x="0.0025%" y="309" width="0.2331%" height="15" fill="rgb(241,83,37)" fg:x="1" fg:w="93"/><text x="0.1225%" y="319.50"></text></g><g><title>Rf_eval (93 samples, 0.23%)</title><rect x="0.0025%" y="293" width="0.2331%" height="15" fill="rgb(233,36,39)" fg:x="1" fg:w="93"/><text x="0.1225%" y="303.50"></text></g><g><title>Rf_eval (93 samples, 0.23%)</title><rect x="0.0025%" y="277" width="0.2331%" height="15" fill="rgb(226,3,54)" fg:x="1" fg:w="93"/><text x="0.1225%" y="287.50"></text></g><g><title>mark_ (93 samples, 0.23%)</title><rect x="0.0025%" y="261" width="0.2331%" height="15" fill="rgb(245,192,40)" fg:x="1" fg:w="93"/><text x="0.1225%" y="271.50"></text></g><g><title>expr_elapsed_time (93 samples, 0.23%)</title><rect x="0.0025%" y="245" width="0.2331%" height="15" fill="rgb(238,167,29)" fg:x="1" fg:w="93"/><text x="0.1225%" y="255.50"></text></g><g><title>Rf_eval (93 samples, 0.23%)</title><rect x="0.0025%" y="229" width="0.2331%" height="15" fill="rgb(232,182,51)" fg:x="1" fg:w="93"/><text x="0.1225%" y="239.50"></text></g><g><title>Rf_eval (93 samples, 0.23%)</title><rect x="0.0025%" y="213" width="0.2331%" height="15" fill="rgb(231,60,39)" fg:x="1" fg:w="93"/><text x="0.1225%" y="223.50"></text></g><g><title>wrap__pprof_kractor_reads (93 samples, 0.23%)</title><rect x="0.0025%" y="197" width="0.2331%" height="15" fill="rgb(208,69,12)" fg:x="1" fg:w="93"/><text x="0.1225%" y="207.50"></text></g><g><title>rsahmi::kractor::kractor_reads (93 samples, 0.23%)</title><rect x="0.0025%" y="181" width="0.2331%" height="15" fill="rgb(235,93,37)" fg:x="1" fg:w="93"/><text x="0.1225%" y="191.50"></text></g><g><title>rsahmi::kractor::reads::read_sequence_id_from_koutput (75 samples, 0.19%)</title><rect x="0.0476%" y="165" width="0.1879%" height="15" fill="rgb(213,116,39)" fg:x="19" fg:w="75"/><text x="0.1676%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (75 samples, 0.19%)</title><rect x="0.0476%" y="149" width="0.1879%" height="15" fill="rgb(222,207,29)" fg:x="19" fg:w="75"/><text x="0.1676%" y="159.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (33 samples, 0.08%)</title><rect x="0.1529%" y="133" width="0.0827%" height="15" fill="rgb(206,96,30)" fg:x="61" fg:w="33"/><text x="0.2729%" y="143.50"></text></g><g><title>malloc (10 samples, 0.03%)</title><rect x="0.2105%" y="117" width="0.0251%" height="15" fill="rgb(218,138,4)" fg:x="84" fg:w="10"/><text x="0.3305%" y="127.50"></text></g><g><title>crossbeam_channel::waker::SyncWaker::register (5 samples, 0.01%)</title><rect x="0.9698%" y="389" width="0.0125%" height="15" fill="rgb(250,191,14)" fg:x="387" fg:w="5"/><text x="1.0898%" y="399.50"></text></g><g><title>crossbeam_channel::flavors::array::Channel&lt;T&gt;::recv::{{closure}} (88 samples, 0.22%)</title><rect x="0.9372%" y="405" width="0.2205%" height="15" fill="rgb(239,60,40)" fg:x="374" fg:w="88"/><text x="1.0572%" y="415.50"></text></g><g><title>std::thread::park (70 samples, 0.18%)</title><rect x="0.9823%" y="389" width="0.1754%" height="15" fill="rgb(206,27,48)" fg:x="392" fg:w="70"/><text x="1.1023%" y="399.50"></text></g><g><title>std::thread::Thread::park (50 samples, 0.13%)</title><rect x="1.0325%" y="373" width="0.1253%" height="15" fill="rgb(225,35,8)" fg:x="412" fg:w="50"/><text x="1.1525%" y="383.50"></text></g><g><title>std::sys::sync::thread_parking::futex::Parker::park (50 samples, 0.13%)</title><rect x="1.0325%" y="357" width="0.1253%" height="15" fill="rgb(250,213,24)" fg:x="412" fg:w="50"/><text x="1.1525%" y="367.50"></text></g><g><title>std::sys::pal::unix::futex::futex_wait (50 samples, 0.13%)</title><rect x="1.0325%" y="341" width="0.1253%" height="15" fill="rgb(247,123,22)" fg:x="412" fg:w="50"/><text x="1.1525%" y="351.50"></text></g><g><title>syscall (50 samples, 0.13%)</title><rect x="1.0325%" y="325" width="0.1253%" height="15" fill="rgb(231,138,38)" fg:x="412" fg:w="50"/><text x="1.1525%" y="335.50"></text></g><g><title>&lt;crossbeam_channel::channel::IntoIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (406 samples, 1.02%)</title><rect x="0.2681%" y="437" width="1.0174%" height="15" fill="rgb(231,145,46)" fg:x="107" fg:w="406"/><text x="0.3881%" y="447.50">&lt;..</text></g><g><title>crossbeam_channel::flavors::array::Channel&lt;T&gt;::recv (400 samples, 1.00%)</title><rect x="0.2832%" y="421" width="1.0024%" height="15" fill="rgb(251,118,11)" fg:x="113" fg:w="400"/><text x="0.4032%" y="431.50">c..</text></g><g><title>sched_yield (48 samples, 0.12%)</title><rect x="1.1653%" y="405" width="0.1203%" height="15" fill="rgb(217,147,25)" fg:x="465" fg:w="48"/><text x="1.2853%" y="415.50"></text></g><g><title>cfree (6 samples, 0.02%)</title><rect x="1.2856%" y="437" width="0.0150%" height="15" fill="rgb(247,81,37)" fg:x="513" fg:w="6"/><text x="1.4056%" y="447.50"></text></g><g><title>&lt;rayon_core::latch::CountLatch as rayon_core::latch::Latch&gt;::set (9 samples, 0.02%)</title><rect x="4.2125%" y="373" width="0.0226%" height="15" fill="rgb(209,12,38)" fg:x="1681" fg:w="9"/><text x="4.3325%" y="383.50"></text></g><g><title>cfree (18 samples, 0.05%)</title><rect x="4.3052%" y="357" width="0.0451%" height="15" fill="rgb(227,1,9)" fg:x="1718" fg:w="18"/><text x="4.4252%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;rsahmi::kractor::reads::mmap::single::mmap_kractor_single_read::{{closure}}::{{closure}}::{{closure}}::{{closure}}&gt; (48 samples, 0.12%)</title><rect x="4.2351%" y="373" width="0.1203%" height="15" fill="rgb(248,47,43)" fg:x="1690" fg:w="48"/><text x="4.3551%" y="383.50"></text></g><g><title>__tls_get_addr (4 samples, 0.01%)</title><rect x="4.4305%" y="325" width="0.0100%" height="15" fill="rgb(221,10,30)" fg:x="1768" fg:w="4"/><text x="4.5505%" y="335.50"></text></g><g><title>crossbeam_channel::channel::Sender&lt;T&gt;::send (600 samples, 1.50%)</title><rect x="4.3553%" y="373" width="1.5036%" height="15" fill="rgb(210,229,1)" fg:x="1738" fg:w="600"/><text x="4.4753%" y="383.50">cro..</text></g><g><title>crossbeam_channel::flavors::array::Channel&lt;T&gt;::send (595 samples, 1.49%)</title><rect x="4.3679%" y="357" width="1.4910%" height="15" fill="rgb(222,148,37)" fg:x="1743" fg:w="595"/><text x="4.4879%" y="367.50">cro..</text></g><g><title>crossbeam_channel::waker::SyncWaker::notify (585 samples, 1.47%)</title><rect x="4.3929%" y="341" width="1.4660%" height="15" fill="rgb(234,67,33)" fg:x="1753" fg:w="585"/><text x="4.5129%" y="351.50">cro..</text></g><g><title>std::sys::pal::unix::futex::futex_wake (564 samples, 1.41%)</title><rect x="4.4456%" y="325" width="1.4134%" height="15" fill="rgb(247,98,35)" fg:x="1774" fg:w="564"/><text x="4.5656%" y="335.50">st..</text></g><g><title>syscall (563 samples, 1.41%)</title><rect x="4.4481%" y="309" width="1.4109%" height="15" fill="rgb(247,138,52)" fg:x="1775" fg:w="563"/><text x="4.5681%" y="319.50">sy..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (13,077 samples, 32.77%)</title><rect x="5.8589%" y="373" width="32.7703%" height="15" fill="rgb(213,79,30)" fg:x="2338" fg:w="13077"/><text x="5.9789%" y="383.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner</text></g><g><title>rsahmi::batchsender::BatchSender&lt;T&gt;::send (10 samples, 0.03%)</title><rect x="38.6292%" y="373" width="0.0251%" height="15" fill="rgb(246,177,23)" fg:x="15415" fg:w="10"/><text x="38.7492%" y="383.50"></text></g><g><title>rsahmi::kractor::reads::parser::fastq::container::FastqContainer::parse_qual (131 samples, 0.33%)</title><rect x="41.6790%" y="341" width="0.3283%" height="15" fill="rgb(230,62,27)" fg:x="16632" fg:w="131"/><text x="41.7990%" y="351.50"></text></g><g><title>rsahmi::kractor::reads::mmap::reader::MmapFastqReader::read_tail (768 samples, 1.92%)</title><rect x="40.5237%" y="357" width="1.9246%" height="15" fill="rgb(216,154,8)" fg:x="16171" fg:w="768"/><text x="40.6437%" y="367.50">rsah..</text></g><g><title>rsahmi::kractor::reads::parser::fastq::container::FastqContainer::parse_sep (176 samples, 0.44%)</title><rect x="42.0073%" y="341" width="0.4410%" height="15" fill="rgb(244,35,45)" fg:x="16763" fg:w="176"/><text x="42.1273%" y="351.50"></text></g><g><title>&lt;rayon_core::job::HeapJob&lt;BODY&gt; as rayon_core::job::Job&gt;::execute (17,204 samples, 43.11%)</title><rect x="1.5036%" y="405" width="43.1124%" height="15" fill="rgb(251,115,12)" fg:x="600" fg:w="17204"/><text x="1.6236%" y="415.50">&lt;rayon_core::job::HeapJob&lt;BODY&gt; as rayon_core::job::Job&gt;::execute</text></g><g><title>rayon_core::scope::ScopeBase::execute_job_closure (17,194 samples, 43.09%)</title><rect x="1.5286%" y="389" width="43.0873%" height="15" fill="rgb(240,54,50)" fg:x="610" fg:w="17194"/><text x="1.6486%" y="399.50">rayon_core::scope::ScopeBase::execute_job_closure</text></g><g><title>rsahmi::kractor::reads::mmap::reader::MmapFastqReader::read_record (2,379 samples, 5.96%)</title><rect x="38.6543%" y="373" width="5.9617%" height="15" fill="rgb(233,84,52)" fg:x="15425" fg:w="2379"/><text x="38.7743%" y="383.50">rsahmi::kractor::re..</text></g><g><title>rsahmi::kractor::reads::parser::fastq::container::FastqContainer::parse_head (865 samples, 2.17%)</title><rect x="42.4483%" y="357" width="2.1676%" height="15" fill="rgb(207,117,47)" fg:x="16939" fg:w="865"/><text x="42.5683%" y="367.50">rsahm..</text></g><g><title>memchr::arch::x86_64::memchr::memchr2_raw::find_avx2 (537 samples, 1.35%)</title><rect x="43.2703%" y="341" width="1.3457%" height="15" fill="rgb(249,43,39)" fg:x="17267" fg:w="537"/><text x="43.3903%" y="351.50">me..</text></g><g><title>memchr::arch::x86_64::avx2::memchr::Two::find_raw (348 samples, 0.87%)</title><rect x="43.7439%" y="325" width="0.8721%" height="15" fill="rgb(209,38,44)" fg:x="17456" fg:w="348"/><text x="43.8639%" y="335.50">m..</text></g><g><title>memchr::arch::x86_64::avx2::memchr::Two::find_raw_avx2 (300 samples, 0.75%)</title><rect x="43.8642%" y="309" width="0.7518%" height="15" fill="rgb(236,212,23)" fg:x="17504" fg:w="300"/><text x="43.9842%" y="319.50"></text></g><g><title>malloc (19 samples, 0.05%)</title><rect x="44.7563%" y="357" width="0.0476%" height="15" fill="rgb(242,79,21)" fg:x="17860" fg:w="19"/><text x="44.8763%" y="367.50"></text></g><g><title>rayon_core::registry::Registry::inject_or_push (13 samples, 0.03%)</title><rect x="44.8039%" y="357" width="0.0326%" height="15" fill="rgb(211,96,35)" fg:x="17879" fg:w="13"/><text x="44.9239%" y="367.50"></text></g><g><title>rayon_core::sleep::Sleep::wake_any_threads (614 samples, 1.54%)</title><rect x="44.8440%" y="357" width="1.5387%" height="15" fill="rgb(253,215,40)" fg:x="17895" fg:w="614"/><text x="44.9640%" y="367.50">ray..</text></g><g><title>rayon_core::sleep::Sleep::wake_specific_thread (608 samples, 1.52%)</title><rect x="44.8590%" y="341" width="1.5236%" height="15" fill="rgb(211,81,21)" fg:x="17901" fg:w="608"/><text x="44.9790%" y="351.50">ray..</text></g><g><title>syscall (594 samples, 1.49%)</title><rect x="44.8941%" y="325" width="1.4885%" height="15" fill="rgb(208,190,38)" fg:x="17915" fg:w="594"/><text x="45.0141%" y="335.50">sys..</text></g><g><title>__libc_realloc (246 samples, 0.62%)</title><rect x="48.1619%" y="277" width="0.6165%" height="15" fill="rgb(235,213,38)" fg:x="19219" fg:w="246"/><text x="48.2819%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (277 samples, 0.69%)</title><rect x="48.0892%" y="309" width="0.6941%" height="15" fill="rgb(237,122,38)" fg:x="19190" fg:w="277"/><text x="48.2092%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (270 samples, 0.68%)</title><rect x="48.1068%" y="293" width="0.6766%" height="15" fill="rgb(244,218,35)" fg:x="19197" fg:w="270"/><text x="48.2268%" y="303.50"></text></g><g><title>malloc (8 samples, 0.02%)</title><rect x="48.7834%" y="309" width="0.0200%" height="15" fill="rgb(240,68,47)" fg:x="19467" fg:w="8"/><text x="48.9034%" y="319.50"></text></g><g><title>rayon_core::scope::scope::{{closure}} (16,897 samples, 42.34%)</title><rect x="44.6160%" y="389" width="42.3431%" height="15" fill="rgb(210,16,53)" fg:x="17804" fg:w="16897"/><text x="44.7360%" y="399.50">rayon_core::scope::scope::{{closure}}</text></g><g><title>rayon_core::scope::ScopeBase::complete (16,897 samples, 42.34%)</title><rect x="44.6160%" y="373" width="42.3431%" height="15" fill="rgb(235,124,12)" fg:x="17804" fg:w="16897"/><text x="44.7360%" y="383.50">rayon_core::scope::ScopeBase::complete</text></g><g><title>rsahmi::kractor::reads::mmap::reader::SliceChunkReader::chunk_reader (16,192 samples, 40.58%)</title><rect x="46.3827%" y="357" width="40.5764%" height="15" fill="rgb(224,169,11)" fg:x="18509" fg:w="16192"/><text x="46.5027%" y="367.50">rsahmi::kractor::reads::mmap::reader::SliceChunkReader::chunk_reader</text></g><g><title>rsahmi::kractor::reads::mmap::reader::slice_chunk (16,189 samples, 40.57%)</title><rect x="46.3902%" y="341" width="40.5689%" height="15" fill="rgb(250,166,2)" fg:x="18512" fg:w="16189"/><text x="46.5102%" y="351.50">rsahmi::kractor::reads::mmap::reader::slice_chunk</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (16,182 samples, 40.55%)</title><rect x="46.4077%" y="325" width="40.5513%" height="15" fill="rgb(242,216,29)" fg:x="18519" fg:w="16182"/><text x="46.5277%" y="335.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_avx2 (15,226 samples, 38.16%)</title><rect x="48.8034%" y="309" width="38.1556%" height="15" fill="rgb(230,116,27)" fg:x="19475" fg:w="15226"/><text x="48.9234%" y="319.50">memchr::arch::x86_64::memchr::memchr_raw::find_avx2</text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::find_raw (14,535 samples, 36.42%)</title><rect x="50.5350%" y="293" width="36.4240%" height="15" fill="rgb(228,99,48)" fg:x="20166" fg:w="14535"/><text x="50.6550%" y="303.50">memchr::arch::x86_64::avx2::memchr::One::find_raw</text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::find_raw_avx2 (13,988 samples, 35.05%)</title><rect x="51.9058%" y="277" width="35.0533%" height="15" fill="rgb(253,11,6)" fg:x="20713" fg:w="13988"/><text x="52.0258%" y="287.50">memchr::arch::x86_64::avx2::memchr::One::find_raw_avx2</text></g><g><title>&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (16,899 samples, 42.35%)</title><rect x="44.6160%" y="405" width="42.3481%" height="15" fill="rgb(247,143,39)" fg:x="17804" fg:w="16899"/><text x="44.7360%" y="415.50">&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute</text></g><g><title>cfree (4 samples, 0.01%)</title><rect x="86.9640%" y="405" width="0.0100%" height="15" fill="rgb(236,97,10)" fg:x="34703" fg:w="4"/><text x="87.0840%" y="415.50"></text></g><g><title>crossbeam_deque::deque::Stealer&lt;T&gt;::steal (16 samples, 0.04%)</title><rect x="86.9741%" y="405" width="0.0401%" height="15" fill="rgb(233,208,19)" fg:x="34707" fg:w="16"/><text x="87.0941%" y="415.50"></text></g><g><title>crossbeam_epoch::default::with_handle (8 samples, 0.02%)</title><rect x="86.9941%" y="389" width="0.0200%" height="15" fill="rgb(216,164,2)" fg:x="34715" fg:w="8"/><text x="87.1141%" y="399.50"></text></g><g><title>__tls_get_addr (30 samples, 0.08%)</title><rect x="88.1068%" y="357" width="0.0752%" height="15" fill="rgb(220,129,5)" fg:x="35159" fg:w="30"/><text x="88.2268%" y="367.50"></text></g><g><title>__tls_get_addr (34 samples, 0.09%)</title><rect x="90.0539%" y="341" width="0.0852%" height="15" fill="rgb(242,17,10)" fg:x="35936" fg:w="34"/><text x="90.1739%" y="351.50"></text></g><g><title>crossbeam_epoch::internal::Global::try_advance (1,471 samples, 3.69%)</title><rect x="90.1692%" y="325" width="3.6863%" height="15" fill="rgb(242,107,0)" fg:x="35982" fg:w="1471"/><text x="90.2892%" y="335.50">crossbeam_e..</text></g><g><title>crossbeam_deque::deque::Stealer&lt;T&gt;::steal (2,629 samples, 6.59%)</title><rect x="87.3600%" y="373" width="6.5881%" height="15" fill="rgb(251,28,31)" fg:x="34861" fg:w="2629"/><text x="87.4800%" y="383.50">crossbeam_deque::dequ..</text></g><g><title>crossbeam_epoch::default::with_handle (2,301 samples, 5.77%)</title><rect x="88.1819%" y="357" width="5.7662%" height="15" fill="rgb(233,223,10)" fg:x="35189" fg:w="2301"/><text x="88.3019%" y="367.50">crossbeam_epoch::d..</text></g><g><title>crossbeam_epoch::internal::Global::collect (1,520 samples, 3.81%)</title><rect x="90.1391%" y="341" width="3.8090%" height="15" fill="rgb(215,21,27)" fg:x="35970" fg:w="1520"/><text x="90.2591%" y="351.50">crossbeam_e..</text></g><g><title>crossbeam_epoch::sync::queue::Queue&lt;T&gt;::try_pop_if (37 samples, 0.09%)</title><rect x="93.8554%" y="325" width="0.0927%" height="15" fill="rgb(232,23,21)" fg:x="37453" fg:w="37"/><text x="93.9754%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2,748 samples, 6.89%)</title><rect x="87.1319%" y="389" width="6.8864%" height="15" fill="rgb(244,5,23)" fg:x="34770" fg:w="2748"/><text x="87.2519%" y="399.50">&lt;core::iter::adapters:..</text></g><g><title>crossbeam_deque::deque::Worker&lt;T&gt;::new_lifo (28 samples, 0.07%)</title><rect x="93.9481%" y="373" width="0.0702%" height="15" fill="rgb(226,81,46)" fg:x="37490" fg:w="28"/><text x="94.0681%" y="383.50"></text></g><g><title>crossbeam_deque::deque::Injector&lt;T&gt;::steal (83 samples, 0.21%)</title><rect x="94.0183%" y="389" width="0.2080%" height="15" fill="rgb(247,70,30)" fg:x="37518" fg:w="83"/><text x="94.1383%" y="399.50"></text></g><g><title>__tls_get_addr (12 samples, 0.03%)</title><rect x="94.3666%" y="373" width="0.0301%" height="15" fill="rgb(212,68,19)" fg:x="37657" fg:w="12"/><text x="94.4866%" y="383.50"></text></g><g><title>crossbeam_epoch::internal::Global::try_advance (28 samples, 0.07%)</title><rect x="94.5671%" y="341" width="0.0702%" height="15" fill="rgb(240,187,13)" fg:x="37737" fg:w="28"/><text x="94.6871%" y="351.50"></text></g><g><title>crossbeam_deque::deque::Stealer&lt;T&gt;::steal (165 samples, 0.41%)</title><rect x="94.2263%" y="389" width="0.4135%" height="15" fill="rgb(223,113,26)" fg:x="37601" fg:w="165"/><text x="94.3463%" y="399.50"></text></g><g><title>crossbeam_epoch::default::with_handle (97 samples, 0.24%)</title><rect x="94.3967%" y="373" width="0.2431%" height="15" fill="rgb(206,192,2)" fg:x="37669" fg:w="97"/><text x="94.5167%" y="383.50"></text></g><g><title>crossbeam_epoch::internal::Global::collect (29 samples, 0.07%)</title><rect x="94.5671%" y="357" width="0.0727%" height="15" fill="rgb(241,108,4)" fg:x="37737" fg:w="29"/><text x="94.6871%" y="367.50"></text></g><g><title>rayon_core::registry::WorkerThread::find_work (3,069 samples, 7.69%)</title><rect x="87.0167%" y="405" width="7.6908%" height="15" fill="rgb(247,173,49)" fg:x="34724" fg:w="3069"/><text x="87.1367%" y="415.50">rayon_core::registry::Wor..</text></g><g><title>crossbeam_deque::deque::Worker&lt;T&gt;::pop (24 samples, 0.06%)</title><rect x="94.6473%" y="389" width="0.0601%" height="15" fill="rgb(224,114,35)" fg:x="37769" fg:w="24"/><text x="94.7673%" y="399.50"></text></g><g><title>std::sys::pal::unix::futex::futex_wait (215 samples, 0.54%)</title><rect x="94.8002%" y="357" width="0.5388%" height="15" fill="rgb(245,159,27)" fg:x="37830" fg:w="215"/><text x="94.9202%" y="367.50"></text></g><g><title>syscall (215 samples, 0.54%)</title><rect x="94.8002%" y="341" width="0.5388%" height="15" fill="rgb(245,172,44)" fg:x="37830" fg:w="215"/><text x="94.9202%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (41 samples, 0.10%)</title><rect x="95.3389%" y="341" width="0.1027%" height="15" fill="rgb(236,23,11)" fg:x="38045" fg:w="41"/><text x="95.4589%" y="351.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (41 samples, 0.10%)</title><rect x="95.3389%" y="325" width="0.1027%" height="15" fill="rgb(205,117,38)" fg:x="38045" fg:w="41"/><text x="95.4589%" y="335.50"></text></g><g><title>rayon_core::sleep::Sleep::sleep (304 samples, 0.76%)</title><rect x="94.7074%" y="405" width="0.7618%" height="15" fill="rgb(237,72,25)" fg:x="37793" fg:w="304"/><text x="94.8274%" y="415.50"></text></g><g><title>std::sys::sync::condvar::futex::Condvar::wait (267 samples, 0.67%)</title><rect x="94.8002%" y="389" width="0.6691%" height="15" fill="rgb(244,70,9)" fg:x="37830" fg:w="267"/><text x="94.9202%" y="399.50"></text></g><g><title>std::sys::sync::condvar::futex::Condvar::wait_optional_timeout (267 samples, 0.67%)</title><rect x="94.8002%" y="373" width="0.6691%" height="15" fill="rgb(217,125,39)" fg:x="37830" fg:w="267"/><text x="94.9202%" y="383.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock (52 samples, 0.13%)</title><rect x="95.3389%" y="357" width="0.1303%" height="15" fill="rgb(235,36,10)" fg:x="38045" fg:w="52"/><text x="95.4589%" y="367.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock_contended (11 samples, 0.03%)</title><rect x="95.4417%" y="341" width="0.0276%" height="15" fill="rgb(251,123,47)" fg:x="38086" fg:w="11"/><text x="95.5617%" y="351.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::spin (10 samples, 0.03%)</title><rect x="95.4442%" y="325" width="0.0251%" height="15" fill="rgb(221,13,13)" fg:x="38087" fg:w="10"/><text x="95.5642%" y="335.50"></text></g><g><title>core::hint::spin_loop (10 samples, 0.03%)</title><rect x="95.4442%" y="309" width="0.0251%" height="15" fill="rgb(238,131,9)" fg:x="38087" fg:w="10"/><text x="95.5642%" y="319.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (10 samples, 0.03%)</title><rect x="95.4442%" y="293" width="0.0251%" height="15" fill="rgb(211,50,8)" fg:x="38087" fg:w="10"/><text x="95.5642%" y="303.50"></text></g><g><title>rayon_core::sleep::Sleep::wake_any_threads (1,003 samples, 2.51%)</title><rect x="95.4692%" y="405" width="2.5135%" height="15" fill="rgb(245,182,24)" fg:x="38097" fg:w="1003"/><text x="95.5892%" y="415.50">rayon_..</text></g><g><title>rayon_core::sleep::Sleep::wake_specific_thread (999 samples, 2.50%)</title><rect x="95.4793%" y="389" width="2.5034%" height="15" fill="rgb(242,14,37)" fg:x="38101" fg:w="999"/><text x="95.5993%" y="399.50">rayon_..</text></g><g><title>syscall (985 samples, 2.47%)</title><rect x="95.5143%" y="373" width="2.4684%" height="15" fill="rgb(246,228,12)" fg:x="38115" fg:w="985"/><text x="95.6343%" y="383.50">syscall</text></g><g><title>sched_yield (685 samples, 1.72%)</title><rect x="97.9827%" y="405" width="1.7166%" height="15" fill="rgb(213,55,15)" fg:x="39100" fg:w="685"/><text x="98.1027%" y="415.50">sche..</text></g><g><title>rayon_core::registry::ThreadBuilder::run (39,269 samples, 98.41%)</title><rect x="1.3006%" y="437" width="98.4062%" height="15" fill="rgb(209,9,3)" fg:x="519" fg:w="39269"/><text x="1.4206%" y="447.50">rayon_core::registry::ThreadBuilder::run</text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold (39,269 samples, 98.41%)</title><rect x="1.3006%" y="421" width="98.4062%" height="15" fill="rgb(230,59,30)" fg:x="519" fg:w="39269"/><text x="1.4206%" y="431.50">rayon_core::registry::WorkerThread::wait_until_cold</text></g><g><title>malloc (12 samples, 0.03%)</title><rect x="99.8196%" y="421" width="0.0301%" height="15" fill="rgb(209,121,21)" fg:x="39833" fg:w="12"/><text x="99.9396%" y="431.50"></text></g><g><title>all (39,905 samples, 100%)</title><rect x="0.0000%" y="549" width="100.0000%" height="15" fill="rgb(220,109,13)" fg:x="0" fg:w="39905"/><text x="0.1200%" y="559.50"></text></g><g><title>radian (39,905 samples, 100.00%)</title><rect x="0.0000%" y="533" width="100.0000%" height="15" fill="rgb(232,18,1)" fg:x="0" fg:w="39905"/><text x="0.1200%" y="543.50">radian</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (39,811 samples, 99.76%)</title><rect x="0.2356%" y="517" width="99.7644%" height="15" fill="rgb(215,41,42)" fg:x="94" fg:w="39811"/><text x="0.3556%" y="527.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (39,811 samples, 99.76%)</title><rect x="0.2356%" y="501" width="99.7644%" height="15" fill="rgb(224,123,36)" fg:x="94" fg:w="39811"/><text x="0.3556%" y="511.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (39,811 samples, 99.76%)</title><rect x="0.2356%" y="485" width="99.7644%" height="15" fill="rgb(240,125,3)" fg:x="94" fg:w="39811"/><text x="0.3556%" y="495.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (39,811 samples, 99.76%)</title><rect x="0.2356%" y="469" width="99.7644%" height="15" fill="rgb(205,98,50)" fg:x="94" fg:w="39811"/><text x="0.3556%" y="479.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (39,811 samples, 99.76%)</title><rect x="0.2356%" y="453" width="99.7644%" height="15" fill="rgb(205,185,37)" fg:x="94" fg:w="39811"/><text x="0.3556%" y="463.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>rsahmi::kractor::reads::parser::fasta::FastaRecord&lt;T&gt;::write (117 samples, 0.29%)</title><rect x="99.7068%" y="437" width="0.2932%" height="15" fill="rgb(238,207,15)" fg:x="39788" fg:w="117"/><text x="99.8268%" y="447.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_all_cold (60 samples, 0.15%)</title><rect x="99.8496%" y="421" width="0.1504%" height="15" fill="rgb(213,199,42)" fg:x="39845" fg:w="60"/><text x="99.9696%" y="431.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (60 samples, 0.15%)</title><rect x="99.8496%" y="405" width="0.1504%" height="15" fill="rgb(235,201,11)" fg:x="39845" fg:w="60"/><text x="99.9696%" y="415.50"></text></g><g><title>&lt;std::fs::File as std::io::Write&gt;::write (60 samples, 0.15%)</title><rect x="99.8496%" y="389" width="0.1504%" height="15" fill="rgb(207,46,11)" fg:x="39845" fg:w="60"/><text x="99.9696%" y="399.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Write&gt;::write (60 samples, 0.15%)</title><rect x="99.8496%" y="373" width="0.1504%" height="15" fill="rgb(241,35,35)" fg:x="39845" fg:w="60"/><text x="99.9696%" y="383.50"></text></g><g><title>std::sys::fs::unix::File::write (60 samples, 0.15%)</title><rect x="99.8496%" y="357" width="0.1504%" height="15" fill="rgb(243,32,47)" fg:x="39845" fg:w="60"/><text x="99.9696%" y="367.50"></text></g><g><title>std::sys::pal::unix::fd::FileDesc::write (60 samples, 0.15%)</title><rect x="99.8496%" y="341" width="0.1504%" height="15" fill="rgb(247,202,23)" fg:x="39845" fg:w="60"/><text x="99.9696%" y="351.50"></text></g><g><title>write (60 samples, 0.15%)</title><rect x="99.8496%" y="325" width="0.1504%" height="15" fill="rgb(219,102,11)" fg:x="39845" fg:w="60"/><text x="99.9696%" y="335.50"></text></g></svg></svg>