<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="2500" height="566" onload="init(evt)" viewBox="0 0 2500 566" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="566" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="549.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="2490" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="2490" y="549.00"> </text><svg id="frames" x="10" width="2480" total_samples="21609"><g><title>_start (3 samples, 0.01%)</title><rect x="0.0000%" y="485" width="0.0139%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="3"/><text x="0.1200%" y="495.50"></text></g><g><title>__libc_start_main (3 samples, 0.01%)</title><rect x="0.0000%" y="469" width="0.0139%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="3"/><text x="0.1200%" y="479.50"></text></g><g><title>Py_BytesMain (3 samples, 0.01%)</title><rect x="0.0000%" y="453" width="0.0139%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="3"/><text x="0.1200%" y="463.50"></text></g><g><title>Py_RunMain (3 samples, 0.01%)</title><rect x="0.0000%" y="437" width="0.0139%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="3"/><text x="0.1200%" y="447.50"></text></g><g><title>_PyRun_AnyFileObject (3 samples, 0.01%)</title><rect x="0.0000%" y="421" width="0.0139%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="3"/><text x="0.1200%" y="431.50"></text></g><g><title>_PyRun_SimpleFileObject (3 samples, 0.01%)</title><rect x="0.0000%" y="405" width="0.0139%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="3"/><text x="0.1200%" y="415.50"></text></g><g><title>PyEval_EvalCode (3 samples, 0.01%)</title><rect x="0.0000%" y="389" width="0.0139%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="3"/><text x="0.1200%" y="399.50"></text></g><g><title>_PyEval_EvalFrameDefault (3 samples, 0.01%)</title><rect x="0.0000%" y="373" width="0.0139%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="3"/><text x="0.1200%" y="383.50"></text></g><g><title>PyObject_Vectorcall (3 samples, 0.01%)</title><rect x="0.0000%" y="357" width="0.0139%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="3"/><text x="0.1200%" y="367.50"></text></g><g><title>_cffi_f_run_Rmainloop (3 samples, 0.01%)</title><rect x="0.0000%" y="341" width="0.0139%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="3"/><text x="0.1200%" y="351.50"></text></g><g><title>run_Rmainloop (3 samples, 0.01%)</title><rect x="0.0000%" y="325" width="0.0139%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="3"/><text x="0.1200%" y="335.50"></text></g><g><title>run_Rmainloop (3 samples, 0.01%)</title><rect x="0.0000%" y="309" width="0.0139%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="3"/><text x="0.1200%" y="319.50"></text></g><g><title>Rf_ReplIteration (3 samples, 0.01%)</title><rect x="0.0000%" y="293" width="0.0139%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="3"/><text x="0.1200%" y="303.50"></text></g><g><title>Rf_eval (3 samples, 0.01%)</title><rect x="0.0000%" y="277" width="0.0139%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="3"/><text x="0.1200%" y="287.50"></text></g><g><title>Rf_eval (3 samples, 0.01%)</title><rect x="0.0000%" y="261" width="0.0139%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="3"/><text x="0.1200%" y="271.50"></text></g><g><title>Rf_eval (3 samples, 0.01%)</title><rect x="0.0000%" y="245" width="0.0139%" height="15" fill="rgb(231,73,38)" fg:x="0" fg:w="3"/><text x="0.1200%" y="255.50"></text></g><g><title>mark_ (3 samples, 0.01%)</title><rect x="0.0000%" y="229" width="0.0139%" height="15" fill="rgb(225,20,46)" fg:x="0" fg:w="3"/><text x="0.1200%" y="239.50"></text></g><g><title>expr_elapsed_time (3 samples, 0.01%)</title><rect x="0.0000%" y="213" width="0.0139%" height="15" fill="rgb(210,31,41)" fg:x="0" fg:w="3"/><text x="0.1200%" y="223.50"></text></g><g><title>Rf_eval (3 samples, 0.01%)</title><rect x="0.0000%" y="197" width="0.0139%" height="15" fill="rgb(221,200,47)" fg:x="0" fg:w="3"/><text x="0.1200%" y="207.50"></text></g><g><title>Rf_eval (3 samples, 0.01%)</title><rect x="0.0000%" y="181" width="0.0139%" height="15" fill="rgb(226,26,5)" fg:x="0" fg:w="3"/><text x="0.1200%" y="191.50"></text></g><g><title>wrap__pprof_kractor_koutput (3 samples, 0.01%)</title><rect x="0.0000%" y="165" width="0.0139%" height="15" fill="rgb(249,33,26)" fg:x="0" fg:w="3"/><text x="0.1200%" y="175.50"></text></g><g><title>rsahmi::kractor::kractor_koutput (3 samples, 0.01%)</title><rect x="0.0000%" y="149" width="0.0139%" height="15" fill="rgb(235,183,28)" fg:x="0" fg:w="3"/><text x="0.1200%" y="159.50"></text></g><g><title>rayon_core::registry::Registry::in_worker (3 samples, 0.01%)</title><rect x="0.0000%" y="133" width="0.0139%" height="15" fill="rgb(221,5,38)" fg:x="0" fg:w="3"/><text x="0.1200%" y="143.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (3 samples, 0.01%)</title><rect x="0.0000%" y="117" width="0.0139%" height="15" fill="rgb(247,18,42)" fg:x="0" fg:w="3"/><text x="0.1200%" y="127.50"></text></g><g><title>rayon_core::latch::LockLatch::wait_and_reset (3 samples, 0.01%)</title><rect x="0.0000%" y="101" width="0.0139%" height="15" fill="rgb(241,131,45)" fg:x="0" fg:w="3"/><text x="0.1200%" y="111.50"></text></g><g><title>std::sys::sync::condvar::futex::Condvar::wait (3 samples, 0.01%)</title><rect x="0.0000%" y="85" width="0.0139%" height="15" fill="rgb(249,31,29)" fg:x="0" fg:w="3"/><text x="0.1200%" y="95.50"></text></g><g><title>std::sys::sync::condvar::futex::Condvar::wait_optional_timeout (3 samples, 0.01%)</title><rect x="0.0000%" y="69" width="0.0139%" height="15" fill="rgb(225,111,53)" fg:x="0" fg:w="3"/><text x="0.1200%" y="79.50"></text></g><g><title>std::sys::pal::unix::futex::futex_wait (3 samples, 0.01%)</title><rect x="0.0000%" y="53" width="0.0139%" height="15" fill="rgb(238,160,17)" fg:x="0" fg:w="3"/><text x="0.1200%" y="63.50"></text></g><g><title>syscall (3 samples, 0.01%)</title><rect x="0.0000%" y="37" width="0.0139%" height="15" fill="rgb(214,148,48)" fg:x="0" fg:w="3"/><text x="0.1200%" y="47.50"></text></g><g><title>crossbeam_channel::waker::SyncWaker::register (5 samples, 0.02%)</title><rect x="0.7728%" y="357" width="0.0231%" height="15" fill="rgb(232,36,49)" fg:x="167" fg:w="5"/><text x="0.8928%" y="367.50"></text></g><g><title>std::thread::Thread::park (37 samples, 0.17%)</title><rect x="0.7960%" y="341" width="0.1712%" height="15" fill="rgb(209,103,24)" fg:x="172" fg:w="37"/><text x="0.9160%" y="351.50"></text></g><g><title>std::sys::sync::thread_parking::futex::Parker::park (37 samples, 0.17%)</title><rect x="0.7960%" y="325" width="0.1712%" height="15" fill="rgb(229,88,8)" fg:x="172" fg:w="37"/><text x="0.9160%" y="335.50"></text></g><g><title>std::sys::pal::unix::futex::futex_wait (37 samples, 0.17%)</title><rect x="0.7960%" y="309" width="0.1712%" height="15" fill="rgb(213,181,19)" fg:x="172" fg:w="37"/><text x="0.9160%" y="319.50"></text></g><g><title>syscall (29 samples, 0.13%)</title><rect x="0.8330%" y="293" width="0.1342%" height="15" fill="rgb(254,191,54)" fg:x="180" fg:w="29"/><text x="0.9530%" y="303.50"></text></g><g><title>crossbeam_channel::flavors::array::Channel&lt;T&gt;::recv::{{closure}} (49 samples, 0.23%)</title><rect x="0.7451%" y="373" width="0.2268%" height="15" fill="rgb(241,83,37)" fg:x="161" fg:w="49"/><text x="0.8651%" y="383.50"></text></g><g><title>std::thread::park (38 samples, 0.18%)</title><rect x="0.7960%" y="357" width="0.1759%" height="15" fill="rgb(233,36,39)" fg:x="172" fg:w="38"/><text x="0.9160%" y="367.50"></text></g><g><title>&lt;crossbeam_channel::channel::IntoIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (204 samples, 0.94%)</title><rect x="0.1620%" y="405" width="0.9441%" height="15" fill="rgb(226,3,54)" fg:x="35" fg:w="204"/><text x="0.2820%" y="415.50">&lt;..</text></g><g><title>crossbeam_channel::flavors::array::Channel&lt;T&gt;::recv (200 samples, 0.93%)</title><rect x="0.1805%" y="389" width="0.9255%" height="15" fill="rgb(245,192,40)" fg:x="39" fg:w="200"/><text x="0.3005%" y="399.50">c..</text></g><g><title>sched_yield (29 samples, 0.13%)</title><rect x="0.9718%" y="373" width="0.1342%" height="15" fill="rgb(238,167,29)" fg:x="210" fg:w="29"/><text x="1.0918%" y="383.50"></text></g><g><title>cfree (11 samples, 0.05%)</title><rect x="1.1060%" y="405" width="0.0509%" height="15" fill="rgb(232,182,51)" fg:x="239" fg:w="11"/><text x="1.2260%" y="415.50"></text></g><g><title>&lt;rayon_core::latch::CountLatch as rayon_core::latch::Latch&gt;::set (5 samples, 0.02%)</title><rect x="3.7392%" y="341" width="0.0231%" height="15" fill="rgb(231,60,39)" fg:x="808" fg:w="5"/><text x="3.8592%" y="351.50"></text></g><g><title>std::sys::pal::unix::futex::futex_wake (275 samples, 1.27%)</title><rect x="3.9150%" y="293" width="1.2726%" height="15" fill="rgb(208,69,12)" fg:x="846" fg:w="275"/><text x="4.0350%" y="303.50">st..</text></g><g><title>syscall (273 samples, 1.26%)</title><rect x="3.9243%" y="277" width="1.2634%" height="15" fill="rgb(235,93,37)" fg:x="848" fg:w="273"/><text x="4.0443%" y="287.50">sy..</text></g><g><title>crossbeam_channel::channel::Sender&lt;T&gt;::send (310 samples, 1.43%)</title><rect x="3.7669%" y="341" width="1.4346%" height="15" fill="rgb(213,116,39)" fg:x="814" fg:w="310"/><text x="3.8869%" y="351.50">cro..</text></g><g><title>crossbeam_channel::flavors::array::Channel&lt;T&gt;::send (306 samples, 1.42%)</title><rect x="3.7855%" y="325" width="1.4161%" height="15" fill="rgb(222,207,29)" fg:x="818" fg:w="306"/><text x="3.9055%" y="335.50">cro..</text></g><g><title>crossbeam_channel::waker::SyncWaker::notify (300 samples, 1.39%)</title><rect x="3.8132%" y="309" width="1.3883%" height="15" fill="rgb(206,96,30)" fg:x="824" fg:w="300"/><text x="3.9332%" y="319.50">cr..</text></g><g><title>malloc (6 samples, 0.03%)</title><rect x="5.2015%" y="341" width="0.0278%" height="15" fill="rgb(218,138,4)" fg:x="1124" fg:w="6"/><text x="5.3215%" y="351.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_avx2 (5,196 samples, 24.05%)</title><rect x="5.2293%" y="341" width="24.0455%" height="15" fill="rgb(250,191,14)" fg:x="1130" fg:w="5196"/><text x="5.3493%" y="351.50">memchr::arch::x86_64::memchr::memchr_raw::find_avx2</text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::find_raw (5,000 samples, 23.14%)</title><rect x="6.1363%" y="325" width="23.1385%" height="15" fill="rgb(239,60,40)" fg:x="1326" fg:w="5000"/><text x="6.2563%" y="335.50">memchr::arch::x86_64::avx2::memchr::One::find_raw</text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::find_raw_avx2 (4,828 samples, 22.34%)</title><rect x="6.9323%" y="309" width="22.3425%" height="15" fill="rgb(206,27,48)" fg:x="1498" fg:w="4828"/><text x="7.0523%" y="319.50">memchr::arch::x86_64::avx2::memchr::One::find_raw_avx2</text></g><g><title>aho_corasick::ahocorasick::enforce_anchored_consistency (55 samples, 0.25%)</title><rect x="35.2492%" y="325" width="0.2545%" height="15" fill="rgb(225,35,8)" fg:x="7617" fg:w="55"/><text x="35.3692%" y="335.50"></text></g><g><title>aho_corasick::automaton::Automaton::try_find (6,867 samples, 31.78%)</title><rect x="35.5037%" y="325" width="31.7784%" height="15" fill="rgb(250,213,24)" fg:x="7672" fg:w="6867"/><text x="35.6237%" y="335.50">aho_corasick::automaton::Automaton::try_find</text></g><g><title>aho_corasick::automaton::try_find_fwd (6,643 samples, 30.74%)</title><rect x="36.5403%" y="309" width="30.7418%" height="15" fill="rgb(247,123,22)" fg:x="7896" fg:w="6643"/><text x="36.6603%" y="319.50">aho_corasick::automaton::try_find_fwd</text></g><g><title>&lt;aho_corasick::util::prefilter::StartBytesOne as aho_corasick::util::prefilter::PrefilterI&gt;::find_in (1,582 samples, 7.32%)</title><rect x="59.9611%" y="293" width="7.3210%" height="15" fill="rgb(231,138,38)" fg:x="12957" fg:w="1582"/><text x="60.0811%" y="303.50">&lt;aho_corasick::util::pr..</text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_avx2 (1,020 samples, 4.72%)</title><rect x="62.5619%" y="277" width="4.7203%" height="15" fill="rgb(231,145,46)" fg:x="13519" fg:w="1020"/><text x="62.6819%" y="287.50">memchr::arch::..</text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::find_raw (508 samples, 2.35%)</title><rect x="64.9313%" y="261" width="2.3509%" height="15" fill="rgb(251,118,11)" fg:x="14031" fg:w="508"/><text x="65.0513%" y="271.50">memchr..</text></g><g><title>aho_corasick::automaton::Automaton::try_find_overlapping (87 samples, 0.40%)</title><rect x="67.2822%" y="325" width="0.4026%" height="15" fill="rgb(217,147,25)" fg:x="14539" fg:w="87"/><text x="67.4022%" y="335.50"></text></g><g><title>memchr::arch::x86_64::avx2::packedpair::Finder::find_impl (746 samples, 3.45%)</title><rect x="67.6848%" y="325" width="3.4523%" height="15" fill="rgb(247,81,37)" fg:x="14626" fg:w="746"/><text x="67.8048%" y="335.50">memchr::ar..</text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_avx2 (2,591 samples, 11.99%)</title><rect x="71.1370%" y="325" width="11.9904%" height="15" fill="rgb(209,12,38)" fg:x="15372" fg:w="2591"/><text x="71.2570%" y="335.50">memchr::arch::x86_64::memchr::memchr_raw..</text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::find_raw (1,972 samples, 9.13%)</title><rect x="74.0016%" y="309" width="9.1258%" height="15" fill="rgb(227,1,9)" fg:x="15991" fg:w="1972"/><text x="74.1216%" y="319.50">memchr::arch::x86_64::avx2::me..</text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::find_raw_avx2 (1,366 samples, 6.32%)</title><rect x="76.8060%" y="293" width="6.3214%" height="15" fill="rgb(248,47,43)" fg:x="16597" fg:w="1366"/><text x="76.9260%" y="303.50">memchr::arch::x86_64..</text></g><g><title>&lt;rayon_core::job::HeapJob&lt;BODY&gt; as rayon_core::job::Job&gt;::execute (17,895 samples, 82.81%)</title><rect x="1.4346%" y="373" width="82.8127%" height="15" fill="rgb(221,10,30)" fg:x="310" fg:w="17895"/><text x="1.5546%" y="383.50">&lt;rayon_core::job::HeapJob&lt;BODY&gt; as rayon_core::job::Job&gt;::execute</text></g><g><title>rayon_core::scope::ScopeBase::execute_job_closure (17,892 samples, 82.80%)</title><rect x="1.4485%" y="357" width="82.7988%" height="15" fill="rgb(210,229,1)" fg:x="313" fg:w="17892"/><text x="1.5685%" y="367.50">rayon_core::scope::ScopeBase::execute_job_closure</text></g><g><title>rsahmi::kractor::koutput::kractor_match_aho (11,879 samples, 54.97%)</title><rect x="29.2748%" y="341" width="54.9725%" height="15" fill="rgb(222,148,37)" fg:x="6326" fg:w="11879"/><text x="29.3948%" y="351.50">rsahmi::kractor::koutput::kractor_match_aho</text></g><g><title>memchr::memmem::searcher::searcher_kind_avx2 (242 samples, 1.12%)</title><rect x="83.1274%" y="325" width="1.1199%" height="15" fill="rgb(234,67,33)" fg:x="17963" fg:w="242"/><text x="83.2474%" y="335.50">m..</text></g><g><title>memchr::arch::all::rabinkarp::is_equal_raw (9 samples, 0.04%)</title><rect x="84.2057%" y="309" width="0.0416%" height="15" fill="rgb(247,98,35)" fg:x="18196" fg:w="9"/><text x="84.3257%" y="319.50"></text></g><g><title>malloc (15 samples, 0.07%)</title><rect x="84.3352%" y="325" width="0.0694%" height="15" fill="rgb(247,138,52)" fg:x="18224" fg:w="15"/><text x="84.4552%" y="335.50"></text></g><g><title>memchr::arch::x86_64::memchr::memrchr_raw::find_avx2 (563 samples, 2.61%)</title><rect x="84.4046%" y="325" width="2.6054%" height="15" fill="rgb(213,79,30)" fg:x="18239" fg:w="563"/><text x="84.5246%" y="335.50">memchr:..</text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::rfind_raw (562 samples, 2.60%)</title><rect x="84.4093%" y="309" width="2.6008%" height="15" fill="rgb(246,177,23)" fg:x="18240" fg:w="562"/><text x="84.5293%" y="319.50">memchr:..</text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::rfind_raw_avx2 (560 samples, 2.59%)</title><rect x="84.4185%" y="293" width="2.5915%" height="15" fill="rgb(230,62,27)" fg:x="18242" fg:w="560"/><text x="84.5385%" y="303.50">memchr:..</text></g><g><title>rayon_core::registry::Registry::inject_or_push (7 samples, 0.03%)</title><rect x="87.0100%" y="325" width="0.0324%" height="15" fill="rgb(216,154,8)" fg:x="18802" fg:w="7"/><text x="87.1300%" y="335.50"></text></g><g><title>rayon_core::scope::scope::{{closure}} (888 samples, 4.11%)</title><rect x="84.2473%" y="357" width="4.1094%" height="15" fill="rgb(244,35,45)" fg:x="18205" fg:w="888"/><text x="84.3673%" y="367.50">rayon_core::..</text></g><g><title>rayon_core::scope::ScopeBase::complete (888 samples, 4.11%)</title><rect x="84.2473%" y="341" width="4.1094%" height="15" fill="rgb(251,115,12)" fg:x="18205" fg:w="888"/><text x="84.3673%" y="351.50">rayon_core::..</text></g><g><title>rayon_core::sleep::Sleep::wake_any_threads (284 samples, 1.31%)</title><rect x="87.0424%" y="325" width="1.3143%" height="15" fill="rgb(240,54,50)" fg:x="18809" fg:w="284"/><text x="87.1624%" y="335.50">ra..</text></g><g><title>rayon_core::sleep::Sleep::wake_specific_thread (282 samples, 1.31%)</title><rect x="87.0517%" y="309" width="1.3050%" height="15" fill="rgb(233,84,52)" fg:x="18811" fg:w="282"/><text x="87.1717%" y="319.50">ra..</text></g><g><title>syscall (273 samples, 1.26%)</title><rect x="87.0933%" y="293" width="1.2634%" height="15" fill="rgb(207,117,47)" fg:x="18820" fg:w="273"/><text x="87.2133%" y="303.50">sy..</text></g><g><title>&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (889 samples, 4.11%)</title><rect x="84.2473%" y="373" width="4.1140%" height="15" fill="rgb(249,43,39)" fg:x="18205" fg:w="889"/><text x="84.3673%" y="383.50">&lt;rayon_core:..</text></g><g><title>cfree (8 samples, 0.04%)</title><rect x="88.3613%" y="373" width="0.0370%" height="15" fill="rgb(209,38,44)" fg:x="19094" fg:w="8"/><text x="88.4813%" y="383.50"></text></g><g><title>crossbeam_deque::deque::Stealer&lt;T&gt;::steal (11 samples, 0.05%)</title><rect x="88.3984%" y="373" width="0.0509%" height="15" fill="rgb(236,212,23)" fg:x="19102" fg:w="11"/><text x="88.5184%" y="383.50"></text></g><g><title>crossbeam_epoch::default::with_handle (8 samples, 0.04%)</title><rect x="88.4122%" y="357" width="0.0370%" height="15" fill="rgb(242,79,21)" fg:x="19105" fg:w="8"/><text x="88.5322%" y="367.50"></text></g><g><title>__tls_get_addr (13 samples, 0.06%)</title><rect x="89.3563%" y="325" width="0.0602%" height="15" fill="rgb(211,96,35)" fg:x="19309" fg:w="13"/><text x="89.4763%" y="335.50"></text></g><g><title>__tls_get_addr (15 samples, 0.07%)</title><rect x="90.9945%" y="309" width="0.0694%" height="15" fill="rgb(253,215,40)" fg:x="19663" fg:w="15"/><text x="91.1145%" y="319.50"></text></g><g><title>crossbeam_epoch::internal::Global::try_advance (656 samples, 3.04%)</title><rect x="91.0963%" y="293" width="3.0358%" height="15" fill="rgb(211,81,21)" fg:x="19685" fg:w="656"/><text x="91.2163%" y="303.50">crossbea..</text></g><g><title>crossbeam_deque::deque::Stealer&lt;T&gt;::steal (1,186 samples, 5.49%)</title><rect x="88.7315%" y="341" width="5.4885%" height="15" fill="rgb(208,190,38)" fg:x="19174" fg:w="1186"/><text x="88.8515%" y="351.50">crossbeam_deque::..</text></g><g><title>crossbeam_epoch::default::with_handle (1,038 samples, 4.80%)</title><rect x="89.4164%" y="325" width="4.8036%" height="15" fill="rgb(235,213,38)" fg:x="19322" fg:w="1038"/><text x="89.5364%" y="335.50">crossbeam_epoc..</text></g><g><title>crossbeam_epoch::internal::Global::collect (682 samples, 3.16%)</title><rect x="91.0639%" y="309" width="3.1561%" height="15" fill="rgb(237,122,38)" fg:x="19678" fg:w="682"/><text x="91.1839%" y="319.50">crossbeam..</text></g><g><title>crossbeam_epoch::sync::queue::Queue&lt;T&gt;::try_pop_if (19 samples, 0.09%)</title><rect x="94.1321%" y="293" width="0.0879%" height="15" fill="rgb(244,218,35)" fg:x="20341" fg:w="19"/><text x="94.2521%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1,245 samples, 5.76%)</title><rect x="88.5094%" y="357" width="5.7615%" height="15" fill="rgb(240,68,47)" fg:x="19126" fg:w="1245"/><text x="88.6294%" y="367.50">&lt;core::iter::adapt..</text></g><g><title>crossbeam_deque::deque::Worker&lt;T&gt;::new_lifo (11 samples, 0.05%)</title><rect x="94.2200%" y="341" width="0.0509%" height="15" fill="rgb(210,16,53)" fg:x="20360" fg:w="11"/><text x="94.3400%" y="351.50"></text></g><g><title>crossbeam_deque::deque::Injector&lt;T&gt;::steal (32 samples, 0.15%)</title><rect x="94.2709%" y="357" width="0.1481%" height="15" fill="rgb(235,124,12)" fg:x="20371" fg:w="32"/><text x="94.3909%" y="367.50"></text></g><g><title>__tls_get_addr (7 samples, 0.03%)</title><rect x="94.5486%" y="341" width="0.0324%" height="15" fill="rgb(224,169,11)" fg:x="20431" fg:w="7"/><text x="94.6686%" y="351.50"></text></g><g><title>crossbeam_epoch::internal::Global::try_advance (34 samples, 0.16%)</title><rect x="94.7429%" y="309" width="0.1573%" height="15" fill="rgb(250,166,2)" fg:x="20473" fg:w="34"/><text x="94.8629%" y="319.50"></text></g><g><title>crossbeam_deque::deque::Stealer&lt;T&gt;::steal (105 samples, 0.49%)</title><rect x="94.4190%" y="357" width="0.4859%" height="15" fill="rgb(242,216,29)" fg:x="20403" fg:w="105"/><text x="94.5390%" y="367.50"></text></g><g><title>crossbeam_epoch::default::with_handle (70 samples, 0.32%)</title><rect x="94.5810%" y="341" width="0.3239%" height="15" fill="rgb(230,116,27)" fg:x="20438" fg:w="70"/><text x="94.7010%" y="351.50"></text></g><g><title>crossbeam_epoch::internal::Global::collect (35 samples, 0.16%)</title><rect x="94.7429%" y="325" width="0.1620%" height="15" fill="rgb(228,99,48)" fg:x="20473" fg:w="35"/><text x="94.8629%" y="335.50"></text></g><g><title>rayon_core::registry::WorkerThread::find_work (1,406 samples, 6.51%)</title><rect x="88.4493%" y="373" width="6.5065%" height="15" fill="rgb(253,11,6)" fg:x="19113" fg:w="1406"/><text x="88.5693%" y="383.50">rayon_core::registry..</text></g><g><title>crossbeam_deque::deque::Worker&lt;T&gt;::pop (10 samples, 0.05%)</title><rect x="94.9095%" y="357" width="0.0463%" height="15" fill="rgb(247,143,39)" fg:x="20509" fg:w="10"/><text x="95.0295%" y="367.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (3 samples, 0.01%)</title><rect x="95.1178%" y="309" width="0.0139%" height="15" fill="rgb(236,97,10)" fg:x="20554" fg:w="3"/><text x="95.2378%" y="319.50"></text></g><g><title>std::sys::pal::unix::futex::futex_wait (119 samples, 0.55%)</title><rect x="95.0622%" y="325" width="0.5507%" height="15" fill="rgb(233,208,19)" fg:x="20542" fg:w="119"/><text x="95.1822%" y="335.50"></text></g><g><title>syscall (104 samples, 0.48%)</title><rect x="95.1317%" y="309" width="0.4813%" height="15" fill="rgb(216,164,2)" fg:x="20557" fg:w="104"/><text x="95.2517%" y="319.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (9 samples, 0.04%)</title><rect x="95.6129%" y="309" width="0.0416%" height="15" fill="rgb(220,129,5)" fg:x="20661" fg:w="9"/><text x="95.7329%" y="319.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (9 samples, 0.04%)</title><rect x="95.6129%" y="293" width="0.0416%" height="15" fill="rgb(242,17,10)" fg:x="20661" fg:w="9"/><text x="95.7329%" y="303.50"></text></g><g><title>rayon_core::sleep::Sleep::sleep (158 samples, 0.73%)</title><rect x="94.9558%" y="373" width="0.7312%" height="15" fill="rgb(242,107,0)" fg:x="20519" fg:w="158"/><text x="95.0758%" y="383.50"></text></g><g><title>std::sys::sync::condvar::futex::Condvar::wait (135 samples, 0.62%)</title><rect x="95.0622%" y="357" width="0.6247%" height="15" fill="rgb(251,28,31)" fg:x="20542" fg:w="135"/><text x="95.1822%" y="367.50"></text></g><g><title>std::sys::sync::condvar::futex::Condvar::wait_optional_timeout (135 samples, 0.62%)</title><rect x="95.0622%" y="341" width="0.6247%" height="15" fill="rgb(233,223,10)" fg:x="20542" fg:w="135"/><text x="95.1822%" y="351.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock (16 samples, 0.07%)</title><rect x="95.6129%" y="325" width="0.0740%" height="15" fill="rgb(215,21,27)" fg:x="20661" fg:w="16"/><text x="95.7329%" y="335.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock_contended (7 samples, 0.03%)</title><rect x="95.6546%" y="309" width="0.0324%" height="15" fill="rgb(232,23,21)" fg:x="20670" fg:w="7"/><text x="95.7746%" y="319.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::spin (6 samples, 0.03%)</title><rect x="95.6592%" y="293" width="0.0278%" height="15" fill="rgb(244,5,23)" fg:x="20671" fg:w="6"/><text x="95.7792%" y="303.50"></text></g><g><title>core::hint::spin_loop (6 samples, 0.03%)</title><rect x="95.6592%" y="277" width="0.0278%" height="15" fill="rgb(226,81,46)" fg:x="20671" fg:w="6"/><text x="95.7792%" y="287.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (6 samples, 0.03%)</title><rect x="95.6592%" y="261" width="0.0278%" height="15" fill="rgb(247,70,30)" fg:x="20671" fg:w="6"/><text x="95.7792%" y="271.50"></text></g><g><title>rayon_core::sleep::Sleep::wake_any_threads (577 samples, 2.67%)</title><rect x="95.6870%" y="373" width="2.6702%" height="15" fill="rgb(212,68,19)" fg:x="20677" fg:w="577"/><text x="95.8070%" y="383.50">rayon_c..</text></g><g><title>rayon_core::sleep::Sleep::wake_specific_thread (575 samples, 2.66%)</title><rect x="95.6962%" y="357" width="2.6609%" height="15" fill="rgb(240,187,13)" fg:x="20679" fg:w="575"/><text x="95.8162%" y="367.50">rayon_c..</text></g><g><title>syscall (567 samples, 2.62%)</title><rect x="95.7333%" y="341" width="2.6239%" height="15" fill="rgb(223,113,26)" fg:x="20687" fg:w="567"/><text x="95.8533%" y="351.50">syscall</text></g><g><title>sched_yield (313 samples, 1.45%)</title><rect x="98.3572%" y="373" width="1.4485%" height="15" fill="rgb(206,192,2)" fg:x="21254" fg:w="313"/><text x="98.4772%" y="383.50">sch..</text></g><g><title>rayon_core::registry::ThreadBuilder::run (21,321 samples, 98.67%)</title><rect x="1.1569%" y="405" width="98.6672%" height="15" fill="rgb(241,108,4)" fg:x="250" fg:w="21321"/><text x="1.2769%" y="415.50">rayon_core::registry::ThreadBuilder::run</text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold (21,321 samples, 98.67%)</title><rect x="1.1569%" y="389" width="98.6672%" height="15" fill="rgb(247,173,49)" fg:x="250" fg:w="21321"/><text x="1.2769%" y="399.50">rayon_core::registry::WorkerThread::wait_until_cold</text></g><g><title>std::thread::yield_now (4 samples, 0.02%)</title><rect x="99.8056%" y="373" width="0.0185%" height="15" fill="rgb(224,114,35)" fg:x="21567" fg:w="4"/><text x="99.9256%" y="383.50"></text></g><g><title>all (21,609 samples, 100%)</title><rect x="0.0000%" y="517" width="100.0000%" height="15" fill="rgb(245,159,27)" fg:x="0" fg:w="21609"/><text x="0.1200%" y="527.50"></text></g><g><title>radian (21,609 samples, 100.00%)</title><rect x="0.0000%" y="501" width="100.0000%" height="15" fill="rgb(245,172,44)" fg:x="0" fg:w="21609"/><text x="0.1200%" y="511.50">radian</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (21,606 samples, 99.99%)</title><rect x="0.0139%" y="485" width="99.9861%" height="15" fill="rgb(236,23,11)" fg:x="3" fg:w="21606"/><text x="0.1339%" y="495.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (21,606 samples, 99.99%)</title><rect x="0.0139%" y="469" width="99.9861%" height="15" fill="rgb(205,117,38)" fg:x="3" fg:w="21606"/><text x="0.1339%" y="479.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (21,606 samples, 99.99%)</title><rect x="0.0139%" y="453" width="99.9861%" height="15" fill="rgb(237,72,25)" fg:x="3" fg:w="21606"/><text x="0.1339%" y="463.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (21,606 samples, 99.99%)</title><rect x="0.0139%" y="437" width="99.9861%" height="15" fill="rgb(244,70,9)" fg:x="3" fg:w="21606"/><text x="0.1339%" y="447.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (21,606 samples, 99.99%)</title><rect x="0.0139%" y="421" width="99.9861%" height="15" fill="rgb(217,125,39)" fg:x="3" fg:w="21606"/><text x="0.1339%" y="431.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_all_cold (38 samples, 0.18%)</title><rect x="99.8241%" y="405" width="0.1759%" height="15" fill="rgb(235,36,10)" fg:x="21571" fg:w="38"/><text x="99.9441%" y="415.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (38 samples, 0.18%)</title><rect x="99.8241%" y="389" width="0.1759%" height="15" fill="rgb(251,123,47)" fg:x="21571" fg:w="38"/><text x="99.9441%" y="399.50"></text></g><g><title>&lt;std::fs::File as std::io::Write&gt;::write (38 samples, 0.18%)</title><rect x="99.8241%" y="373" width="0.1759%" height="15" fill="rgb(221,13,13)" fg:x="21571" fg:w="38"/><text x="99.9441%" y="383.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Write&gt;::write (38 samples, 0.18%)</title><rect x="99.8241%" y="357" width="0.1759%" height="15" fill="rgb(238,131,9)" fg:x="21571" fg:w="38"/><text x="99.9441%" y="367.50"></text></g><g><title>std::sys::fs::unix::File::write (38 samples, 0.18%)</title><rect x="99.8241%" y="341" width="0.1759%" height="15" fill="rgb(211,50,8)" fg:x="21571" fg:w="38"/><text x="99.9441%" y="351.50"></text></g><g><title>std::sys::pal::unix::fd::FileDesc::write (38 samples, 0.18%)</title><rect x="99.8241%" y="325" width="0.1759%" height="15" fill="rgb(245,182,24)" fg:x="21571" fg:w="38"/><text x="99.9441%" y="335.50"></text></g><g><title>write (38 samples, 0.18%)</title><rect x="99.8241%" y="309" width="0.1759%" height="15" fill="rgb(242,14,37)" fg:x="21571" fg:w="38"/><text x="99.9441%" y="319.50"></text></g></svg></svg>