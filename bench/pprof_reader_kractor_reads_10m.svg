<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="2500" height="598" onload="init(evt)" viewBox="0 0 2500 598" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="598" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="581.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="2490" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="2490" y="581.00"> </text><svg id="frames" x="10" width="2480" total_samples="42011"><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (9 samples, 0.02%)</title><rect x="0.0071%" y="165" width="0.0214%" height="15" fill="rgb(227,0,7)" fg:x="3" fg:w="9"/><text x="0.1271%" y="175.50"></text></g><g><title>rayon_core::registry::Registry::in_worker (14 samples, 0.03%)</title><rect x="0.0286%" y="165" width="0.0333%" height="15" fill="rgb(217,0,24)" fg:x="12" fg:w="14"/><text x="0.1486%" y="175.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (14 samples, 0.03%)</title><rect x="0.0286%" y="149" width="0.0333%" height="15" fill="rgb(221,193,54)" fg:x="12" fg:w="14"/><text x="0.1486%" y="159.50"></text></g><g><title>rayon_core::latch::LockLatch::wait_and_reset (14 samples, 0.03%)</title><rect x="0.0286%" y="133" width="0.0333%" height="15" fill="rgb(248,212,6)" fg:x="12" fg:w="14"/><text x="0.1486%" y="143.50"></text></g><g><title>std::sys::sync::condvar::futex::Condvar::wait (14 samples, 0.03%)</title><rect x="0.0286%" y="117" width="0.0333%" height="15" fill="rgb(208,68,35)" fg:x="12" fg:w="14"/><text x="0.1486%" y="127.50"></text></g><g><title>std::sys::sync::condvar::futex::Condvar::wait_optional_timeout (14 samples, 0.03%)</title><rect x="0.0286%" y="101" width="0.0333%" height="15" fill="rgb(232,128,0)" fg:x="12" fg:w="14"/><text x="0.1486%" y="111.50"></text></g><g><title>std::sys::pal::unix::futex::futex_wait (14 samples, 0.03%)</title><rect x="0.0286%" y="85" width="0.0333%" height="15" fill="rgb(207,160,47)" fg:x="12" fg:w="14"/><text x="0.1486%" y="95.50"></text></g><g><title>syscall (14 samples, 0.03%)</title><rect x="0.0286%" y="69" width="0.0333%" height="15" fill="rgb(228,23,34)" fg:x="12" fg:w="14"/><text x="0.1486%" y="79.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read_buf (7 samples, 0.02%)</title><rect x="0.0690%" y="101" width="0.0167%" height="15" fill="rgb(218,30,26)" fg:x="29" fg:w="7"/><text x="0.1890%" y="111.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Read&gt;::read_buf (7 samples, 0.02%)</title><rect x="0.0690%" y="85" width="0.0167%" height="15" fill="rgb(220,122,19)" fg:x="29" fg:w="7"/><text x="0.1890%" y="95.50"></text></g><g><title>std::sys::fs::unix::File::read_buf (7 samples, 0.02%)</title><rect x="0.0690%" y="69" width="0.0167%" height="15" fill="rgb(250,228,42)" fg:x="29" fg:w="7"/><text x="0.1890%" y="79.50"></text></g><g><title>std::sys::pal::unix::fd::FileDesc::read_buf (7 samples, 0.02%)</title><rect x="0.0690%" y="53" width="0.0167%" height="15" fill="rgb(240,193,28)" fg:x="29" fg:w="7"/><text x="0.1890%" y="63.50"></text></g><g><title>read (7 samples, 0.02%)</title><rect x="0.0690%" y="37" width="0.0167%" height="15" fill="rgb(216,20,37)" fg:x="29" fg:w="7"/><text x="0.1890%" y="47.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (11 samples, 0.03%)</title><rect x="0.0857%" y="101" width="0.0262%" height="15" fill="rgb(206,188,39)" fg:x="36" fg:w="11"/><text x="0.2057%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (10 samples, 0.02%)</title><rect x="0.0881%" y="85" width="0.0238%" height="15" fill="rgb(217,207,13)" fg:x="37" fg:w="10"/><text x="0.2081%" y="95.50"></text></g><g><title>malloc (5 samples, 0.01%)</title><rect x="0.1000%" y="69" width="0.0119%" height="15" fill="rgb(231,73,38)" fg:x="42" fg:w="5"/><text x="0.2200%" y="79.50"></text></g><g><title>core::slice::memchr::memchr_aligned (6 samples, 0.01%)</title><rect x="0.1119%" y="101" width="0.0143%" height="15" fill="rgb(225,20,46)" fg:x="47" fg:w="6"/><text x="0.2319%" y="111.50"></text></g><g><title>core::slice::memchr::memchr_aligned::runtime (6 samples, 0.01%)</title><rect x="0.1119%" y="85" width="0.0143%" height="15" fill="rgb(210,31,41)" fg:x="47" fg:w="6"/><text x="0.2319%" y="95.50"></text></g><g><title>core::slice::memchr::memchr_naive (6 samples, 0.01%)</title><rect x="0.1119%" y="69" width="0.0143%" height="15" fill="rgb(221,200,47)" fg:x="47" fg:w="6"/><text x="0.2319%" y="79.50"></text></g><g><title>&lt;std::io::Lines&lt;B&gt; as core::iter::traits::iterator::Iterator&gt;::next (30 samples, 0.07%)</title><rect x="0.0666%" y="133" width="0.0714%" height="15" fill="rgb(226,26,5)" fg:x="28" fg:w="30"/><text x="0.1866%" y="143.50"></text></g><g><title>std::io::append_to_string (30 samples, 0.07%)</title><rect x="0.0666%" y="117" width="0.0714%" height="15" fill="rgb(249,33,26)" fg:x="28" fg:w="30"/><text x="0.1866%" y="127.50"></text></g><g><title>core::str::converts::from_utf8 (5 samples, 0.01%)</title><rect x="0.1262%" y="101" width="0.0119%" height="15" fill="rgb(235,183,28)" fg:x="53" fg:w="5"/><text x="0.2462%" y="111.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (16 samples, 0.04%)</title><rect x="0.1523%" y="117" width="0.0381%" height="15" fill="rgb(221,5,38)" fg:x="64" fg:w="16"/><text x="0.2723%" y="127.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::next (15 samples, 0.04%)</title><rect x="0.1547%" y="101" width="0.0357%" height="15" fill="rgb(247,18,42)" fg:x="65" fg:w="15"/><text x="0.2747%" y="111.50"></text></g><g><title>_start (94 samples, 0.22%)</title><rect x="0.0000%" y="517" width="0.2238%" height="15" fill="rgb(241,131,45)" fg:x="0" fg:w="94"/><text x="0.1200%" y="527.50"></text></g><g><title>__libc_start_main (94 samples, 0.22%)</title><rect x="0.0000%" y="501" width="0.2238%" height="15" fill="rgb(249,31,29)" fg:x="0" fg:w="94"/><text x="0.1200%" y="511.50"></text></g><g><title>Py_BytesMain (94 samples, 0.22%)</title><rect x="0.0000%" y="485" width="0.2238%" height="15" fill="rgb(225,111,53)" fg:x="0" fg:w="94"/><text x="0.1200%" y="495.50"></text></g><g><title>Py_RunMain (94 samples, 0.22%)</title><rect x="0.0000%" y="469" width="0.2238%" height="15" fill="rgb(238,160,17)" fg:x="0" fg:w="94"/><text x="0.1200%" y="479.50"></text></g><g><title>_PyRun_AnyFileObject (94 samples, 0.22%)</title><rect x="0.0000%" y="453" width="0.2238%" height="15" fill="rgb(214,148,48)" fg:x="0" fg:w="94"/><text x="0.1200%" y="463.50"></text></g><g><title>_PyRun_SimpleFileObject (94 samples, 0.22%)</title><rect x="0.0000%" y="437" width="0.2238%" height="15" fill="rgb(232,36,49)" fg:x="0" fg:w="94"/><text x="0.1200%" y="447.50"></text></g><g><title>PyEval_EvalCode (94 samples, 0.22%)</title><rect x="0.0000%" y="421" width="0.2238%" height="15" fill="rgb(209,103,24)" fg:x="0" fg:w="94"/><text x="0.1200%" y="431.50"></text></g><g><title>_PyEval_EvalFrameDefault (94 samples, 0.22%)</title><rect x="0.0000%" y="405" width="0.2238%" height="15" fill="rgb(229,88,8)" fg:x="0" fg:w="94"/><text x="0.1200%" y="415.50"></text></g><g><title>PyObject_Vectorcall (94 samples, 0.22%)</title><rect x="0.0000%" y="389" width="0.2238%" height="15" fill="rgb(213,181,19)" fg:x="0" fg:w="94"/><text x="0.1200%" y="399.50"></text></g><g><title>_cffi_f_run_Rmainloop (94 samples, 0.22%)</title><rect x="0.0000%" y="373" width="0.2238%" height="15" fill="rgb(254,191,54)" fg:x="0" fg:w="94"/><text x="0.1200%" y="383.50"></text></g><g><title>run_Rmainloop (94 samples, 0.22%)</title><rect x="0.0000%" y="357" width="0.2238%" height="15" fill="rgb(241,83,37)" fg:x="0" fg:w="94"/><text x="0.1200%" y="367.50"></text></g><g><title>run_Rmainloop (94 samples, 0.22%)</title><rect x="0.0000%" y="341" width="0.2238%" height="15" fill="rgb(233,36,39)" fg:x="0" fg:w="94"/><text x="0.1200%" y="351.50"></text></g><g><title>Rf_ReplIteration (94 samples, 0.22%)</title><rect x="0.0000%" y="325" width="0.2238%" height="15" fill="rgb(226,3,54)" fg:x="0" fg:w="94"/><text x="0.1200%" y="335.50"></text></g><g><title>Rf_eval (94 samples, 0.22%)</title><rect x="0.0000%" y="309" width="0.2238%" height="15" fill="rgb(245,192,40)" fg:x="0" fg:w="94"/><text x="0.1200%" y="319.50"></text></g><g><title>Rf_eval (94 samples, 0.22%)</title><rect x="0.0000%" y="293" width="0.2238%" height="15" fill="rgb(238,167,29)" fg:x="0" fg:w="94"/><text x="0.1200%" y="303.50"></text></g><g><title>Rf_eval (94 samples, 0.22%)</title><rect x="0.0000%" y="277" width="0.2238%" height="15" fill="rgb(232,182,51)" fg:x="0" fg:w="94"/><text x="0.1200%" y="287.50"></text></g><g><title>mark_ (94 samples, 0.22%)</title><rect x="0.0000%" y="261" width="0.2238%" height="15" fill="rgb(231,60,39)" fg:x="0" fg:w="94"/><text x="0.1200%" y="271.50"></text></g><g><title>expr_elapsed_time (94 samples, 0.22%)</title><rect x="0.0000%" y="245" width="0.2238%" height="15" fill="rgb(208,69,12)" fg:x="0" fg:w="94"/><text x="0.1200%" y="255.50"></text></g><g><title>Rf_eval (94 samples, 0.22%)</title><rect x="0.0000%" y="229" width="0.2238%" height="15" fill="rgb(235,93,37)" fg:x="0" fg:w="94"/><text x="0.1200%" y="239.50"></text></g><g><title>Rf_eval (94 samples, 0.22%)</title><rect x="0.0000%" y="213" width="0.2238%" height="15" fill="rgb(213,116,39)" fg:x="0" fg:w="94"/><text x="0.1200%" y="223.50"></text></g><g><title>wrap__pprof_kractor_reads (94 samples, 0.22%)</title><rect x="0.0000%" y="197" width="0.2238%" height="15" fill="rgb(222,207,29)" fg:x="0" fg:w="94"/><text x="0.1200%" y="207.50"></text></g><g><title>mire::kractor::kractor_reads (94 samples, 0.22%)</title><rect x="0.0000%" y="181" width="0.2238%" height="15" fill="rgb(206,96,30)" fg:x="0" fg:w="94"/><text x="0.1200%" y="191.50"></text></g><g><title>mire::kractor::reads::read_sequence_id_from_koutput (68 samples, 0.16%)</title><rect x="0.0619%" y="165" width="0.1619%" height="15" fill="rgb(218,138,4)" fg:x="26" fg:w="68"/><text x="0.1819%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (68 samples, 0.16%)</title><rect x="0.0619%" y="149" width="0.1619%" height="15" fill="rgb(250,191,14)" fg:x="26" fg:w="68"/><text x="0.1819%" y="159.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (36 samples, 0.09%)</title><rect x="0.1381%" y="133" width="0.0857%" height="15" fill="rgb(239,60,40)" fg:x="58" fg:w="36"/><text x="0.2581%" y="143.50"></text></g><g><title>malloc (13 samples, 0.03%)</title><rect x="0.1928%" y="117" width="0.0309%" height="15" fill="rgb(206,27,48)" fg:x="81" fg:w="13"/><text x="0.3128%" y="127.50"></text></g><g><title>crossbeam_channel::flavors::array::Channel&lt;T&gt;::recv::{{closure}} (8 samples, 0.02%)</title><rect x="0.2833%" y="405" width="0.0190%" height="15" fill="rgb(225,35,8)" fg:x="119" fg:w="8"/><text x="0.4033%" y="415.50"></text></g><g><title>std::thread::park (8 samples, 0.02%)</title><rect x="0.2833%" y="389" width="0.0190%" height="15" fill="rgb(250,213,24)" fg:x="119" fg:w="8"/><text x="0.4033%" y="399.50"></text></g><g><title>std::thread::Thread::park (8 samples, 0.02%)</title><rect x="0.2833%" y="373" width="0.0190%" height="15" fill="rgb(247,123,22)" fg:x="119" fg:w="8"/><text x="0.4033%" y="383.50"></text></g><g><title>std::sys::sync::thread_parking::futex::Parker::park (8 samples, 0.02%)</title><rect x="0.2833%" y="357" width="0.0190%" height="15" fill="rgb(231,138,38)" fg:x="119" fg:w="8"/><text x="0.4033%" y="367.50"></text></g><g><title>std::sys::pal::unix::futex::futex_wait (8 samples, 0.02%)</title><rect x="0.2833%" y="341" width="0.0190%" height="15" fill="rgb(231,145,46)" fg:x="119" fg:w="8"/><text x="0.4033%" y="351.50"></text></g><g><title>syscall (7 samples, 0.02%)</title><rect x="0.2856%" y="325" width="0.0167%" height="15" fill="rgb(251,118,11)" fg:x="120" fg:w="7"/><text x="0.4056%" y="335.50"></text></g><g><title>&lt;crossbeam_channel::channel::IntoIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (33 samples, 0.08%)</title><rect x="0.2309%" y="437" width="0.0786%" height="15" fill="rgb(217,147,25)" fg:x="97" fg:w="33"/><text x="0.3509%" y="447.50"></text></g><g><title>crossbeam_channel::flavors::array::Channel&lt;T&gt;::recv (33 samples, 0.08%)</title><rect x="0.2309%" y="421" width="0.0786%" height="15" fill="rgb(247,81,37)" fg:x="97" fg:w="33"/><text x="0.3509%" y="431.50"></text></g><g><title>bytes::bytes_mut::shared_v_drop (1,756 samples, 4.18%)</title><rect x="2.7136%" y="373" width="4.1799%" height="15" fill="rgb(209,12,38)" fg:x="1140" fg:w="1756"/><text x="2.8336%" y="383.50">bytes::bytes..</text></g><g><title>crossbeam_channel::channel::Sender&lt;T&gt;::send (51 samples, 0.12%)</title><rect x="6.8958%" y="373" width="0.1214%" height="15" fill="rgb(227,1,9)" fg:x="2897" fg:w="51"/><text x="7.0158%" y="383.50"></text></g><g><title>crossbeam_channel::flavors::array::Channel&lt;T&gt;::send (51 samples, 0.12%)</title><rect x="6.8958%" y="357" width="0.1214%" height="15" fill="rgb(248,47,43)" fg:x="2897" fg:w="51"/><text x="7.0158%" y="367.50"></text></g><g><title>crossbeam_channel::waker::SyncWaker::notify (47 samples, 0.11%)</title><rect x="6.9053%" y="341" width="0.1119%" height="15" fill="rgb(221,10,30)" fg:x="2901" fg:w="47"/><text x="7.0253%" y="351.50"></text></g><g><title>std::sys::pal::unix::futex::futex_wake (38 samples, 0.09%)</title><rect x="6.9268%" y="325" width="0.0905%" height="15" fill="rgb(210,229,1)" fg:x="2910" fg:w="38"/><text x="7.0468%" y="335.50"></text></g><g><title>syscall (38 samples, 0.09%)</title><rect x="6.9268%" y="309" width="0.0905%" height="15" fill="rgb(222,148,37)" fg:x="2910" fg:w="38"/><text x="7.0468%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (12,053 samples, 28.69%)</title><rect x="7.0172%" y="373" width="28.6901%" height="15" fill="rgb(234,67,33)" fg:x="2948" fg:w="12053"/><text x="7.1372%" y="383.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner</text></g><g><title>mire::kractor::reads::io::reader::BytesFastqReader::build (5,361 samples, 12.76%)</title><rect x="36.5000%" y="357" width="12.7609%" height="15" fill="rgb(247,98,35)" fg:x="15334" fg:w="5361"/><text x="36.6200%" y="367.50">mire::kractor::reads::io::reader::BytesFa..</text></g><g><title>bytes::bytes::Bytes::slice_ref (4,143 samples, 9.86%)</title><rect x="39.3992%" y="341" width="9.8617%" height="15" fill="rgb(247,138,52)" fg:x="16552" fg:w="4143"/><text x="39.5192%" y="351.50">bytes::bytes::Bytes::slice_ref</text></g><g><title>bytes::bytes_mut::shared_v_clone (1,993 samples, 4.74%)</title><rect x="44.5169%" y="325" width="4.7440%" height="15" fill="rgb(213,79,30)" fg:x="18702" fg:w="1993"/><text x="44.6369%" y="335.50">bytes::bytes_m..</text></g><g><title>mire::kractor::reads::parser::fastq::container::FastqContainer::parse_qual (88 samples, 0.21%)</title><rect x="50.0369%" y="341" width="0.2095%" height="15" fill="rgb(246,177,23)" fg:x="21021" fg:w="88"/><text x="50.1569%" y="351.50"></text></g><g><title>mire::kractor::reads::io::reader::BytesFastqReader::read_tail (539 samples, 1.28%)</title><rect x="49.2609%" y="357" width="1.2830%" height="15" fill="rgb(230,62,27)" fg:x="20695" fg:w="539"/><text x="49.3809%" y="367.50">rs..</text></g><g><title>mire::kractor::reads::parser::fastq::container::FastqContainer::parse_sep (125 samples, 0.30%)</title><rect x="50.2464%" y="341" width="0.2975%" height="15" fill="rgb(216,154,8)" fg:x="21109" fg:w="125"/><text x="50.3664%" y="351.50"></text></g><g><title>&lt;rayon_core::job::HeapJob&lt;BODY&gt; as rayon_core::job::Job&gt;::execute (21,614 samples, 51.45%)</title><rect x="0.3499%" y="405" width="51.4484%" height="15" fill="rgb(244,35,45)" fg:x="147" fg:w="21614"/><text x="0.4699%" y="415.50">&lt;rayon_core::job::HeapJob&lt;BODY&gt; as rayon_core::job::Job&gt;::execute</text></g><g><title>rayon_core::scope::ScopeBase::execute_job_closure (21,613 samples, 51.45%)</title><rect x="0.3523%" y="389" width="51.4460%" height="15" fill="rgb(251,115,12)" fg:x="148" fg:w="21613"/><text x="0.4723%" y="399.50">rayon_core::scope::ScopeBase::execute_job_closure</text></g><g><title>mire::kractor::reads::io::reader::BytesFastqReader::read_record (6,759 samples, 16.09%)</title><rect x="35.7097%" y="373" width="16.0886%" height="15" fill="rgb(240,54,50)" fg:x="15002" fg:w="6759"/><text x="35.8297%" y="383.50">mire::kractor::reads::io::reader::BytesFastqReader::..</text></g><g><title>mire::kractor::reads::parser::fastq::container::FastqContainer::parse_head (527 samples, 1.25%)</title><rect x="50.5439%" y="357" width="1.2544%" height="15" fill="rgb(233,84,52)" fg:x="21234" fg:w="527"/><text x="50.6639%" y="367.50">rs..</text></g><g><title>memchr::arch::x86_64::memchr::memchr2_raw::find_avx2 (342 samples, 0.81%)</title><rect x="50.9843%" y="341" width="0.8141%" height="15" fill="rgb(207,117,47)" fg:x="21419" fg:w="342"/><text x="51.1043%" y="351.50"></text></g><g><title>memchr::arch::x86_64::avx2::memchr::Two::find_raw (221 samples, 0.53%)</title><rect x="51.2723%" y="325" width="0.5261%" height="15" fill="rgb(249,43,39)" fg:x="21540" fg:w="221"/><text x="51.3923%" y="335.50"></text></g><g><title>memchr::arch::x86_64::avx2::memchr::Two::find_raw_avx2 (189 samples, 0.45%)</title><rect x="51.3485%" y="309" width="0.4499%" height="15" fill="rgb(209,38,44)" fg:x="21572" fg:w="189"/><text x="51.4685%" y="319.50"></text></g><g><title>rayon_core::sleep::Sleep::wake_any_threads (102 samples, 0.24%)</title><rect x="51.8174%" y="357" width="0.2428%" height="15" fill="rgb(236,212,23)" fg:x="21769" fg:w="102"/><text x="51.9374%" y="367.50"></text></g><g><title>rayon_core::sleep::Sleep::wake_specific_thread (101 samples, 0.24%)</title><rect x="51.8198%" y="341" width="0.2404%" height="15" fill="rgb(242,79,21)" fg:x="21770" fg:w="101"/><text x="51.9398%" y="351.50"></text></g><g><title>syscall (96 samples, 0.23%)</title><rect x="51.8317%" y="325" width="0.2285%" height="15" fill="rgb(211,96,35)" fg:x="21775" fg:w="96"/><text x="51.9517%" y="335.50"></text></g><g><title>__libc_realloc (30 samples, 0.07%)</title><rect x="53.8597%" y="293" width="0.0714%" height="15" fill="rgb(253,215,40)" fg:x="22627" fg:w="30"/><text x="53.9797%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (38 samples, 0.09%)</title><rect x="53.8430%" y="325" width="0.0905%" height="15" fill="rgb(211,81,21)" fg:x="22620" fg:w="38"/><text x="53.9630%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (38 samples, 0.09%)</title><rect x="53.8430%" y="309" width="0.0905%" height="15" fill="rgb(208,190,38)" fg:x="22620" fg:w="38"/><text x="53.9630%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (7,894 samples, 18.79%)</title><rect x="52.0745%" y="341" width="18.7903%" height="15" fill="rgb(235,213,38)" fg:x="21877" fg:w="7894"/><text x="52.1945%" y="351.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;..</text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_avx2 (7,111 samples, 16.93%)</title><rect x="53.9383%" y="325" width="16.9265%" height="15" fill="rgb(237,122,38)" fg:x="22660" fg:w="7111"/><text x="54.0583%" y="335.50">memchr::arch::x86_64::memchr::memchr_raw::find_avx2</text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::find_raw (6,521 samples, 15.52%)</title><rect x="55.3426%" y="309" width="15.5221%" height="15" fill="rgb(244,218,35)" fg:x="23250" fg:w="6521"/><text x="55.4626%" y="319.50">memchr::arch::x86_64::avx2::memchr::One::find_raw</text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::find_raw_avx2 (5,916 samples, 14.08%)</title><rect x="56.7827%" y="293" width="14.0820%" height="15" fill="rgb(240,68,47)" fg:x="23855" fg:w="5916"/><text x="56.9027%" y="303.50">memchr::arch::x86_64::avx2::memchr::One::find_r..</text></g><g><title>bytes::bytes_mut::BytesMut::split_to (7 samples, 0.02%)</title><rect x="70.8719%" y="341" width="0.0167%" height="15" fill="rgb(210,16,53)" fg:x="29774" fg:w="7"/><text x="70.9919%" y="351.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (11,692 samples, 27.83%)</title><rect x="70.8981%" y="325" width="27.8308%" height="15" fill="rgb(235,124,12)" fg:x="29785" fg:w="11692"/><text x="71.0181%" y="335.50">&lt;std::fs::File as std::io::Read&gt;::read</text></g><g><title>&lt;&amp;std::fs::File as std::io::Read&gt;::read (11,692 samples, 27.83%)</title><rect x="70.8981%" y="309" width="27.8308%" height="15" fill="rgb(224,169,11)" fg:x="29785" fg:w="11692"/><text x="71.0181%" y="319.50">&lt;&amp;std::fs::File as std::io::Read&gt;::read</text></g><g><title>std::sys::fs::unix::File::read (11,692 samples, 27.83%)</title><rect x="70.8981%" y="293" width="27.8308%" height="15" fill="rgb(250,166,2)" fg:x="29785" fg:w="11692"/><text x="71.0181%" y="303.50">std::sys::fs::unix::File::read</text></g><g><title>std::sys::pal::unix::fd::FileDesc::read (11,692 samples, 27.83%)</title><rect x="70.8981%" y="277" width="27.8308%" height="15" fill="rgb(242,216,29)" fg:x="29785" fg:w="11692"/><text x="71.0181%" y="287.50">std::sys::pal::unix::fd::FileDesc::read</text></g><g><title>read (11,688 samples, 27.82%)</title><rect x="70.9076%" y="261" width="27.8213%" height="15" fill="rgb(230,116,27)" fg:x="29789" fg:w="11688"/><text x="71.0276%" y="271.50">read</text></g><g><title>rayon_core::scope::scope::{{closure}} (19,718 samples, 46.94%)</title><rect x="51.7983%" y="389" width="46.9353%" height="15" fill="rgb(228,99,48)" fg:x="21761" fg:w="19718"/><text x="51.9183%" y="399.50">rayon_core::scope::scope::{{closure}}</text></g><g><title>rayon_core::scope::ScopeBase::complete (19,718 samples, 46.94%)</title><rect x="51.7983%" y="373" width="46.9353%" height="15" fill="rgb(253,11,6)" fg:x="21761" fg:w="19718"/><text x="51.9183%" y="383.50">rayon_core::scope::ScopeBase::complete</text></g><g><title>mire::kractor::reads::io::reader::BytesChunkReader&lt;R&gt;::chunk_reader (19,608 samples, 46.67%)</title><rect x="52.0602%" y="357" width="46.6735%" height="15" fill="rgb(247,143,39)" fg:x="21871" fg:w="19608"/><text x="52.1802%" y="367.50">mire::kractor::reads::io::reader::BytesChunkReader&lt;R&gt;::chunk_reader</text></g><g><title>mire::kractor::reads::io::reader::read (11,698 samples, 27.85%)</title><rect x="70.8886%" y="341" width="27.8451%" height="15" fill="rgb(236,97,10)" fg:x="29781" fg:w="11698"/><text x="71.0086%" y="351.50">mire::kractor::reads::io::reader::read</text></g><g><title>&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (19,719 samples, 46.94%)</title><rect x="51.7983%" y="405" width="46.9377%" height="15" fill="rgb(233,208,19)" fg:x="21761" fg:w="19719"/><text x="51.9183%" y="415.50">&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute</text></g><g><title>crossbeam_epoch::internal::Global::try_advance (130 samples, 0.31%)</title><rect x="98.9241%" y="325" width="0.3094%" height="15" fill="rgb(216,164,2)" fg:x="41559" fg:w="130"/><text x="99.0441%" y="335.50"></text></g><g><title>crossbeam_deque::deque::Stealer&lt;T&gt;::steal (206 samples, 0.49%)</title><rect x="98.7503%" y="373" width="0.4903%" height="15" fill="rgb(220,129,5)" fg:x="41486" fg:w="206"/><text x="98.8703%" y="383.50"></text></g><g><title>crossbeam_epoch::default::with_handle (184 samples, 0.44%)</title><rect x="98.8027%" y="357" width="0.4380%" height="15" fill="rgb(242,17,10)" fg:x="41508" fg:w="184"/><text x="98.9227%" y="367.50"></text></g><g><title>crossbeam_epoch::internal::Global::collect (134 samples, 0.32%)</title><rect x="98.9217%" y="341" width="0.3190%" height="15" fill="rgb(242,107,0)" fg:x="41558" fg:w="134"/><text x="99.0417%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (213 samples, 0.51%)</title><rect x="98.7408%" y="389" width="0.5070%" height="15" fill="rgb(251,28,31)" fg:x="41482" fg:w="213"/><text x="98.8608%" y="399.50"></text></g><g><title>crossbeam_deque::deque::Injector&lt;T&gt;::steal (5 samples, 0.01%)</title><rect x="99.2478%" y="389" width="0.0119%" height="15" fill="rgb(233,223,10)" fg:x="41695" fg:w="5"/><text x="99.3678%" y="399.50"></text></g><g><title>crossbeam_deque::deque::Stealer&lt;T&gt;::steal (20 samples, 0.05%)</title><rect x="99.2597%" y="389" width="0.0476%" height="15" fill="rgb(215,21,27)" fg:x="41700" fg:w="20"/><text x="99.3797%" y="399.50"></text></g><g><title>crossbeam_epoch::default::with_handle (11 samples, 0.03%)</title><rect x="99.2811%" y="373" width="0.0262%" height="15" fill="rgb(232,23,21)" fg:x="41709" fg:w="11"/><text x="99.4011%" y="383.50"></text></g><g><title>rayon_core::registry::WorkerThread::find_work (240 samples, 0.57%)</title><rect x="98.7384%" y="405" width="0.5713%" height="15" fill="rgb(244,5,23)" fg:x="41481" fg:w="240"/><text x="98.8584%" y="415.50"></text></g><g><title>std::sys::pal::unix::futex::futex_wait (38 samples, 0.09%)</title><rect x="99.3168%" y="357" width="0.0905%" height="15" fill="rgb(226,81,46)" fg:x="41724" fg:w="38"/><text x="99.4368%" y="367.50"></text></g><g><title>syscall (31 samples, 0.07%)</title><rect x="99.3335%" y="341" width="0.0738%" height="15" fill="rgb(247,70,30)" fg:x="41731" fg:w="31"/><text x="99.4535%" y="351.50"></text></g><g><title>rayon_core::sleep::Sleep::sleep (43 samples, 0.10%)</title><rect x="99.3097%" y="405" width="0.1024%" height="15" fill="rgb(212,68,19)" fg:x="41721" fg:w="43"/><text x="99.4297%" y="415.50"></text></g><g><title>std::sys::sync::condvar::futex::Condvar::wait (40 samples, 0.10%)</title><rect x="99.3168%" y="389" width="0.0952%" height="15" fill="rgb(240,187,13)" fg:x="41724" fg:w="40"/><text x="99.4368%" y="399.50"></text></g><g><title>std::sys::sync::condvar::futex::Condvar::wait_optional_timeout (40 samples, 0.10%)</title><rect x="99.3168%" y="373" width="0.0952%" height="15" fill="rgb(223,113,26)" fg:x="41724" fg:w="40"/><text x="99.4368%" y="383.50"></text></g><g><title>rayon_core::sleep::Sleep::wake_any_threads (147 samples, 0.35%)</title><rect x="99.4121%" y="405" width="0.3499%" height="15" fill="rgb(206,192,2)" fg:x="41764" fg:w="147"/><text x="99.5321%" y="415.50"></text></g><g><title>rayon_core::sleep::Sleep::wake_specific_thread (145 samples, 0.35%)</title><rect x="99.4168%" y="389" width="0.3451%" height="15" fill="rgb(241,108,4)" fg:x="41766" fg:w="145"/><text x="99.5368%" y="399.50"></text></g><g><title>syscall (144 samples, 0.34%)</title><rect x="99.4192%" y="373" width="0.3428%" height="15" fill="rgb(247,173,49)" fg:x="41767" fg:w="144"/><text x="99.5392%" y="383.50"></text></g><g><title>sched_yield (52 samples, 0.12%)</title><rect x="99.7620%" y="405" width="0.1238%" height="15" fill="rgb(224,114,35)" fg:x="41911" fg:w="52"/><text x="99.8820%" y="415.50"></text></g><g><title>rayon_core::registry::ThreadBuilder::run (41,830 samples, 99.57%)</title><rect x="0.3190%" y="437" width="99.5692%" height="15" fill="rgb(245,159,27)" fg:x="134" fg:w="41830"/><text x="0.4390%" y="447.50">rayon_core::registry::ThreadBuilder::run</text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold (41,830 samples, 99.57%)</title><rect x="0.3190%" y="421" width="99.5692%" height="15" fill="rgb(245,172,44)" fg:x="134" fg:w="41830"/><text x="0.4390%" y="431.50">rayon_core::registry::WorkerThread::wait_until_cold</text></g><g><title>all (42,011 samples, 100%)</title><rect x="0.0000%" y="549" width="100.0000%" height="15" fill="rgb(236,23,11)" fg:x="0" fg:w="42011"/><text x="0.1200%" y="559.50"></text></g><g><title>radian (42,011 samples, 100.00%)</title><rect x="0.0000%" y="533" width="100.0000%" height="15" fill="rgb(205,117,38)" fg:x="0" fg:w="42011"/><text x="0.1200%" y="543.50">radian</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (41,917 samples, 99.78%)</title><rect x="0.2238%" y="517" width="99.7762%" height="15" fill="rgb(237,72,25)" fg:x="94" fg:w="41917"/><text x="0.3438%" y="527.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (41,917 samples, 99.78%)</title><rect x="0.2238%" y="501" width="99.7762%" height="15" fill="rgb(244,70,9)" fg:x="94" fg:w="41917"/><text x="0.3438%" y="511.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (41,917 samples, 99.78%)</title><rect x="0.2238%" y="485" width="99.7762%" height="15" fill="rgb(217,125,39)" fg:x="94" fg:w="41917"/><text x="0.3438%" y="495.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (41,917 samples, 99.78%)</title><rect x="0.2238%" y="469" width="99.7762%" height="15" fill="rgb(235,36,10)" fg:x="94" fg:w="41917"/><text x="0.3438%" y="479.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (41,917 samples, 99.78%)</title><rect x="0.2238%" y="453" width="99.7762%" height="15" fill="rgb(251,123,47)" fg:x="94" fg:w="41917"/><text x="0.3438%" y="463.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>mire::kractor::reads::parser::fasta::FastaRecord&lt;T&gt;::write (47 samples, 0.11%)</title><rect x="99.8881%" y="437" width="0.1119%" height="15" fill="rgb(221,13,13)" fg:x="41964" fg:w="47"/><text x="100.0081%" y="447.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_all_cold (34 samples, 0.08%)</title><rect x="99.9191%" y="421" width="0.0809%" height="15" fill="rgb(238,131,9)" fg:x="41977" fg:w="34"/><text x="100.0391%" y="431.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (34 samples, 0.08%)</title><rect x="99.9191%" y="405" width="0.0809%" height="15" fill="rgb(211,50,8)" fg:x="41977" fg:w="34"/><text x="100.0391%" y="415.50"></text></g><g><title>&lt;std::fs::File as std::io::Write&gt;::write (34 samples, 0.08%)</title><rect x="99.9191%" y="389" width="0.0809%" height="15" fill="rgb(245,182,24)" fg:x="41977" fg:w="34"/><text x="100.0391%" y="399.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Write&gt;::write (34 samples, 0.08%)</title><rect x="99.9191%" y="373" width="0.0809%" height="15" fill="rgb(242,14,37)" fg:x="41977" fg:w="34"/><text x="100.0391%" y="383.50"></text></g><g><title>std::sys::fs::unix::File::write (34 samples, 0.08%)</title><rect x="99.9191%" y="357" width="0.0809%" height="15" fill="rgb(246,228,12)" fg:x="41977" fg:w="34"/><text x="100.0391%" y="367.50"></text></g><g><title>std::sys::pal::unix::fd::FileDesc::write (34 samples, 0.08%)</title><rect x="99.9191%" y="341" width="0.0809%" height="15" fill="rgb(213,55,15)" fg:x="41977" fg:w="34"/><text x="100.0391%" y="351.50"></text></g><g><title>write (34 samples, 0.08%)</title><rect x="99.9191%" y="325" width="0.0809%" height="15" fill="rgb(209,9,3)" fg:x="41977" fg:w="34"/><text x="100.0391%" y="335.50"></text></g></svg></svg>
