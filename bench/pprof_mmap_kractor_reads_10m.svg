<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="2500" height="598" onload="init(evt)" viewBox="0 0 2500 598" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="598" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="581.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="2490" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="2490" y="581.00"> </text><svg id="frames" x="10" width="2480" total_samples="29939"><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (8 samples, 0.03%)</title><rect x="0.0067%" y="165" width="0.0267%" height="15" fill="rgb(227,0,7)" fg:x="2" fg:w="8"/><text x="0.1267%" y="175.50"></text></g><g><title>rayon_core::registry::Registry::in_worker (6 samples, 0.02%)</title><rect x="0.0334%" y="165" width="0.0200%" height="15" fill="rgb(217,0,24)" fg:x="10" fg:w="6"/><text x="0.1534%" y="175.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (6 samples, 0.02%)</title><rect x="0.0334%" y="149" width="0.0200%" height="15" fill="rgb(221,193,54)" fg:x="10" fg:w="6"/><text x="0.1534%" y="159.50"></text></g><g><title>rayon_core::latch::LockLatch::wait_and_reset (6 samples, 0.02%)</title><rect x="0.0334%" y="133" width="0.0200%" height="15" fill="rgb(248,212,6)" fg:x="10" fg:w="6"/><text x="0.1534%" y="143.50"></text></g><g><title>std::sys::sync::condvar::futex::Condvar::wait (6 samples, 0.02%)</title><rect x="0.0334%" y="117" width="0.0200%" height="15" fill="rgb(208,68,35)" fg:x="10" fg:w="6"/><text x="0.1534%" y="127.50"></text></g><g><title>std::sys::sync::condvar::futex::Condvar::wait_optional_timeout (6 samples, 0.02%)</title><rect x="0.0334%" y="101" width="0.0200%" height="15" fill="rgb(232,128,0)" fg:x="10" fg:w="6"/><text x="0.1534%" y="111.50"></text></g><g><title>std::sys::pal::unix::futex::futex_wait (6 samples, 0.02%)</title><rect x="0.0334%" y="85" width="0.0200%" height="15" fill="rgb(207,160,47)" fg:x="10" fg:w="6"/><text x="0.1534%" y="95.50"></text></g><g><title>syscall (6 samples, 0.02%)</title><rect x="0.0334%" y="69" width="0.0200%" height="15" fill="rgb(228,23,34)" fg:x="10" fg:w="6"/><text x="0.1534%" y="79.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read_buf (12 samples, 0.04%)</title><rect x="0.0735%" y="101" width="0.0401%" height="15" fill="rgb(218,30,26)" fg:x="22" fg:w="12"/><text x="0.1935%" y="111.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Read&gt;::read_buf (12 samples, 0.04%)</title><rect x="0.0735%" y="85" width="0.0401%" height="15" fill="rgb(220,122,19)" fg:x="22" fg:w="12"/><text x="0.1935%" y="95.50"></text></g><g><title>std::sys::fs::unix::File::read_buf (12 samples, 0.04%)</title><rect x="0.0735%" y="69" width="0.0401%" height="15" fill="rgb(250,228,42)" fg:x="22" fg:w="12"/><text x="0.1935%" y="79.50"></text></g><g><title>std::sys::pal::unix::fd::FileDesc::read_buf (12 samples, 0.04%)</title><rect x="0.0735%" y="53" width="0.0401%" height="15" fill="rgb(240,193,28)" fg:x="22" fg:w="12"/><text x="0.1935%" y="63.50"></text></g><g><title>read (12 samples, 0.04%)</title><rect x="0.0735%" y="37" width="0.0401%" height="15" fill="rgb(216,20,37)" fg:x="22" fg:w="12"/><text x="0.1935%" y="47.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (8 samples, 0.03%)</title><rect x="0.1136%" y="101" width="0.0267%" height="15" fill="rgb(206,188,39)" fg:x="34" fg:w="8"/><text x="0.2336%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (6 samples, 0.02%)</title><rect x="0.1202%" y="85" width="0.0200%" height="15" fill="rgb(217,207,13)" fg:x="36" fg:w="6"/><text x="0.2402%" y="95.50"></text></g><g><title>malloc (3 samples, 0.01%)</title><rect x="0.1303%" y="69" width="0.0100%" height="15" fill="rgb(231,73,38)" fg:x="39" fg:w="3"/><text x="0.2503%" y="79.50"></text></g><g><title>core::slice::memchr::memchr_aligned (7 samples, 0.02%)</title><rect x="0.1403%" y="101" width="0.0234%" height="15" fill="rgb(225,20,46)" fg:x="42" fg:w="7"/><text x="0.2603%" y="111.50"></text></g><g><title>core::slice::memchr::memchr_aligned::runtime (7 samples, 0.02%)</title><rect x="0.1403%" y="85" width="0.0234%" height="15" fill="rgb(210,31,41)" fg:x="42" fg:w="7"/><text x="0.2603%" y="95.50"></text></g><g><title>&lt;std::io::Lines&lt;B&gt; as core::iter::traits::iterator::Iterator&gt;::next (37 samples, 0.12%)</title><rect x="0.0601%" y="133" width="0.1236%" height="15" fill="rgb(221,200,47)" fg:x="18" fg:w="37"/><text x="0.1801%" y="143.50"></text></g><g><title>std::io::append_to_string (36 samples, 0.12%)</title><rect x="0.0635%" y="117" width="0.1202%" height="15" fill="rgb(226,26,5)" fg:x="19" fg:w="36"/><text x="0.1835%" y="127.50"></text></g><g><title>core::str::converts::from_utf8 (6 samples, 0.02%)</title><rect x="0.1637%" y="101" width="0.0200%" height="15" fill="rgb(249,33,26)" fg:x="49" fg:w="6"/><text x="0.2837%" y="111.50"></text></g><g><title>core::str::validations::run_utf8_validation (6 samples, 0.02%)</title><rect x="0.1637%" y="85" width="0.0200%" height="15" fill="rgb(235,183,28)" fg:x="49" fg:w="6"/><text x="0.2837%" y="95.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (9 samples, 0.03%)</title><rect x="0.2138%" y="117" width="0.0301%" height="15" fill="rgb(221,5,38)" fg:x="64" fg:w="9"/><text x="0.3338%" y="127.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::next (8 samples, 0.03%)</title><rect x="0.2171%" y="101" width="0.0267%" height="15" fill="rgb(247,18,42)" fg:x="65" fg:w="8"/><text x="0.3371%" y="111.50"></text></g><g><title>_start (85 samples, 0.28%)</title><rect x="0.0000%" y="517" width="0.2839%" height="15" fill="rgb(241,131,45)" fg:x="0" fg:w="85"/><text x="0.1200%" y="527.50"></text></g><g><title>__libc_start_main (85 samples, 0.28%)</title><rect x="0.0000%" y="501" width="0.2839%" height="15" fill="rgb(249,31,29)" fg:x="0" fg:w="85"/><text x="0.1200%" y="511.50"></text></g><g><title>Py_BytesMain (85 samples, 0.28%)</title><rect x="0.0000%" y="485" width="0.2839%" height="15" fill="rgb(225,111,53)" fg:x="0" fg:w="85"/><text x="0.1200%" y="495.50"></text></g><g><title>Py_RunMain (85 samples, 0.28%)</title><rect x="0.0000%" y="469" width="0.2839%" height="15" fill="rgb(238,160,17)" fg:x="0" fg:w="85"/><text x="0.1200%" y="479.50"></text></g><g><title>_PyRun_AnyFileObject (85 samples, 0.28%)</title><rect x="0.0000%" y="453" width="0.2839%" height="15" fill="rgb(214,148,48)" fg:x="0" fg:w="85"/><text x="0.1200%" y="463.50"></text></g><g><title>_PyRun_SimpleFileObject (85 samples, 0.28%)</title><rect x="0.0000%" y="437" width="0.2839%" height="15" fill="rgb(232,36,49)" fg:x="0" fg:w="85"/><text x="0.1200%" y="447.50"></text></g><g><title>PyEval_EvalCode (85 samples, 0.28%)</title><rect x="0.0000%" y="421" width="0.2839%" height="15" fill="rgb(209,103,24)" fg:x="0" fg:w="85"/><text x="0.1200%" y="431.50"></text></g><g><title>_PyEval_EvalFrameDefault (85 samples, 0.28%)</title><rect x="0.0000%" y="405" width="0.2839%" height="15" fill="rgb(229,88,8)" fg:x="0" fg:w="85"/><text x="0.1200%" y="415.50"></text></g><g><title>PyObject_Vectorcall (85 samples, 0.28%)</title><rect x="0.0000%" y="389" width="0.2839%" height="15" fill="rgb(213,181,19)" fg:x="0" fg:w="85"/><text x="0.1200%" y="399.50"></text></g><g><title>_cffi_f_run_Rmainloop (85 samples, 0.28%)</title><rect x="0.0000%" y="373" width="0.2839%" height="15" fill="rgb(254,191,54)" fg:x="0" fg:w="85"/><text x="0.1200%" y="383.50"></text></g><g><title>run_Rmainloop (85 samples, 0.28%)</title><rect x="0.0000%" y="357" width="0.2839%" height="15" fill="rgb(241,83,37)" fg:x="0" fg:w="85"/><text x="0.1200%" y="367.50"></text></g><g><title>run_Rmainloop (85 samples, 0.28%)</title><rect x="0.0000%" y="341" width="0.2839%" height="15" fill="rgb(233,36,39)" fg:x="0" fg:w="85"/><text x="0.1200%" y="351.50"></text></g><g><title>Rf_ReplIteration (85 samples, 0.28%)</title><rect x="0.0000%" y="325" width="0.2839%" height="15" fill="rgb(226,3,54)" fg:x="0" fg:w="85"/><text x="0.1200%" y="335.50"></text></g><g><title>Rf_eval (85 samples, 0.28%)</title><rect x="0.0000%" y="309" width="0.2839%" height="15" fill="rgb(245,192,40)" fg:x="0" fg:w="85"/><text x="0.1200%" y="319.50"></text></g><g><title>Rf_eval (85 samples, 0.28%)</title><rect x="0.0000%" y="293" width="0.2839%" height="15" fill="rgb(238,167,29)" fg:x="0" fg:w="85"/><text x="0.1200%" y="303.50"></text></g><g><title>Rf_eval (85 samples, 0.28%)</title><rect x="0.0000%" y="277" width="0.2839%" height="15" fill="rgb(232,182,51)" fg:x="0" fg:w="85"/><text x="0.1200%" y="287.50"></text></g><g><title>mark_ (85 samples, 0.28%)</title><rect x="0.0000%" y="261" width="0.2839%" height="15" fill="rgb(231,60,39)" fg:x="0" fg:w="85"/><text x="0.1200%" y="271.50"></text></g><g><title>expr_elapsed_time (85 samples, 0.28%)</title><rect x="0.0000%" y="245" width="0.2839%" height="15" fill="rgb(208,69,12)" fg:x="0" fg:w="85"/><text x="0.1200%" y="255.50"></text></g><g><title>Rf_eval (85 samples, 0.28%)</title><rect x="0.0000%" y="229" width="0.2839%" height="15" fill="rgb(235,93,37)" fg:x="0" fg:w="85"/><text x="0.1200%" y="239.50"></text></g><g><title>Rf_eval (85 samples, 0.28%)</title><rect x="0.0000%" y="213" width="0.2839%" height="15" fill="rgb(213,116,39)" fg:x="0" fg:w="85"/><text x="0.1200%" y="223.50"></text></g><g><title>wrap__pprof_kractor_reads (85 samples, 0.28%)</title><rect x="0.0000%" y="197" width="0.2839%" height="15" fill="rgb(222,207,29)" fg:x="0" fg:w="85"/><text x="0.1200%" y="207.50"></text></g><g><title>mire::kractor::kractor_reads (85 samples, 0.28%)</title><rect x="0.0000%" y="181" width="0.2839%" height="15" fill="rgb(206,96,30)" fg:x="0" fg:w="85"/><text x="0.1200%" y="191.50"></text></g><g><title>mire::kractor::reads::read_sequence_id_from_koutput (69 samples, 0.23%)</title><rect x="0.0534%" y="165" width="0.2305%" height="15" fill="rgb(218,138,4)" fg:x="16" fg:w="69"/><text x="0.1734%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (69 samples, 0.23%)</title><rect x="0.0534%" y="149" width="0.2305%" height="15" fill="rgb(250,191,14)" fg:x="16" fg:w="69"/><text x="0.1734%" y="159.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (30 samples, 0.10%)</title><rect x="0.1837%" y="133" width="0.1002%" height="15" fill="rgb(239,60,40)" fg:x="55" fg:w="30"/><text x="0.3037%" y="143.50"></text></g><g><title>malloc (11 samples, 0.04%)</title><rect x="0.2472%" y="117" width="0.0367%" height="15" fill="rgb(206,27,48)" fg:x="74" fg:w="11"/><text x="0.3672%" y="127.50"></text></g><g><title>crossbeam_channel::flavors::array::Channel&lt;T&gt;::recv::{{closure}} (12 samples, 0.04%)</title><rect x="0.3741%" y="405" width="0.0401%" height="15" fill="rgb(225,35,8)" fg:x="112" fg:w="12"/><text x="0.4941%" y="415.50"></text></g><g><title>std::thread::park (10 samples, 0.03%)</title><rect x="0.3808%" y="389" width="0.0334%" height="15" fill="rgb(250,213,24)" fg:x="114" fg:w="10"/><text x="0.5008%" y="399.50"></text></g><g><title>std::thread::Thread::park (10 samples, 0.03%)</title><rect x="0.3808%" y="373" width="0.0334%" height="15" fill="rgb(247,123,22)" fg:x="114" fg:w="10"/><text x="0.5008%" y="383.50"></text></g><g><title>std::sys::sync::thread_parking::futex::Parker::park (10 samples, 0.03%)</title><rect x="0.3808%" y="357" width="0.0334%" height="15" fill="rgb(231,138,38)" fg:x="114" fg:w="10"/><text x="0.5008%" y="367.50"></text></g><g><title>std::sys::pal::unix::futex::futex_wait (10 samples, 0.03%)</title><rect x="0.3808%" y="341" width="0.0334%" height="15" fill="rgb(231,145,46)" fg:x="114" fg:w="10"/><text x="0.5008%" y="351.50"></text></g><g><title>syscall (9 samples, 0.03%)</title><rect x="0.3841%" y="325" width="0.0301%" height="15" fill="rgb(251,118,11)" fg:x="115" fg:w="9"/><text x="0.5041%" y="335.50"></text></g><g><title>&lt;crossbeam_channel::channel::IntoIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (40 samples, 0.13%)</title><rect x="0.2906%" y="437" width="0.1336%" height="15" fill="rgb(217,147,25)" fg:x="87" fg:w="40"/><text x="0.4106%" y="447.50"></text></g><g><title>crossbeam_channel::flavors::array::Channel&lt;T&gt;::recv (39 samples, 0.13%)</title><rect x="0.2939%" y="421" width="0.1303%" height="15" fill="rgb(247,81,37)" fg:x="88" fg:w="39"/><text x="0.4139%" y="431.50"></text></g><g><title>sched_yield (3 samples, 0.01%)</title><rect x="0.4142%" y="405" width="0.0100%" height="15" fill="rgb(209,12,38)" fg:x="124" fg:w="3"/><text x="0.5342%" y="415.50"></text></g><g><title>crossbeam_channel::channel::Sender&lt;T&gt;::send (53 samples, 0.18%)</title><rect x="3.7075%" y="373" width="0.1770%" height="15" fill="rgb(227,1,9)" fg:x="1110" fg:w="53"/><text x="3.8275%" y="383.50"></text></g><g><title>crossbeam_channel::flavors::array::Channel&lt;T&gt;::send (52 samples, 0.17%)</title><rect x="3.7109%" y="357" width="0.1737%" height="15" fill="rgb(248,47,43)" fg:x="1111" fg:w="52"/><text x="3.8309%" y="367.50"></text></g><g><title>crossbeam_channel::waker::SyncWaker::notify (49 samples, 0.16%)</title><rect x="3.7209%" y="341" width="0.1637%" height="15" fill="rgb(221,10,30)" fg:x="1114" fg:w="49"/><text x="3.8409%" y="351.50"></text></g><g><title>std::sys::pal::unix::futex::futex_wake (42 samples, 0.14%)</title><rect x="3.7443%" y="325" width="0.1403%" height="15" fill="rgb(210,229,1)" fg:x="1121" fg:w="42"/><text x="3.8643%" y="335.50"></text></g><g><title>syscall (42 samples, 0.14%)</title><rect x="3.7443%" y="309" width="0.1403%" height="15" fill="rgb(222,148,37)" fg:x="1121" fg:w="42"/><text x="3.8643%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (10,672 samples, 35.65%)</title><rect x="3.8846%" y="373" width="35.6458%" height="15" fill="rgb(234,67,33)" fg:x="1163" fg:w="10672"/><text x="4.0046%" y="383.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner</text></g><g><title>mire::batchsender::BatchSender&lt;T&gt;::send (8 samples, 0.03%)</title><rect x="39.5304%" y="373" width="0.0267%" height="15" fill="rgb(247,98,35)" fg:x="11835" fg:w="8"/><text x="39.6504%" y="383.50"></text></g><g><title>mire::kractor::reads::parser::fastq::container::FastqContainer::parse_qual (103 samples, 0.34%)</title><rect x="43.3916%" y="341" width="0.3440%" height="15" fill="rgb(247,138,52)" fg:x="12991" fg:w="103"/><text x="43.5116%" y="351.50"></text></g><g><title>mire::kractor::reads::mmap::reader::MmapFastqReader::read_tail (702 samples, 2.34%)</title><rect x="41.8985%" y="357" width="2.3448%" height="15" fill="rgb(213,79,30)" fg:x="12544" fg:w="702"/><text x="42.0185%" y="367.50">mire..</text></g><g><title>mire::kractor::reads::parser::fastq::container::FastqContainer::parse_sep (152 samples, 0.51%)</title><rect x="43.7356%" y="341" width="0.5077%" height="15" fill="rgb(246,177,23)" fg:x="13094" fg:w="152"/><text x="43.8556%" y="351.50"></text></g><g><title>&lt;rayon_core::job::HeapJob&lt;BODY&gt; as rayon_core::job::Job&gt;::execute (13,863 samples, 46.30%)</title><rect x="0.4676%" y="405" width="46.3042%" height="15" fill="rgb(230,62,27)" fg:x="140" fg:w="13863"/><text x="0.5876%" y="415.50">&lt;rayon_core::job::HeapJob&lt;BODY&gt; as rayon_core::job::Job&gt;::execute</text></g><g><title>rayon_core::scope::ScopeBase::execute_job_closure (13,862 samples, 46.30%)</title><rect x="0.4710%" y="389" width="46.3008%" height="15" fill="rgb(216,154,8)" fg:x="141" fg:w="13862"/><text x="0.5910%" y="399.50">rayon_core::scope::ScopeBase::execute_job_closure</text></g><g><title>mire::kractor::reads::mmap::reader::MmapFastqReader::read_record (2,160 samples, 7.21%)</title><rect x="39.5571%" y="373" width="7.2147%" height="15" fill="rgb(244,35,45)" fg:x="11843" fg:w="2160"/><text x="39.6771%" y="383.50">mire::kractor::reads:..</text></g><g><title>mire::kractor::reads::parser::fastq::container::FastqContainer::parse_head (757 samples, 2.53%)</title><rect x="44.2433%" y="357" width="2.5285%" height="15" fill="rgb(251,115,12)" fg:x="13246" fg:w="757"/><text x="44.3633%" y="367.50">mire..</text></g><g><title>memchr::arch::x86_64::memchr::memchr2_raw::find_avx2 (510 samples, 1.70%)</title><rect x="45.0683%" y="341" width="1.7035%" height="15" fill="rgb(240,54,50)" fg:x="13493" fg:w="510"/><text x="45.1883%" y="351.50">memc..</text></g><g><title>memchr::arch::x86_64::avx2::memchr::Two::find_raw (348 samples, 1.16%)</title><rect x="45.6094%" y="325" width="1.1624%" height="15" fill="rgb(233,84,52)" fg:x="13655" fg:w="348"/><text x="45.7294%" y="335.50">me..</text></g><g><title>memchr::arch::x86_64::avx2::memchr::Two::find_raw_avx2 (312 samples, 1.04%)</title><rect x="45.7297%" y="309" width="1.0421%" height="15" fill="rgb(207,117,47)" fg:x="13691" fg:w="312"/><text x="45.8497%" y="319.50">m..</text></g><g><title>malloc (3 samples, 0.01%)</title><rect x="46.7985%" y="357" width="0.0100%" height="15" fill="rgb(249,43,39)" fg:x="14011" fg:w="3"/><text x="46.9185%" y="367.50"></text></g><g><title>rayon_core::registry::Registry::inject_or_push (4 samples, 0.01%)</title><rect x="46.8085%" y="357" width="0.0134%" height="15" fill="rgb(209,38,44)" fg:x="14014" fg:w="4"/><text x="46.9285%" y="367.50"></text></g><g><title>__tls_get_addr (3 samples, 0.01%)</title><rect x="46.8119%" y="341" width="0.0100%" height="15" fill="rgb(236,212,23)" fg:x="14015" fg:w="3"/><text x="46.9319%" y="351.50"></text></g><g><title>rayon_core::sleep::Sleep::wake_any_threads (76 samples, 0.25%)</title><rect x="46.8286%" y="357" width="0.2538%" height="15" fill="rgb(242,79,21)" fg:x="14020" fg:w="76"/><text x="46.9486%" y="367.50"></text></g><g><title>rayon_core::sleep::Sleep::wake_specific_thread (74 samples, 0.25%)</title><rect x="46.8352%" y="341" width="0.2472%" height="15" fill="rgb(211,96,35)" fg:x="14022" fg:w="74"/><text x="46.9552%" y="351.50"></text></g><g><title>syscall (70 samples, 0.23%)</title><rect x="46.8486%" y="325" width="0.2338%" height="15" fill="rgb(253,215,40)" fg:x="14026" fg:w="70"/><text x="46.9686%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (46 samples, 0.15%)</title><rect x="49.5174%" y="309" width="0.1536%" height="15" fill="rgb(211,81,21)" fg:x="14825" fg:w="46"/><text x="49.6374%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (43 samples, 0.14%)</title><rect x="49.5274%" y="293" width="0.1436%" height="15" fill="rgb(208,190,38)" fg:x="14828" fg:w="43"/><text x="49.6474%" y="303.50"></text></g><g><title>__libc_realloc (34 samples, 0.11%)</title><rect x="49.5574%" y="277" width="0.1136%" height="15" fill="rgb(235,213,38)" fg:x="14837" fg:w="34"/><text x="49.6774%" y="287.50"></text></g><g><title>malloc (3 samples, 0.01%)</title><rect x="49.6710%" y="309" width="0.0100%" height="15" fill="rgb(237,122,38)" fg:x="14871" fg:w="3"/><text x="49.7910%" y="319.50"></text></g><g><title>rayon_core::scope::scope::{{closure}} (15,339 samples, 51.23%)</title><rect x="46.7718%" y="389" width="51.2342%" height="15" fill="rgb(244,218,35)" fg:x="14003" fg:w="15339"/><text x="46.8918%" y="399.50">rayon_core::scope::scope::{{closure}}</text></g><g><title>rayon_core::scope::ScopeBase::complete (15,339 samples, 51.23%)</title><rect x="46.7718%" y="373" width="51.2342%" height="15" fill="rgb(240,68,47)" fg:x="14003" fg:w="15339"/><text x="46.8918%" y="383.50">rayon_core::scope::ScopeBase::complete</text></g><g><title>mire::kractor::reads::mmap::reader::SliceChunkReader::chunk_reader (15,246 samples, 50.92%)</title><rect x="47.0824%" y="357" width="50.9235%" height="15" fill="rgb(210,16,53)" fg:x="14096" fg:w="15246"/><text x="47.2024%" y="367.50">mire::kractor::reads::mmap::reader::SliceChunkReader::chunk_reader</text></g><g><title>mire::kractor::reads::mmap::reader::slice_chunk (15,245 samples, 50.92%)</title><rect x="47.0857%" y="341" width="50.9202%" height="15" fill="rgb(235,124,12)" fg:x="14097" fg:w="15245"/><text x="47.2057%" y="351.50">mire::kractor::reads::mmap::reader::slice_chunk</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (15,245 samples, 50.92%)</title><rect x="47.0857%" y="325" width="50.9202%" height="15" fill="rgb(224,169,11)" fg:x="14097" fg:w="15245"/><text x="47.2057%" y="335.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_avx2 (14,468 samples, 48.32%)</title><rect x="49.6810%" y="309" width="48.3249%" height="15" fill="rgb(250,166,2)" fg:x="14874" fg:w="14468"/><text x="49.8010%" y="319.50">memchr::arch::x86_64::memchr::memchr_raw::find_avx2</text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::find_raw (13,827 samples, 46.18%)</title><rect x="51.8220%" y="293" width="46.1839%" height="15" fill="rgb(242,216,29)" fg:x="15515" fg:w="13827"/><text x="51.9420%" y="303.50">memchr::arch::x86_64::avx2::memchr::One::find_raw</text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::find_raw_avx2 (13,293 samples, 44.40%)</title><rect x="53.6057%" y="277" width="44.4003%" height="15" fill="rgb(230,116,27)" fg:x="16049" fg:w="13293"/><text x="53.7257%" y="287.50">memchr::arch::x86_64::avx2::memchr::One::find_raw_avx2</text></g><g><title>&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (15,340 samples, 51.24%)</title><rect x="46.7718%" y="405" width="51.2375%" height="15" fill="rgb(228,99,48)" fg:x="14003" fg:w="15340"/><text x="46.8918%" y="415.50">&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute</text></g><g><title>cfree (5 samples, 0.02%)</title><rect x="98.0093%" y="405" width="0.0167%" height="15" fill="rgb(253,11,6)" fg:x="29343" fg:w="5"/><text x="98.1293%" y="415.50"></text></g><g><title>crossbeam_epoch::internal::Global::try_advance (143 samples, 0.48%)</title><rect x="98.3667%" y="325" width="0.4776%" height="15" fill="rgb(247,143,39)" fg:x="29450" fg:w="143"/><text x="98.4867%" y="335.50"></text></g><g><title>crossbeam_deque::deque::Stealer&lt;T&gt;::steal (240 samples, 0.80%)</title><rect x="98.0661%" y="373" width="0.8016%" height="15" fill="rgb(236,97,10)" fg:x="29360" fg:w="240"/><text x="98.1861%" y="383.50"></text></g><g><title>crossbeam_epoch::default::with_handle (218 samples, 0.73%)</title><rect x="98.1396%" y="357" width="0.7281%" height="15" fill="rgb(233,208,19)" fg:x="29382" fg:w="218"/><text x="98.2596%" y="367.50"></text></g><g><title>crossbeam_epoch::internal::Global::collect (150 samples, 0.50%)</title><rect x="98.3667%" y="341" width="0.5010%" height="15" fill="rgb(216,164,2)" fg:x="29450" fg:w="150"/><text x="98.4867%" y="351.50"></text></g><g><title>crossbeam_epoch::sync::queue::Queue&lt;T&gt;::try_pop_if (7 samples, 0.02%)</title><rect x="98.8443%" y="325" width="0.0234%" height="15" fill="rgb(220,129,5)" fg:x="29593" fg:w="7"/><text x="98.9643%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (253 samples, 0.85%)</title><rect x="98.0393%" y="389" width="0.8451%" height="15" fill="rgb(242,17,10)" fg:x="29352" fg:w="253"/><text x="98.1593%" y="399.50"></text></g><g><title>crossbeam_deque::deque::Worker&lt;T&gt;::new_lifo (5 samples, 0.02%)</title><rect x="98.8677%" y="373" width="0.0167%" height="15" fill="rgb(242,107,0)" fg:x="29600" fg:w="5"/><text x="98.9877%" y="383.50"></text></g><g><title>crossbeam_deque::deque::Injector&lt;T&gt;::steal (6 samples, 0.02%)</title><rect x="98.8844%" y="389" width="0.0200%" height="15" fill="rgb(251,28,31)" fg:x="29605" fg:w="6"/><text x="99.0044%" y="399.50"></text></g><g><title>crossbeam_deque::deque::Stealer&lt;T&gt;::steal (18 samples, 0.06%)</title><rect x="98.9044%" y="389" width="0.0601%" height="15" fill="rgb(233,223,10)" fg:x="29611" fg:w="18"/><text x="99.0244%" y="399.50"></text></g><g><title>crossbeam_epoch::default::with_handle (11 samples, 0.04%)</title><rect x="98.9278%" y="373" width="0.0367%" height="15" fill="rgb(215,21,27)" fg:x="29618" fg:w="11"/><text x="99.0478%" y="383.50"></text></g><g><title>crossbeam_epoch::internal::Global::collect (5 samples, 0.02%)</title><rect x="98.9479%" y="357" width="0.0167%" height="15" fill="rgb(232,23,21)" fg:x="29624" fg:w="5"/><text x="99.0679%" y="367.50"></text></g><g><title>crossbeam_epoch::internal::Global::try_advance (5 samples, 0.02%)</title><rect x="98.9479%" y="341" width="0.0167%" height="15" fill="rgb(244,5,23)" fg:x="29624" fg:w="5"/><text x="99.0679%" y="351.50"></text></g><g><title>rayon_core::registry::WorkerThread::find_work (282 samples, 0.94%)</title><rect x="98.0293%" y="405" width="0.9419%" height="15" fill="rgb(226,81,46)" fg:x="29349" fg:w="282"/><text x="98.1493%" y="415.50">r..</text></g><g><title>std::sys::pal::unix::futex::futex_wait (30 samples, 0.10%)</title><rect x="98.9879%" y="357" width="0.1002%" height="15" fill="rgb(247,70,30)" fg:x="29636" fg:w="30"/><text x="99.1079%" y="367.50"></text></g><g><title>syscall (22 samples, 0.07%)</title><rect x="99.0147%" y="341" width="0.0735%" height="15" fill="rgb(212,68,19)" fg:x="29644" fg:w="22"/><text x="99.1347%" y="351.50"></text></g><g><title>rayon_core::sleep::Sleep::sleep (42 samples, 0.14%)</title><rect x="98.9712%" y="405" width="0.1403%" height="15" fill="rgb(240,187,13)" fg:x="29631" fg:w="42"/><text x="99.0912%" y="415.50"></text></g><g><title>std::sys::sync::condvar::futex::Condvar::wait (37 samples, 0.12%)</title><rect x="98.9879%" y="389" width="0.1236%" height="15" fill="rgb(223,113,26)" fg:x="29636" fg:w="37"/><text x="99.1079%" y="399.50"></text></g><g><title>std::sys::sync::condvar::futex::Condvar::wait_optional_timeout (37 samples, 0.12%)</title><rect x="98.9879%" y="373" width="0.1236%" height="15" fill="rgb(206,192,2)" fg:x="29636" fg:w="37"/><text x="99.1079%" y="383.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock (7 samples, 0.02%)</title><rect x="99.0881%" y="357" width="0.0234%" height="15" fill="rgb(241,108,4)" fg:x="29666" fg:w="7"/><text x="99.2081%" y="367.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (6 samples, 0.02%)</title><rect x="99.0915%" y="341" width="0.0200%" height="15" fill="rgb(247,173,49)" fg:x="29667" fg:w="6"/><text x="99.2115%" y="351.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (6 samples, 0.02%)</title><rect x="99.0915%" y="325" width="0.0200%" height="15" fill="rgb(224,114,35)" fg:x="29667" fg:w="6"/><text x="99.2115%" y="335.50"></text></g><g><title>rayon_core::sleep::Sleep::wake_any_threads (116 samples, 0.39%)</title><rect x="99.1115%" y="405" width="0.3875%" height="15" fill="rgb(245,159,27)" fg:x="29673" fg:w="116"/><text x="99.2315%" y="415.50"></text></g><g><title>rayon_core::sleep::Sleep::wake_specific_thread (116 samples, 0.39%)</title><rect x="99.1115%" y="389" width="0.3875%" height="15" fill="rgb(245,172,44)" fg:x="29673" fg:w="116"/><text x="99.2315%" y="399.50"></text></g><g><title>syscall (112 samples, 0.37%)</title><rect x="99.1249%" y="373" width="0.3741%" height="15" fill="rgb(236,23,11)" fg:x="29677" fg:w="112"/><text x="99.2449%" y="383.50"></text></g><g><title>rayon_core::registry::ThreadBuilder::run (29,735 samples, 99.32%)</title><rect x="0.4275%" y="437" width="99.3186%" height="15" fill="rgb(205,117,38)" fg:x="128" fg:w="29735"/><text x="0.5475%" y="447.50">rayon_core::registry::ThreadBuilder::run</text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold (29,734 samples, 99.32%)</title><rect x="0.4309%" y="421" width="99.3153%" height="15" fill="rgb(237,72,25)" fg:x="129" fg:w="29734"/><text x="0.5509%" y="431.50">rayon_core::registry::WorkerThread::wait_until_cold</text></g><g><title>sched_yield (74 samples, 0.25%)</title><rect x="99.4990%" y="405" width="0.2472%" height="15" fill="rgb(244,70,9)" fg:x="29789" fg:w="74"/><text x="99.6190%" y="415.50"></text></g><g><title>all (29,939 samples, 100%)</title><rect x="0.0000%" y="549" width="100.0000%" height="15" fill="rgb(217,125,39)" fg:x="0" fg:w="29939"/><text x="0.1200%" y="559.50"></text></g><g><title>radian (29,939 samples, 100.00%)</title><rect x="0.0000%" y="533" width="100.0000%" height="15" fill="rgb(235,36,10)" fg:x="0" fg:w="29939"/><text x="0.1200%" y="543.50">radian</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (29,854 samples, 99.72%)</title><rect x="0.2839%" y="517" width="99.7161%" height="15" fill="rgb(251,123,47)" fg:x="85" fg:w="29854"/><text x="0.4039%" y="527.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (29,854 samples, 99.72%)</title><rect x="0.2839%" y="501" width="99.7161%" height="15" fill="rgb(221,13,13)" fg:x="85" fg:w="29854"/><text x="0.4039%" y="511.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (29,854 samples, 99.72%)</title><rect x="0.2839%" y="485" width="99.7161%" height="15" fill="rgb(238,131,9)" fg:x="85" fg:w="29854"/><text x="0.4039%" y="495.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (29,854 samples, 99.72%)</title><rect x="0.2839%" y="469" width="99.7161%" height="15" fill="rgb(211,50,8)" fg:x="85" fg:w="29854"/><text x="0.4039%" y="479.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (29,854 samples, 99.72%)</title><rect x="0.2839%" y="453" width="99.7161%" height="15" fill="rgb(245,182,24)" fg:x="85" fg:w="29854"/><text x="0.4039%" y="463.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>mire::kractor::reads::parser::fasta::FastaRecord&lt;T&gt;::write (75 samples, 0.25%)</title><rect x="99.7495%" y="437" width="0.2505%" height="15" fill="rgb(242,14,37)" fg:x="29864" fg:w="75"/><text x="99.8695%" y="447.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_all_cold (47 samples, 0.16%)</title><rect x="99.8430%" y="421" width="0.1570%" height="15" fill="rgb(246,228,12)" fg:x="29892" fg:w="47"/><text x="99.9630%" y="431.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (47 samples, 0.16%)</title><rect x="99.8430%" y="405" width="0.1570%" height="15" fill="rgb(213,55,15)" fg:x="29892" fg:w="47"/><text x="99.9630%" y="415.50"></text></g><g><title>&lt;std::fs::File as std::io::Write&gt;::write (47 samples, 0.16%)</title><rect x="99.8430%" y="389" width="0.1570%" height="15" fill="rgb(209,9,3)" fg:x="29892" fg:w="47"/><text x="99.9630%" y="399.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Write&gt;::write (47 samples, 0.16%)</title><rect x="99.8430%" y="373" width="0.1570%" height="15" fill="rgb(230,59,30)" fg:x="29892" fg:w="47"/><text x="99.9630%" y="383.50"></text></g><g><title>std::sys::fs::unix::File::write (47 samples, 0.16%)</title><rect x="99.8430%" y="357" width="0.1570%" height="15" fill="rgb(209,121,21)" fg:x="29892" fg:w="47"/><text x="99.9630%" y="367.50"></text></g><g><title>std::sys::pal::unix::fd::FileDesc::write (47 samples, 0.16%)</title><rect x="99.8430%" y="341" width="0.1570%" height="15" fill="rgb(220,109,13)" fg:x="29892" fg:w="47"/><text x="99.9630%" y="351.50"></text></g><g><title>write (47 samples, 0.16%)</title><rect x="99.8430%" y="325" width="0.1570%" height="15" fill="rgb(232,18,1)" fg:x="29892" fg:w="47"/><text x="99.9630%" y="335.50"></text></g></svg></svg>
