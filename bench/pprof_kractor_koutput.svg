<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="2500" height="454" onload="init(evt)" viewBox="0 0 2500 454" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="454" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="437.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="2490" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="2490" y="437.00"> </text><svg id="frames" x="10" width="2480" total_samples="17530"><g><title>_start (2 samples, 0.01%)</title><rect x="0.0057%" y="373" width="0.0114%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="2"/><text x="0.1257%" y="383.50"></text></g><g><title>__libc_start_main (2 samples, 0.01%)</title><rect x="0.0057%" y="357" width="0.0114%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="2"/><text x="0.1257%" y="367.50"></text></g><g><title>Py_BytesMain (2 samples, 0.01%)</title><rect x="0.0057%" y="341" width="0.0114%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="2"/><text x="0.1257%" y="351.50"></text></g><g><title>Py_RunMain (2 samples, 0.01%)</title><rect x="0.0057%" y="325" width="0.0114%" height="15" fill="rgb(248,212,6)" fg:x="1" fg:w="2"/><text x="0.1257%" y="335.50"></text></g><g><title>_PyRun_AnyFileObject (2 samples, 0.01%)</title><rect x="0.0057%" y="309" width="0.0114%" height="15" fill="rgb(208,68,35)" fg:x="1" fg:w="2"/><text x="0.1257%" y="319.50"></text></g><g><title>_PyRun_SimpleFileObject (2 samples, 0.01%)</title><rect x="0.0057%" y="293" width="0.0114%" height="15" fill="rgb(232,128,0)" fg:x="1" fg:w="2"/><text x="0.1257%" y="303.50"></text></g><g><title>PyEval_EvalCode (2 samples, 0.01%)</title><rect x="0.0057%" y="277" width="0.0114%" height="15" fill="rgb(207,160,47)" fg:x="1" fg:w="2"/><text x="0.1257%" y="287.50"></text></g><g><title>_PyEval_EvalFrameDefault (2 samples, 0.01%)</title><rect x="0.0057%" y="261" width="0.0114%" height="15" fill="rgb(228,23,34)" fg:x="1" fg:w="2"/><text x="0.1257%" y="271.50"></text></g><g><title>PyObject_Vectorcall (2 samples, 0.01%)</title><rect x="0.0057%" y="245" width="0.0114%" height="15" fill="rgb(218,30,26)" fg:x="1" fg:w="2"/><text x="0.1257%" y="255.50"></text></g><g><title>_cffi_f_run_Rmainloop (2 samples, 0.01%)</title><rect x="0.0057%" y="229" width="0.0114%" height="15" fill="rgb(220,122,19)" fg:x="1" fg:w="2"/><text x="0.1257%" y="239.50"></text></g><g><title>run_Rmainloop (2 samples, 0.01%)</title><rect x="0.0057%" y="213" width="0.0114%" height="15" fill="rgb(250,228,42)" fg:x="1" fg:w="2"/><text x="0.1257%" y="223.50"></text></g><g><title>run_Rmainloop (2 samples, 0.01%)</title><rect x="0.0057%" y="197" width="0.0114%" height="15" fill="rgb(240,193,28)" fg:x="1" fg:w="2"/><text x="0.1257%" y="207.50"></text></g><g><title>Rf_ReplIteration (2 samples, 0.01%)</title><rect x="0.0057%" y="181" width="0.0114%" height="15" fill="rgb(216,20,37)" fg:x="1" fg:w="2"/><text x="0.1257%" y="191.50"></text></g><g><title>Rf_eval (2 samples, 0.01%)</title><rect x="0.0057%" y="165" width="0.0114%" height="15" fill="rgb(206,188,39)" fg:x="1" fg:w="2"/><text x="0.1257%" y="175.50"></text></g><g><title>Rf_eval (2 samples, 0.01%)</title><rect x="0.0057%" y="149" width="0.0114%" height="15" fill="rgb(217,207,13)" fg:x="1" fg:w="2"/><text x="0.1257%" y="159.50"></text></g><g><title>Rf_eval (2 samples, 0.01%)</title><rect x="0.0057%" y="133" width="0.0114%" height="15" fill="rgb(231,73,38)" fg:x="1" fg:w="2"/><text x="0.1257%" y="143.50"></text></g><g><title>mark_ (2 samples, 0.01%)</title><rect x="0.0057%" y="117" width="0.0114%" height="15" fill="rgb(225,20,46)" fg:x="1" fg:w="2"/><text x="0.1257%" y="127.50"></text></g><g><title>expr_elapsed_time (2 samples, 0.01%)</title><rect x="0.0057%" y="101" width="0.0114%" height="15" fill="rgb(210,31,41)" fg:x="1" fg:w="2"/><text x="0.1257%" y="111.50"></text></g><g><title>Rf_eval (2 samples, 0.01%)</title><rect x="0.0057%" y="85" width="0.0114%" height="15" fill="rgb(221,200,47)" fg:x="1" fg:w="2"/><text x="0.1257%" y="95.50"></text></g><g><title>Rf_eval (2 samples, 0.01%)</title><rect x="0.0057%" y="69" width="0.0114%" height="15" fill="rgb(226,26,5)" fg:x="1" fg:w="2"/><text x="0.1257%" y="79.50"></text></g><g><title>wrap__pprof_kractor_koutput (2 samples, 0.01%)</title><rect x="0.0057%" y="53" width="0.0114%" height="15" fill="rgb(249,33,26)" fg:x="1" fg:w="2"/><text x="0.1257%" y="63.50"></text></g><g><title>rsahmi::kractor::kractor_koutput (2 samples, 0.01%)</title><rect x="0.0057%" y="37" width="0.0114%" height="15" fill="rgb(235,183,28)" fg:x="1" fg:w="2"/><text x="0.1257%" y="47.50"></text></g><g><title>crossbeam_channel::flavors::array::Channel&lt;T&gt;::recv::{{closure}} (30 samples, 0.17%)</title><rect x="0.5305%" y="261" width="0.1711%" height="15" fill="rgb(221,5,38)" fg:x="93" fg:w="30"/><text x="0.6505%" y="271.50"></text></g><g><title>std::thread::park (26 samples, 0.15%)</title><rect x="0.5533%" y="245" width="0.1483%" height="15" fill="rgb(247,18,42)" fg:x="97" fg:w="26"/><text x="0.6733%" y="255.50"></text></g><g><title>std::thread::Thread::park (26 samples, 0.15%)</title><rect x="0.5533%" y="229" width="0.1483%" height="15" fill="rgb(241,131,45)" fg:x="97" fg:w="26"/><text x="0.6733%" y="239.50"></text></g><g><title>std::sys::sync::thread_parking::futex::Parker::park (26 samples, 0.15%)</title><rect x="0.5533%" y="213" width="0.1483%" height="15" fill="rgb(249,31,29)" fg:x="97" fg:w="26"/><text x="0.6733%" y="223.50"></text></g><g><title>std::sys::pal::unix::futex::futex_wait (26 samples, 0.15%)</title><rect x="0.5533%" y="197" width="0.1483%" height="15" fill="rgb(225,111,53)" fg:x="97" fg:w="26"/><text x="0.6733%" y="207.50"></text></g><g><title>syscall (22 samples, 0.13%)</title><rect x="0.5762%" y="181" width="0.1255%" height="15" fill="rgb(238,160,17)" fg:x="101" fg:w="22"/><text x="0.6962%" y="191.50"></text></g><g><title>sched_yield (11 samples, 0.06%)</title><rect x="0.7017%" y="261" width="0.0627%" height="15" fill="rgb(214,148,48)" fg:x="123" fg:w="11"/><text x="0.8217%" y="271.50"></text></g><g><title>&lt;crossbeam_channel::channel::IntoIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (121 samples, 0.69%)</title><rect x="0.0799%" y="293" width="0.6902%" height="15" fill="rgb(232,36,49)" fg:x="14" fg:w="121"/><text x="0.1999%" y="303.50"></text></g><g><title>crossbeam_channel::flavors::array::Channel&lt;T&gt;::recv (119 samples, 0.68%)</title><rect x="0.0913%" y="277" width="0.6788%" height="15" fill="rgb(209,103,24)" fg:x="16" fg:w="119"/><text x="0.2113%" y="287.50"></text></g><g><title>bytes::bytes_mut::shared_v_drop (12 samples, 0.07%)</title><rect x="0.7701%" y="293" width="0.0685%" height="15" fill="rgb(229,88,8)" fg:x="135" fg:w="12"/><text x="0.8901%" y="303.50"></text></g><g><title>cfree (3 samples, 0.02%)</title><rect x="0.8386%" y="293" width="0.0171%" height="15" fill="rgb(213,181,19)" fg:x="147" fg:w="3"/><text x="0.9586%" y="303.50"></text></g><g><title>&lt;rayon_core::latch::CountLatch as rayon_core::latch::Latch&gt;::set (3 samples, 0.02%)</title><rect x="6.0753%" y="229" width="0.0171%" height="15" fill="rgb(254,191,54)" fg:x="1065" fg:w="3"/><text x="6.1953%" y="239.50"></text></g><g><title>bytes::bytes::Bytes::slice_ref (1,895 samples, 10.81%)</title><rect x="7.9920%" y="213" width="10.8100%" height="15" fill="rgb(241,83,37)" fg:x="1401" fg:w="1895"/><text x="8.1120%" y="223.50">bytes::bytes::Bytes::slice_ref</text></g><g><title>bytes::bytes_mut::shared_v_clone (815 samples, 4.65%)</title><rect x="14.1529%" y="197" width="4.6492%" height="15" fill="rgb(233,36,39)" fg:x="2481" fg:w="815"/><text x="14.2729%" y="207.50">bytes::bytes_m..</text></g><g><title>&lt;rsahmi::kractor::koutput::io::BytesKoutputChunk as core::iter::traits::iterator::Iterator&gt;::next (2,971 samples, 16.95%)</title><rect x="6.0924%" y="229" width="16.9481%" height="15" fill="rgb(226,3,54)" fg:x="1068" fg:w="2971"/><text x="6.2124%" y="239.50">&lt;rsahmi::kractor::koutput::io::BytesKoutputChunk as core:..</text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_avx2 (743 samples, 4.24%)</title><rect x="18.8021%" y="213" width="4.2384%" height="15" fill="rgb(245,192,40)" fg:x="3296" fg:w="743"/><text x="18.9221%" y="223.50">memchr::arch..</text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::find_raw (639 samples, 3.65%)</title><rect x="19.3953%" y="197" width="3.6452%" height="15" fill="rgb(238,167,29)" fg:x="3400" fg:w="639"/><text x="19.5153%" y="207.50">memchr::ar..</text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::find_raw_avx2 (553 samples, 3.15%)</title><rect x="19.8859%" y="181" width="3.1546%" height="15" fill="rgb(232,182,51)" fg:x="3486" fg:w="553"/><text x="20.0059%" y="191.50">memchr::a..</text></g><g><title>bytes::bytes_mut::shared_v_drop (772 samples, 4.40%)</title><rect x="23.0462%" y="229" width="4.4039%" height="15" fill="rgb(231,60,39)" fg:x="4040" fg:w="772"/><text x="23.1662%" y="239.50">bytes::bytes_..</text></g><g><title>bytes::bytes_mut::shared_v_is_unique (129 samples, 0.74%)</title><rect x="27.4501%" y="229" width="0.7359%" height="15" fill="rgb(208,69,12)" fg:x="4812" fg:w="129"/><text x="27.5701%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;rsahmi::batchsender::BatchSender&lt;bytes::bytes::Bytes&gt;&gt; (2 samples, 0.01%)</title><rect x="28.1860%" y="229" width="0.0114%" height="15" fill="rgb(235,93,37)" fg:x="4941" fg:w="2"/><text x="28.3060%" y="239.50"></text></g><g><title>crossbeam_channel::channel::Sender&lt;T&gt;::send (220 samples, 1.25%)</title><rect x="28.1974%" y="229" width="1.2550%" height="15" fill="rgb(213,116,39)" fg:x="4943" fg:w="220"/><text x="28.3174%" y="239.50">cr..</text></g><g><title>crossbeam_channel::flavors::array::Channel&lt;T&gt;::send (220 samples, 1.25%)</title><rect x="28.1974%" y="213" width="1.2550%" height="15" fill="rgb(222,207,29)" fg:x="4943" fg:w="220"/><text x="28.3174%" y="223.50">cr..</text></g><g><title>crossbeam_channel::waker::SyncWaker::notify (218 samples, 1.24%)</title><rect x="28.2088%" y="197" width="1.2436%" height="15" fill="rgb(206,96,30)" fg:x="4945" fg:w="218"/><text x="28.3288%" y="207.50">cr..</text></g><g><title>std::sys::pal::unix::futex::futex_wake (208 samples, 1.19%)</title><rect x="28.2658%" y="181" width="1.1865%" height="15" fill="rgb(218,138,4)" fg:x="4955" fg:w="208"/><text x="28.3858%" y="191.50">st..</text></g><g><title>syscall (207 samples, 1.18%)</title><rect x="28.2715%" y="165" width="1.1808%" height="15" fill="rgb(250,191,14)" fg:x="4956" fg:w="207"/><text x="28.3915%" y="175.50">sy..</text></g><g><title>malloc (5 samples, 0.03%)</title><rect x="29.4524%" y="229" width="0.0285%" height="15" fill="rgb(239,60,40)" fg:x="5163" fg:w="5"/><text x="29.5724%" y="239.50"></text></g><g><title>aho_corasick::ahocorasick::enforce_anchored_consistency (13 samples, 0.07%)</title><rect x="34.2213%" y="213" width="0.0742%" height="15" fill="rgb(206,27,48)" fg:x="5999" fg:w="13"/><text x="34.3413%" y="223.50"></text></g><g><title>aho_corasick::automaton::Automaton::try_find (3,743 samples, 21.35%)</title><rect x="34.2955%" y="213" width="21.3520%" height="15" fill="rgb(225,35,8)" fg:x="6012" fg:w="3743"/><text x="34.4155%" y="223.50">aho_corasick::automaton::Automaton::try_find</text></g><g><title>aho_corasick::automaton::try_find_fwd (3,617 samples, 20.63%)</title><rect x="35.0143%" y="197" width="20.6332%" height="15" fill="rgb(250,213,24)" fg:x="6138" fg:w="3617"/><text x="35.1343%" y="207.50">aho_corasick::automaton::try_find_fwd</text></g><g><title>&lt;aho_corasick::util::prefilter::StartBytesOne as aho_corasick::util::prefilter::PrefilterI&gt;::find_in (853 samples, 4.87%)</title><rect x="50.7815%" y="181" width="4.8659%" height="15" fill="rgb(247,123,22)" fg:x="8902" fg:w="853"/><text x="50.9015%" y="191.50">&lt;aho_corasick::..</text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_avx2 (502 samples, 2.86%)</title><rect x="52.7838%" y="165" width="2.8637%" height="15" fill="rgb(231,138,38)" fg:x="9253" fg:w="502"/><text x="52.9038%" y="175.50">memchr::..</text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::find_raw (230 samples, 1.31%)</title><rect x="54.3354%" y="149" width="1.3120%" height="15" fill="rgb(231,145,46)" fg:x="9525" fg:w="230"/><text x="54.4554%" y="159.50">me..</text></g><g><title>aho_corasick::automaton::Automaton::try_find_overlapping (45 samples, 0.26%)</title><rect x="55.6475%" y="213" width="0.2567%" height="15" fill="rgb(251,118,11)" fg:x="9755" fg:w="45"/><text x="55.7675%" y="223.50"></text></g><g><title>memchr::arch::x86_64::avx2::packedpair::Finder::find_impl (462 samples, 2.64%)</title><rect x="55.9042%" y="213" width="2.6355%" height="15" fill="rgb(217,147,25)" fg:x="9800" fg:w="462"/><text x="56.0242%" y="223.50">memchr:..</text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_avx2 (1,907 samples, 10.88%)</title><rect x="58.5396%" y="213" width="10.8785%" height="15" fill="rgb(247,81,37)" fg:x="10262" fg:w="1907"/><text x="58.6596%" y="223.50">memchr::arch::x86_64::memchr::memchr..</text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::find_raw (1,523 samples, 8.69%)</title><rect x="60.7302%" y="197" width="8.6880%" height="15" fill="rgb(209,12,38)" fg:x="10646" fg:w="1523"/><text x="60.8502%" y="207.50">memchr::arch::x86_64::avx2::..</text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::find_raw_avx2 (1,206 samples, 6.88%)</title><rect x="62.5385%" y="181" width="6.8796%" height="15" fill="rgb(227,1,9)" fg:x="10963" fg:w="1206"/><text x="62.6585%" y="191.50">memchr::arch::x86_64::..</text></g><g><title>&lt;rayon_core::job::HeapJob&lt;BODY&gt; as rayon_core::job::Job&gt;::execute (12,156 samples, 69.34%)</title><rect x="1.0325%" y="261" width="69.3440%" height="15" fill="rgb(248,47,43)" fg:x="181" fg:w="12156"/><text x="1.1525%" y="271.50">&lt;rayon_core::job::HeapJob&lt;BODY&gt; as rayon_core::job::Job&gt;::execute</text></g><g><title>rayon_core::scope::ScopeBase::execute_job_closure (12,152 samples, 69.32%)</title><rect x="1.0553%" y="245" width="69.3212%" height="15" fill="rgb(221,10,30)" fg:x="185" fg:w="12152"/><text x="1.1753%" y="255.50">rayon_core::scope::ScopeBase::execute_job_closure</text></g><g><title>rsahmi::kractor::koutput::kractor_match_aho (7,169 samples, 40.90%)</title><rect x="29.4809%" y="229" width="40.8956%" height="15" fill="rgb(210,229,1)" fg:x="5168" fg:w="7169"/><text x="29.6009%" y="239.50">rsahmi::kractor::koutput::kractor_match_aho</text></g><g><title>memchr::memmem::searcher::searcher_kind_avx2 (168 samples, 0.96%)</title><rect x="69.4181%" y="213" width="0.9584%" height="15" fill="rgb(222,148,37)" fg:x="12169" fg:w="168"/><text x="69.5381%" y="223.50">m..</text></g><g><title>memchr::arch::all::rabinkarp::is_equal_raw (4 samples, 0.02%)</title><rect x="70.3537%" y="197" width="0.0228%" height="15" fill="rgb(234,67,33)" fg:x="12333" fg:w="4"/><text x="70.4737%" y="207.50"></text></g><g><title>rayon_core::registry::Registry::inject_or_push (6 samples, 0.03%)</title><rect x="70.4392%" y="213" width="0.0342%" height="15" fill="rgb(247,98,35)" fg:x="12348" fg:w="6"/><text x="70.5592%" y="223.50"></text></g><g><title>__tls_get_addr (3 samples, 0.02%)</title><rect x="70.4564%" y="197" width="0.0171%" height="15" fill="rgb(247,138,52)" fg:x="12351" fg:w="3"/><text x="70.5764%" y="207.50"></text></g><g><title>rayon_core::sleep::Sleep::wake_any_threads (247 samples, 1.41%)</title><rect x="70.4792%" y="213" width="1.4090%" height="15" fill="rgb(213,79,30)" fg:x="12355" fg:w="247"/><text x="70.5992%" y="223.50">ra..</text></g><g><title>rayon_core::sleep::Sleep::wake_specific_thread (247 samples, 1.41%)</title><rect x="70.4792%" y="197" width="1.4090%" height="15" fill="rgb(246,177,23)" fg:x="12355" fg:w="247"/><text x="70.5992%" y="207.50">ra..</text></g><g><title>syscall (245 samples, 1.40%)</title><rect x="70.4906%" y="181" width="1.3976%" height="15" fill="rgb(230,62,27)" fg:x="12357" fg:w="245"/><text x="70.6106%" y="191.50">sy..</text></g><g><title>&lt;bytes::bytes_mut::BytesMut as core::ops::drop::Drop&gt;::drop (7 samples, 0.04%)</title><rect x="71.9909%" y="197" width="0.0399%" height="15" fill="rgb(216,154,8)" fg:x="12620" fg:w="7"/><text x="72.1109%" y="207.50"></text></g><g><title>cfree (7 samples, 0.04%)</title><rect x="71.9909%" y="181" width="0.0399%" height="15" fill="rgb(244,35,45)" fg:x="12620" fg:w="7"/><text x="72.1109%" y="191.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (3,128 samples, 17.84%)</title><rect x="72.0308%" y="197" width="17.8437%" height="15" fill="rgb(251,115,12)" fg:x="12627" fg:w="3128"/><text x="72.1508%" y="207.50">&lt;std::fs::File as std::io::Read&gt;::read</text></g><g><title>&lt;&amp;std::fs::File as std::io::Read&gt;::read (3,128 samples, 17.84%)</title><rect x="72.0308%" y="181" width="17.8437%" height="15" fill="rgb(240,54,50)" fg:x="12627" fg:w="3128"/><text x="72.1508%" y="191.50">&lt;&amp;std::fs::File as std::io::Read&gt;::read</text></g><g><title>std::sys::fs::unix::File::read (3,128 samples, 17.84%)</title><rect x="72.0308%" y="165" width="17.8437%" height="15" fill="rgb(233,84,52)" fg:x="12627" fg:w="3128"/><text x="72.1508%" y="175.50">std::sys::fs::unix::File::read</text></g><g><title>std::sys::pal::unix::fd::FileDesc::read (3,128 samples, 17.84%)</title><rect x="72.0308%" y="149" width="17.8437%" height="15" fill="rgb(207,117,47)" fg:x="12627" fg:w="3128"/><text x="72.1508%" y="159.50">std::sys::pal::unix::fd::FileDesc::read</text></g><g><title>read (3,120 samples, 17.80%)</title><rect x="72.0764%" y="133" width="17.7981%" height="15" fill="rgb(249,43,39)" fg:x="12635" fg:w="3120"/><text x="72.1964%" y="143.50">read</text></g><g><title>bytes::bytes_mut::BytesMut::split_to (16 samples, 0.09%)</title><rect x="89.8745%" y="197" width="0.0913%" height="15" fill="rgb(209,38,44)" fg:x="15755" fg:w="16"/><text x="89.9945%" y="207.50"></text></g><g><title>malloc (4 samples, 0.02%)</title><rect x="89.9430%" y="181" width="0.0228%" height="15" fill="rgb(236,212,23)" fg:x="15767" fg:w="4"/><text x="90.0630%" y="191.50"></text></g><g><title>malloc (5 samples, 0.03%)</title><rect x="89.9658%" y="197" width="0.0285%" height="15" fill="rgb(242,79,21)" fg:x="15771" fg:w="5"/><text x="90.0858%" y="207.50"></text></g><g><title>rayon_core::scope::scope::{{closure}} (3,440 samples, 19.62%)</title><rect x="70.3765%" y="245" width="19.6235%" height="15" fill="rgb(211,96,35)" fg:x="12337" fg:w="3440"/><text x="70.4965%" y="255.50">rayon_core::scope::scope::{{closure}}</text></g><g><title>rayon_core::scope::ScopeBase::complete (3,440 samples, 19.62%)</title><rect x="70.3765%" y="229" width="19.6235%" height="15" fill="rgb(253,215,40)" fg:x="12337" fg:w="3440"/><text x="70.4965%" y="239.50">rayon_core::scope::ScopeBase::complete</text></g><g><title>rsahmi::kractor::koutput::io::BytesChunkReader&lt;R&gt;::chunk_reader (3,175 samples, 18.11%)</title><rect x="71.8882%" y="213" width="18.1118%" height="15" fill="rgb(211,81,21)" fg:x="12602" fg:w="3175"/><text x="72.0082%" y="223.50">rsahmi::kractor::koutput::io::BytesChunkReader&lt;R&gt;::chunk_read..</text></g><g><title>&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (3,441 samples, 19.63%)</title><rect x="70.3765%" y="261" width="19.6292%" height="15" fill="rgb(208,190,38)" fg:x="12337" fg:w="3441"/><text x="70.4965%" y="271.50">&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute</text></g><g><title>crossbeam_deque::deque::Stealer&lt;T&gt;::steal (3 samples, 0.02%)</title><rect x="90.0114%" y="261" width="0.0171%" height="15" fill="rgb(235,213,38)" fg:x="15779" fg:w="3"/><text x="90.1314%" y="271.50"></text></g><g><title>crossbeam_epoch::default::with_handle (2 samples, 0.01%)</title><rect x="90.0171%" y="245" width="0.0114%" height="15" fill="rgb(237,122,38)" fg:x="15780" fg:w="2"/><text x="90.1371%" y="255.50"></text></g><g><title>__tls_get_addr (10 samples, 0.06%)</title><rect x="90.6446%" y="213" width="0.0570%" height="15" fill="rgb(244,218,35)" fg:x="15890" fg:w="10"/><text x="90.7646%" y="223.50"></text></g><g><title>__tls_get_addr (9 samples, 0.05%)</title><rect x="92.3388%" y="197" width="0.0513%" height="15" fill="rgb(240,68,47)" fg:x="16187" fg:w="9"/><text x="92.4588%" y="207.50"></text></g><g><title>crossbeam_epoch::internal::Global::try_advance (475 samples, 2.71%)</title><rect x="92.3959%" y="181" width="2.7096%" height="15" fill="rgb(210,16,53)" fg:x="16197" fg:w="475"/><text x="92.5159%" y="191.50">crossbe..</text></g><g><title>crossbeam_deque::deque::Stealer&lt;T&gt;::steal (877 samples, 5.00%)</title><rect x="90.1997%" y="229" width="5.0029%" height="15" fill="rgb(235,124,12)" fg:x="15812" fg:w="877"/><text x="90.3197%" y="239.50">crossbeam_deque..</text></g><g><title>crossbeam_epoch::default::with_handle (789 samples, 4.50%)</title><rect x="90.7017%" y="213" width="4.5009%" height="15" fill="rgb(224,169,11)" fg:x="15900" fg:w="789"/><text x="90.8217%" y="223.50">crossbeam_epo..</text></g><g><title>crossbeam_epoch::internal::Global::collect (493 samples, 2.81%)</title><rect x="92.3902%" y="197" width="2.8123%" height="15" fill="rgb(250,166,2)" fg:x="16196" fg:w="493"/><text x="92.5102%" y="207.50">crossbe..</text></g><g><title>crossbeam_epoch::sync::queue::Queue&lt;T&gt;::try_pop_if (17 samples, 0.10%)</title><rect x="95.1055%" y="181" width="0.0970%" height="15" fill="rgb(242,216,29)" fg:x="16672" fg:w="17"/><text x="95.2255%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (913 samples, 5.21%)</title><rect x="90.0627%" y="245" width="5.2082%" height="15" fill="rgb(230,116,27)" fg:x="15788" fg:w="913"/><text x="90.1827%" y="255.50">&lt;core::iter::ada..</text></g><g><title>crossbeam_deque::deque::Worker&lt;T&gt;::new_lifo (12 samples, 0.07%)</title><rect x="95.2025%" y="229" width="0.0685%" height="15" fill="rgb(228,99,48)" fg:x="16689" fg:w="12"/><text x="95.3225%" y="239.50"></text></g><g><title>crossbeam_deque::deque::Injector&lt;T&gt;::steal (25 samples, 0.14%)</title><rect x="95.2710%" y="245" width="0.1426%" height="15" fill="rgb(253,11,6)" fg:x="16701" fg:w="25"/><text x="95.3910%" y="255.50"></text></g><g><title>__tls_get_addr (2 samples, 0.01%)</title><rect x="95.5505%" y="229" width="0.0114%" height="15" fill="rgb(247,143,39)" fg:x="16750" fg:w="2"/><text x="95.6705%" y="239.50"></text></g><g><title>crossbeam_deque::deque::Stealer&lt;T&gt;::steal (62 samples, 0.35%)</title><rect x="95.4136%" y="245" width="0.3537%" height="15" fill="rgb(236,97,10)" fg:x="16726" fg:w="62"/><text x="95.5336%" y="255.50"></text></g><g><title>crossbeam_epoch::default::with_handle (36 samples, 0.21%)</title><rect x="95.5619%" y="229" width="0.2054%" height="15" fill="rgb(233,208,19)" fg:x="16752" fg:w="36"/><text x="95.6819%" y="239.50"></text></g><g><title>crossbeam_epoch::internal::Global::collect (11 samples, 0.06%)</title><rect x="95.7045%" y="213" width="0.0627%" height="15" fill="rgb(216,164,2)" fg:x="16777" fg:w="11"/><text x="95.8245%" y="223.50"></text></g><g><title>crossbeam_epoch::internal::Global::try_advance (11 samples, 0.06%)</title><rect x="95.7045%" y="197" width="0.0627%" height="15" fill="rgb(220,129,5)" fg:x="16777" fg:w="11"/><text x="95.8245%" y="207.50"></text></g><g><title>rayon_core::registry::WorkerThread::find_work (1,015 samples, 5.79%)</title><rect x="90.0285%" y="261" width="5.7901%" height="15" fill="rgb(242,17,10)" fg:x="15782" fg:w="1015"/><text x="90.1485%" y="271.50">rayon_core::regist..</text></g><g><title>crossbeam_deque::deque::Worker&lt;T&gt;::pop (9 samples, 0.05%)</title><rect x="95.7673%" y="245" width="0.0513%" height="15" fill="rgb(242,107,0)" fg:x="16788" fg:w="9"/><text x="95.8873%" y="255.50"></text></g><g><title>std::sys::pal::unix::futex::futex_wait (85 samples, 0.48%)</title><rect x="95.9327%" y="213" width="0.4849%" height="15" fill="rgb(251,28,31)" fg:x="16817" fg:w="85"/><text x="96.0527%" y="223.50"></text></g><g><title>syscall (74 samples, 0.42%)</title><rect x="95.9954%" y="197" width="0.4221%" height="15" fill="rgb(233,223,10)" fg:x="16828" fg:w="74"/><text x="96.1154%" y="207.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (8 samples, 0.05%)</title><rect x="96.4176%" y="197" width="0.0456%" height="15" fill="rgb(215,21,27)" fg:x="16902" fg:w="8"/><text x="96.5376%" y="207.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (8 samples, 0.05%)</title><rect x="96.4176%" y="181" width="0.0456%" height="15" fill="rgb(232,23,21)" fg:x="16902" fg:w="8"/><text x="96.5376%" y="191.50"></text></g><g><title>rayon_core::sleep::Sleep::sleep (118 samples, 0.67%)</title><rect x="95.8186%" y="261" width="0.6731%" height="15" fill="rgb(244,5,23)" fg:x="16797" fg:w="118"/><text x="95.9386%" y="271.50"></text></g><g><title>std::sys::sync::condvar::futex::Condvar::wait (98 samples, 0.56%)</title><rect x="95.9327%" y="245" width="0.5590%" height="15" fill="rgb(226,81,46)" fg:x="16817" fg:w="98"/><text x="96.0527%" y="255.50"></text></g><g><title>std::sys::sync::condvar::futex::Condvar::wait_optional_timeout (98 samples, 0.56%)</title><rect x="95.9327%" y="229" width="0.5590%" height="15" fill="rgb(247,70,30)" fg:x="16817" fg:w="98"/><text x="96.0527%" y="239.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock (13 samples, 0.07%)</title><rect x="96.4176%" y="213" width="0.0742%" height="15" fill="rgb(212,68,19)" fg:x="16902" fg:w="13"/><text x="96.5376%" y="223.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock_contended (5 samples, 0.03%)</title><rect x="96.4632%" y="197" width="0.0285%" height="15" fill="rgb(240,187,13)" fg:x="16910" fg:w="5"/><text x="96.5832%" y="207.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::spin (5 samples, 0.03%)</title><rect x="96.4632%" y="181" width="0.0285%" height="15" fill="rgb(223,113,26)" fg:x="16910" fg:w="5"/><text x="96.5832%" y="191.50"></text></g><g><title>core::hint::spin_loop (5 samples, 0.03%)</title><rect x="96.4632%" y="165" width="0.0285%" height="15" fill="rgb(206,192,2)" fg:x="16910" fg:w="5"/><text x="96.5832%" y="175.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (5 samples, 0.03%)</title><rect x="96.4632%" y="149" width="0.0285%" height="15" fill="rgb(241,108,4)" fg:x="16910" fg:w="5"/><text x="96.5832%" y="159.50"></text></g><g><title>rayon_core::sleep::Sleep::wake_any_threads (365 samples, 2.08%)</title><rect x="96.4917%" y="261" width="2.0821%" height="15" fill="rgb(247,173,49)" fg:x="16915" fg:w="365"/><text x="96.6117%" y="271.50">rayon..</text></g><g><title>rayon_core::sleep::Sleep::wake_specific_thread (364 samples, 2.08%)</title><rect x="96.4974%" y="245" width="2.0764%" height="15" fill="rgb(224,114,35)" fg:x="16916" fg:w="364"/><text x="96.6174%" y="255.50">rayon..</text></g><g><title>syscall (358 samples, 2.04%)</title><rect x="96.5317%" y="229" width="2.0422%" height="15" fill="rgb(245,159,27)" fg:x="16922" fg:w="358"/><text x="96.6517%" y="239.50">sysca..</text></g><g><title>sched_yield (217 samples, 1.24%)</title><rect x="98.5739%" y="261" width="1.2379%" height="15" fill="rgb(245,172,44)" fg:x="17280" fg:w="217"/><text x="98.6939%" y="271.50">sc..</text></g><g><title>rayon_core::registry::ThreadBuilder::run (17,353 samples, 98.99%)</title><rect x="0.8557%" y="293" width="98.9903%" height="15" fill="rgb(236,23,11)" fg:x="150" fg:w="17353"/><text x="0.9757%" y="303.50">rayon_core::registry::ThreadBuilder::run</text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold (17,353 samples, 98.99%)</title><rect x="0.8557%" y="277" width="98.9903%" height="15" fill="rgb(205,117,38)" fg:x="150" fg:w="17353"/><text x="0.9757%" y="287.50">rayon_core::registry::WorkerThread::wait_until_cold</text></g><g><title>std::thread::yield_now (6 samples, 0.03%)</title><rect x="99.8118%" y="261" width="0.0342%" height="15" fill="rgb(237,72,25)" fg:x="17497" fg:w="6"/><text x="99.9318%" y="271.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::yield_now (4 samples, 0.02%)</title><rect x="99.8232%" y="245" width="0.0228%" height="15" fill="rgb(244,70,9)" fg:x="17499" fg:w="4"/><text x="99.9432%" y="255.50"></text></g><g><title>all (17,530 samples, 100%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(217,125,39)" fg:x="0" fg:w="17530"/><text x="0.1200%" y="415.50"></text></g><g><title>radian (17,529 samples, 99.99%)</title><rect x="0.0057%" y="389" width="99.9943%" height="15" fill="rgb(235,36,10)" fg:x="1" fg:w="17529"/><text x="0.1257%" y="399.50">radian</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (17,527 samples, 99.98%)</title><rect x="0.0171%" y="373" width="99.9829%" height="15" fill="rgb(251,123,47)" fg:x="3" fg:w="17527"/><text x="0.1371%" y="383.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (17,527 samples, 99.98%)</title><rect x="0.0171%" y="357" width="99.9829%" height="15" fill="rgb(221,13,13)" fg:x="3" fg:w="17527"/><text x="0.1371%" y="367.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (17,527 samples, 99.98%)</title><rect x="0.0171%" y="341" width="99.9829%" height="15" fill="rgb(238,131,9)" fg:x="3" fg:w="17527"/><text x="0.1371%" y="351.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (17,527 samples, 99.98%)</title><rect x="0.0171%" y="325" width="99.9829%" height="15" fill="rgb(211,50,8)" fg:x="3" fg:w="17527"/><text x="0.1371%" y="335.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (17,527 samples, 99.98%)</title><rect x="0.0171%" y="309" width="99.9829%" height="15" fill="rgb(245,182,24)" fg:x="3" fg:w="17527"/><text x="0.1371%" y="319.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_all_cold (27 samples, 0.15%)</title><rect x="99.8460%" y="293" width="0.1540%" height="15" fill="rgb(242,14,37)" fg:x="17503" fg:w="27"/><text x="99.9660%" y="303.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (27 samples, 0.15%)</title><rect x="99.8460%" y="277" width="0.1540%" height="15" fill="rgb(246,228,12)" fg:x="17503" fg:w="27"/><text x="99.9660%" y="287.50"></text></g><g><title>&lt;std::fs::File as std::io::Write&gt;::write (27 samples, 0.15%)</title><rect x="99.8460%" y="261" width="0.1540%" height="15" fill="rgb(213,55,15)" fg:x="17503" fg:w="27"/><text x="99.9660%" y="271.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Write&gt;::write (27 samples, 0.15%)</title><rect x="99.8460%" y="245" width="0.1540%" height="15" fill="rgb(209,9,3)" fg:x="17503" fg:w="27"/><text x="99.9660%" y="255.50"></text></g><g><title>std::sys::fs::unix::File::write (27 samples, 0.15%)</title><rect x="99.8460%" y="229" width="0.1540%" height="15" fill="rgb(230,59,30)" fg:x="17503" fg:w="27"/><text x="99.9660%" y="239.50"></text></g><g><title>std::sys::pal::unix::fd::FileDesc::write (27 samples, 0.15%)</title><rect x="99.8460%" y="213" width="0.1540%" height="15" fill="rgb(209,121,21)" fg:x="17503" fg:w="27"/><text x="99.9660%" y="223.50"></text></g><g><title>write (27 samples, 0.15%)</title><rect x="99.8460%" y="197" width="0.1540%" height="15" fill="rgb(220,109,13)" fg:x="17503" fg:w="27"/><text x="99.9660%" y="207.50"></text></g></svg></svg>