<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="2500" height="550" onload="init(evt)" viewBox="0 0 2500 550" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="550" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="533.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="2490" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="2490" y="533.00"> </text><svg id="frames" x="10" width="2480" total_samples="7870"><g><title>polars-0 (1 samples, 0.01%)</title><rect x="0.0000%" y="485" width="0.0127%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.1200%" y="495.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (1 samples, 0.01%)</title><rect x="0.0000%" y="469" width="0.0127%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.1200%" y="479.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (1 samples, 0.01%)</title><rect x="0.0000%" y="453" width="0.0127%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.1200%" y="463.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (1 samples, 0.01%)</title><rect x="0.0000%" y="437" width="0.0127%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.1200%" y="447.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 0.01%)</title><rect x="0.0000%" y="421" width="0.0127%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="1"/><text x="0.1200%" y="431.50"></text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (1 samples, 0.01%)</title><rect x="0.0000%" y="405" width="0.0127%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="1"/><text x="0.1200%" y="415.50"></text></g><g><title>rayon_core::registry::ThreadBuilder::run (1 samples, 0.01%)</title><rect x="0.0000%" y="389" width="0.0127%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="1"/><text x="0.1200%" y="399.50"></text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold (1 samples, 0.01%)</title><rect x="0.0000%" y="373" width="0.0127%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="1"/><text x="0.1200%" y="383.50"></text></g><g><title>rayon_core::sleep::Sleep::sleep (1 samples, 0.01%)</title><rect x="0.0000%" y="357" width="0.0127%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="1"/><text x="0.1200%" y="367.50"></text></g><g><title>std::sys::sync::condvar::futex::Condvar::wait (1 samples, 0.01%)</title><rect x="0.0000%" y="341" width="0.0127%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="1"/><text x="0.1200%" y="351.50"></text></g><g><title>std::sys::sync::condvar::futex::Condvar::wait_optional_timeout (1 samples, 0.01%)</title><rect x="0.0000%" y="325" width="0.0127%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="1"/><text x="0.1200%" y="335.50"></text></g><g><title>std::sys::pal::unix::futex::futex_wait (1 samples, 0.01%)</title><rect x="0.0000%" y="309" width="0.0127%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="1"/><text x="0.1200%" y="319.50"></text></g><g><title>syscall (1 samples, 0.01%)</title><rect x="0.0000%" y="293" width="0.0127%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="1"/><text x="0.1200%" y="303.50"></text></g><g><title>__tls_get_addr (1 samples, 0.01%)</title><rect x="0.1398%" y="69" width="0.0127%" height="15" fill="rgb(206,188,39)" fg:x="11" fg:w="1"/><text x="0.2598%" y="79.50"></text></g><g><title>crossbeam_channel::channel::Sender&lt;T&gt;::send (135 samples, 1.72%)</title><rect x="0.0381%" y="117" width="1.7154%" height="15" fill="rgb(217,207,13)" fg:x="3" fg:w="135"/><text x="0.1581%" y="127.50">cros..</text></g><g><title>crossbeam_channel::flavors::array::Channel&lt;T&gt;::send (134 samples, 1.70%)</title><rect x="0.0508%" y="101" width="1.7027%" height="15" fill="rgb(231,73,38)" fg:x="4" fg:w="134"/><text x="0.1708%" y="111.50">cros..</text></g><g><title>crossbeam_channel::waker::SyncWaker::notify (134 samples, 1.70%)</title><rect x="0.0508%" y="85" width="1.7027%" height="15" fill="rgb(225,20,46)" fg:x="4" fg:w="134"/><text x="0.1708%" y="95.50">cros..</text></g><g><title>std::sys::pal::unix::futex::futex_wake (126 samples, 1.60%)</title><rect x="0.1525%" y="69" width="1.6010%" height="15" fill="rgb(210,31,41)" fg:x="12" fg:w="126"/><text x="0.2725%" y="79.50">std..</text></g><g><title>syscall (125 samples, 1.59%)</title><rect x="0.1652%" y="53" width="1.5883%" height="15" fill="rgb(221,200,47)" fg:x="13" fg:w="125"/><text x="0.2852%" y="63.50">sys..</text></g><g><title>&lt;aho_corasick::nfa::noncontiguous::NFA as aho_corasick::automaton::Automaton&gt;::prefilter (1 samples, 0.01%)</title><rect x="1.7662%" y="101" width="0.0127%" height="15" fill="rgb(226,26,5)" fg:x="139" fg:w="1"/><text x="1.8862%" y="111.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (1,780 samples, 22.62%)</title><rect x="1.7789%" y="101" width="22.6175%" height="15" fill="rgb(249,33,26)" fg:x="140" fg:w="1780"/><text x="1.8989%" y="111.50">&lt;std::fs::File as std::io::Read&gt;::read</text></g><g><title>&lt;&amp;std::fs::File as std::io::Read&gt;::read (1,780 samples, 22.62%)</title><rect x="1.7789%" y="85" width="22.6175%" height="15" fill="rgb(235,183,28)" fg:x="140" fg:w="1780"/><text x="1.8989%" y="95.50">&lt;&amp;std::fs::File as std::io::Read&gt;::read</text></g><g><title>std::sys::fs::unix::File::read (1,780 samples, 22.62%)</title><rect x="1.7789%" y="69" width="22.6175%" height="15" fill="rgb(221,5,38)" fg:x="140" fg:w="1780"/><text x="1.8989%" y="79.50">std::sys::fs::unix::File::read</text></g><g><title>std::sys::pal::unix::fd::FileDesc::read (1,780 samples, 22.62%)</title><rect x="1.7789%" y="53" width="22.6175%" height="15" fill="rgb(247,18,42)" fg:x="140" fg:w="1780"/><text x="1.8989%" y="63.50">std::sys::pal::unix::fd::FileDesc::read</text></g><g><title>read (1,777 samples, 22.58%)</title><rect x="1.8170%" y="37" width="22.5794%" height="15" fill="rgb(241,131,45)" fg:x="143" fg:w="1777"/><text x="1.9370%" y="47.50">read</text></g><g><title>rsahmi::chunk::reader::ChunkReader&lt;R&gt;::take_buffer_copy (587 samples, 7.46%)</title><rect x="24.3964%" y="101" width="7.4587%" height="15" fill="rgb(249,31,29)" fg:x="1920" fg:w="587"/><text x="24.5164%" y="111.50">rsahmi::chunk::reader::C..</text></g><g><title>malloc (3 samples, 0.04%)</title><rect x="31.8170%" y="85" width="0.0381%" height="15" fill="rgb(225,111,53)" fg:x="2504" fg:w="3"/><text x="31.9370%" y="95.50"></text></g><g><title>_start (2,510 samples, 31.89%)</title><rect x="0.0127%" y="469" width="31.8933%" height="15" fill="rgb(238,160,17)" fg:x="1" fg:w="2510"/><text x="0.1327%" y="479.50">_start</text></g><g><title>__libc_start_main (2,510 samples, 31.89%)</title><rect x="0.0127%" y="453" width="31.8933%" height="15" fill="rgb(214,148,48)" fg:x="1" fg:w="2510"/><text x="0.1327%" y="463.50">__libc_start_main</text></g><g><title>Py_BytesMain (2,510 samples, 31.89%)</title><rect x="0.0127%" y="437" width="31.8933%" height="15" fill="rgb(232,36,49)" fg:x="1" fg:w="2510"/><text x="0.1327%" y="447.50">Py_BytesMain</text></g><g><title>Py_RunMain (2,510 samples, 31.89%)</title><rect x="0.0127%" y="421" width="31.8933%" height="15" fill="rgb(209,103,24)" fg:x="1" fg:w="2510"/><text x="0.1327%" y="431.50">Py_RunMain</text></g><g><title>_PyRun_AnyFileObject (2,510 samples, 31.89%)</title><rect x="0.0127%" y="405" width="31.8933%" height="15" fill="rgb(229,88,8)" fg:x="1" fg:w="2510"/><text x="0.1327%" y="415.50">_PyRun_AnyFileObject</text></g><g><title>_PyRun_SimpleFileObject (2,510 samples, 31.89%)</title><rect x="0.0127%" y="389" width="31.8933%" height="15" fill="rgb(213,181,19)" fg:x="1" fg:w="2510"/><text x="0.1327%" y="399.50">_PyRun_SimpleFileObject</text></g><g><title>PyEval_EvalCode (2,510 samples, 31.89%)</title><rect x="0.0127%" y="373" width="31.8933%" height="15" fill="rgb(254,191,54)" fg:x="1" fg:w="2510"/><text x="0.1327%" y="383.50">PyEval_EvalCode</text></g><g><title>_PyEval_EvalFrameDefault (2,510 samples, 31.89%)</title><rect x="0.0127%" y="357" width="31.8933%" height="15" fill="rgb(241,83,37)" fg:x="1" fg:w="2510"/><text x="0.1327%" y="367.50">_PyEval_EvalFrameDefault</text></g><g><title>PyObject_Vectorcall (2,510 samples, 31.89%)</title><rect x="0.0127%" y="341" width="31.8933%" height="15" fill="rgb(233,36,39)" fg:x="1" fg:w="2510"/><text x="0.1327%" y="351.50">PyObject_Vectorcall</text></g><g><title>_cffi_f_run_Rmainloop (2,510 samples, 31.89%)</title><rect x="0.0127%" y="325" width="31.8933%" height="15" fill="rgb(226,3,54)" fg:x="1" fg:w="2510"/><text x="0.1327%" y="335.50">_cffi_f_run_Rmainloop</text></g><g><title>run_Rmainloop (2,510 samples, 31.89%)</title><rect x="0.0127%" y="309" width="31.8933%" height="15" fill="rgb(245,192,40)" fg:x="1" fg:w="2510"/><text x="0.1327%" y="319.50">run_Rmainloop</text></g><g><title>run_Rmainloop (2,510 samples, 31.89%)</title><rect x="0.0127%" y="293" width="31.8933%" height="15" fill="rgb(238,167,29)" fg:x="1" fg:w="2510"/><text x="0.1327%" y="303.50">run_Rmainloop</text></g><g><title>Rf_ReplIteration (2,510 samples, 31.89%)</title><rect x="0.0127%" y="277" width="31.8933%" height="15" fill="rgb(232,182,51)" fg:x="1" fg:w="2510"/><text x="0.1327%" y="287.50">Rf_ReplIteration</text></g><g><title>Rf_eval (2,510 samples, 31.89%)</title><rect x="0.0127%" y="261" width="31.8933%" height="15" fill="rgb(231,60,39)" fg:x="1" fg:w="2510"/><text x="0.1327%" y="271.50">Rf_eval</text></g><g><title>Rf_eval (2,510 samples, 31.89%)</title><rect x="0.0127%" y="245" width="31.8933%" height="15" fill="rgb(208,69,12)" fg:x="1" fg:w="2510"/><text x="0.1327%" y="255.50">Rf_eval</text></g><g><title>Rf_eval (2,510 samples, 31.89%)</title><rect x="0.0127%" y="229" width="31.8933%" height="15" fill="rgb(235,93,37)" fg:x="1" fg:w="2510"/><text x="0.1327%" y="239.50">Rf_eval</text></g><g><title>Rf_eval (2,510 samples, 31.89%)</title><rect x="0.0127%" y="213" width="31.8933%" height="15" fill="rgb(213,116,39)" fg:x="1" fg:w="2510"/><text x="0.1327%" y="223.50">Rf_eval</text></g><g><title>wrap__pprof_kractor_koutput (2,510 samples, 31.89%)</title><rect x="0.0127%" y="197" width="31.8933%" height="15" fill="rgb(222,207,29)" fg:x="1" fg:w="2510"/><text x="0.1327%" y="207.50">wrap__pprof_kractor_koutput</text></g><g><title>rsahmi::kractor::kractor_koutput (2,510 samples, 31.89%)</title><rect x="0.0127%" y="181" width="31.8933%" height="15" fill="rgb(206,96,30)" fg:x="1" fg:w="2510"/><text x="0.1327%" y="191.50">rsahmi::kractor::kractor_koutput</text></g><g><title>rsahmi::chunk::ChunkProcessor::chunk_io (2,510 samples, 31.89%)</title><rect x="0.0127%" y="165" width="31.8933%" height="15" fill="rgb(218,138,4)" fg:x="1" fg:w="2510"/><text x="0.1327%" y="175.50">rsahmi::chunk::ChunkProcessor::chunk_io</text></g><g><title>rsahmi::chunk::io::ChunkIO&lt;R,W,F&gt;::process (2,510 samples, 31.89%)</title><rect x="0.0127%" y="149" width="31.8933%" height="15" fill="rgb(250,191,14)" fg:x="1" fg:w="2510"/><text x="0.1327%" y="159.50">rsahmi::chunk::io::ChunkIO&lt;R,W,F&gt;::process</text></g><g><title>std::thread::scoped::scope (2,510 samples, 31.89%)</title><rect x="0.0127%" y="133" width="31.8933%" height="15" fill="rgb(239,60,40)" fg:x="1" fg:w="2510"/><text x="0.1327%" y="143.50">std::thread::scoped::scope</text></g><g><title>rsahmi::chunk::reader::ChunkReader&lt;R&gt;::take_next (2,373 samples, 30.15%)</title><rect x="1.7535%" y="117" width="30.1525%" height="15" fill="rgb(206,27,48)" fg:x="138" fg:w="2373"/><text x="1.8735%" y="127.50">rsahmi::chunk::reader::ChunkReader&lt;R&gt;::take_next</text></g><g><title>rsahmi::chunk::splitter::ChunkSplitter::breakpoint (4 samples, 0.05%)</title><rect x="31.8551%" y="101" width="0.0508%" height="15" fill="rgb(225,35,8)" fg:x="2507" fg:w="4"/><text x="31.9751%" y="111.50"></text></g><g><title>memchr::arch::x86_64::memchr::memrchr_raw::find_avx2 (3 samples, 0.04%)</title><rect x="31.8679%" y="85" width="0.0381%" height="15" fill="rgb(250,213,24)" fg:x="2508" fg:w="3"/><text x="31.9879%" y="95.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::thread::Thread&gt; (5 samples, 0.06%)</title><rect x="33.4816%" y="325" width="0.0635%" height="15" fill="rgb(247,123,22)" fg:x="2635" fg:w="5"/><text x="33.6016%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;alloc::sync::Arc&lt;std::thread::Inner&gt;&gt;&gt; (5 samples, 0.06%)</title><rect x="33.4816%" y="309" width="0.0635%" height="15" fill="rgb(231,138,38)" fg:x="2635" fg:w="5"/><text x="33.6016%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;std::thread::Inner&gt;&gt; (5 samples, 0.06%)</title><rect x="33.4816%" y="293" width="0.0635%" height="15" fill="rgb(231,145,46)" fg:x="2635" fg:w="5"/><text x="33.6016%" y="303.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.06%)</title><rect x="33.4816%" y="277" width="0.0635%" height="15" fill="rgb(251,118,11)" fg:x="2635" fg:w="5"/><text x="33.6016%" y="287.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (5 samples, 0.06%)</title><rect x="33.4816%" y="261" width="0.0635%" height="15" fill="rgb(217,147,25)" fg:x="2635" fg:w="5"/><text x="33.6016%" y="271.50"></text></g><g><title>core::sync::atomic::atomic_sub (5 samples, 0.06%)</title><rect x="33.4816%" y="245" width="0.0635%" height="15" fill="rgb(247,81,37)" fg:x="2635" fg:w="5"/><text x="33.6016%" y="255.50"></text></g><g><title>std::thread::Thread::park (28 samples, 0.36%)</title><rect x="33.5451%" y="325" width="0.3558%" height="15" fill="rgb(209,12,38)" fg:x="2640" fg:w="28"/><text x="33.6651%" y="335.50"></text></g><g><title>std::sys::sync::thread_parking::futex::Parker::park (28 samples, 0.36%)</title><rect x="33.5451%" y="309" width="0.3558%" height="15" fill="rgb(227,1,9)" fg:x="2640" fg:w="28"/><text x="33.6651%" y="319.50"></text></g><g><title>std::sys::pal::unix::futex::futex_wait (28 samples, 0.36%)</title><rect x="33.5451%" y="293" width="0.3558%" height="15" fill="rgb(248,47,43)" fg:x="2640" fg:w="28"/><text x="33.6651%" y="303.50"></text></g><g><title>syscall (28 samples, 0.36%)</title><rect x="33.5451%" y="277" width="0.3558%" height="15" fill="rgb(221,10,30)" fg:x="2640" fg:w="28"/><text x="33.6651%" y="287.50"></text></g><g><title>crossbeam_channel::flavors::array::Channel&lt;T&gt;::recv::{{closure}} (41 samples, 0.52%)</title><rect x="33.3926%" y="357" width="0.5210%" height="15" fill="rgb(210,229,1)" fg:x="2628" fg:w="41"/><text x="33.5126%" y="367.50"></text></g><g><title>std::thread::park (41 samples, 0.52%)</title><rect x="33.3926%" y="341" width="0.5210%" height="15" fill="rgb(222,148,37)" fg:x="2628" fg:w="41"/><text x="33.5126%" y="351.50"></text></g><g><title>std::thread::current::current (1 samples, 0.01%)</title><rect x="33.9009%" y="325" width="0.0127%" height="15" fill="rgb(234,67,33)" fg:x="2668" fg:w="1"/><text x="34.0209%" y="335.50"></text></g><g><title>std::sys::thread_local::native::LocalPointer::get (1 samples, 0.01%)</title><rect x="33.9009%" y="309" width="0.0127%" height="15" fill="rgb(247,98,35)" fg:x="2668" fg:w="1"/><text x="34.0209%" y="319.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (1 samples, 0.01%)</title><rect x="33.9009%" y="293" width="0.0127%" height="15" fill="rgb(247,138,52)" fg:x="2668" fg:w="1"/><text x="34.0209%" y="303.50"></text></g><g><title>__tls_get_addr (1 samples, 0.01%)</title><rect x="33.9009%" y="277" width="0.0127%" height="15" fill="rgb(213,79,30)" fg:x="2668" fg:w="1"/><text x="34.0209%" y="287.50"></text></g><g><title>crossbeam_channel::waker::SyncWaker::notify (1 samples, 0.01%)</title><rect x="33.9136%" y="357" width="0.0127%" height="15" fill="rgb(246,177,23)" fg:x="2669" fg:w="1"/><text x="34.0336%" y="367.50"></text></g><g><title>&lt;crossbeam_channel::channel::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (162 samples, 2.06%)</title><rect x="32.0966%" y="389" width="2.0584%" height="15" fill="rgb(230,62,27)" fg:x="2526" fg:w="162"/><text x="32.2166%" y="399.50">&lt;cros..</text></g><g><title>crossbeam_channel::flavors::array::Channel&lt;T&gt;::recv (159 samples, 2.02%)</title><rect x="32.1347%" y="373" width="2.0203%" height="15" fill="rgb(216,154,8)" fg:x="2529" fg:w="159"/><text x="32.2547%" y="383.50">cross..</text></g><g><title>sched_yield (18 samples, 0.23%)</title><rect x="33.9263%" y="357" width="0.2287%" height="15" fill="rgb(244,35,45)" fg:x="2670" fg:w="18"/><text x="34.0463%" y="367.50"></text></g><g><title>__rustc::__rdl_alloc (1 samples, 0.01%)</title><rect x="39.6188%" y="373" width="0.0127%" height="15" fill="rgb(251,115,12)" fg:x="3118" fg:w="1"/><text x="39.7388%" y="383.50"></text></g><g><title>aho_corasick::ahocorasick::enforce_anchored_consistency (9 samples, 0.11%)</title><rect x="39.6315%" y="373" width="0.1144%" height="15" fill="rgb(240,54,50)" fg:x="3119" fg:w="9"/><text x="39.7515%" y="383.50"></text></g><g><title>aho_corasick::automaton::Automaton::try_find (3,247 samples, 41.26%)</title><rect x="39.7459%" y="373" width="41.2579%" height="15" fill="rgb(233,84,52)" fg:x="3128" fg:w="3247"/><text x="39.8659%" y="383.50">aho_corasick::automaton::Automaton::try_find</text></g><g><title>aho_corasick::automaton::try_find_fwd (3,181 samples, 40.42%)</title><rect x="40.5845%" y="357" width="40.4193%" height="15" fill="rgb(207,117,47)" fg:x="3194" fg:w="3181"/><text x="40.7045%" y="367.50">aho_corasick::automaton::try_find_fwd</text></g><g><title>&lt;aho_corasick::util::prefilter::StartBytesOne as aho_corasick::util::prefilter::PrefilterI&gt;::find_in (500 samples, 6.35%)</title><rect x="74.6506%" y="341" width="6.3532%" height="15" fill="rgb(249,43,39)" fg:x="5875" fg:w="500"/><text x="74.7706%" y="351.50">&lt;aho_corasick::util:..</text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_avx2 (334 samples, 4.24%)</title><rect x="76.7598%" y="325" width="4.2440%" height="15" fill="rgb(209,38,44)" fg:x="6041" fg:w="334"/><text x="76.8798%" y="335.50">memchr::arch..</text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::find_raw (171 samples, 2.17%)</title><rect x="78.8310%" y="309" width="2.1728%" height="15" fill="rgb(236,212,23)" fg:x="6204" fg:w="171"/><text x="78.9510%" y="319.50">memch..</text></g><g><title>cfree (2 samples, 0.03%)</title><rect x="81.0038%" y="373" width="0.0254%" height="15" fill="rgb(242,79,21)" fg:x="6375" fg:w="2"/><text x="81.1238%" y="383.50"></text></g><g><title>__tls_get_addr (1 samples, 0.01%)</title><rect x="81.1690%" y="325" width="0.0127%" height="15" fill="rgb(211,96,35)" fg:x="6388" fg:w="1"/><text x="81.2890%" y="335.50"></text></g><g><title>crossbeam_channel::waker::Waker::notify (2 samples, 0.03%)</title><rect x="81.1817%" y="325" width="0.0254%" height="15" fill="rgb(253,215,40)" fg:x="6389" fg:w="2"/><text x="81.3017%" y="335.50"></text></g><g><title>crossbeam_channel::channel::Sender&lt;T&gt;::send (166 samples, 2.11%)</title><rect x="81.0292%" y="373" width="2.1093%" height="15" fill="rgb(211,81,21)" fg:x="6377" fg:w="166"/><text x="81.1492%" y="383.50">cross..</text></g><g><title>crossbeam_channel::flavors::array::Channel&lt;T&gt;::send (164 samples, 2.08%)</title><rect x="81.0546%" y="357" width="2.0839%" height="15" fill="rgb(208,190,38)" fg:x="6379" fg:w="164"/><text x="81.1746%" y="367.50">cross..</text></g><g><title>crossbeam_channel::waker::SyncWaker::notify (163 samples, 2.07%)</title><rect x="81.0673%" y="341" width="2.0712%" height="15" fill="rgb(235,213,38)" fg:x="6380" fg:w="163"/><text x="81.1873%" y="351.50">cross..</text></g><g><title>std::sys::pal::unix::futex::futex_wake (152 samples, 1.93%)</title><rect x="81.2071%" y="325" width="1.9314%" height="15" fill="rgb(237,122,38)" fg:x="6391" fg:w="152"/><text x="81.3271%" y="335.50">std:..</text></g><g><title>syscall (152 samples, 1.93%)</title><rect x="81.2071%" y="309" width="1.9314%" height="15" fill="rgb(244,218,35)" fg:x="6391" fg:w="152"/><text x="81.3271%" y="319.50">sysc..</text></g><g><title>malloc (35 samples, 0.44%)</title><rect x="83.1385%" y="373" width="0.4447%" height="15" fill="rgb(240,68,47)" fg:x="6543" fg:w="35"/><text x="83.2585%" y="383.50"></text></g><g><title>__lll_lock_wake_private (1 samples, 0.01%)</title><rect x="83.5705%" y="357" width="0.0127%" height="15" fill="rgb(210,16,53)" fg:x="6577" fg:w="1"/><text x="83.6905%" y="367.50"></text></g><g><title>&lt;rsahmi::kractor::koutput::KOutputParser as rsahmi::chunk::ChunkParser&gt;::parse (5,161 samples, 65.58%)</title><rect x="34.1550%" y="389" width="65.5781%" height="15" fill="rgb(235,124,12)" fg:x="2688" fg:w="5161"/><text x="34.2750%" y="399.50">&lt;rsahmi::kractor::koutput::KOutputParser as rsahmi::chunk::ChunkParser&gt;::parse</text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_avx2 (1,271 samples, 16.15%)</title><rect x="83.5832%" y="373" width="16.1499%" height="15" fill="rgb(224,169,11)" fg:x="6578" fg:w="1271"/><text x="83.7032%" y="383.50">memchr::arch::x86_64::memchr::memchr_raw::find_avx2</text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::find_raw (1,061 samples, 13.48%)</title><rect x="86.2516%" y="357" width="13.4816%" height="15" fill="rgb(250,166,2)" fg:x="6788" fg:w="1061"/><text x="86.3716%" y="367.50">memchr::arch::x86_64::avx2::memchr::One::find..</text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::find_raw_avx2 (788 samples, 10.01%)</title><rect x="89.7205%" y="341" width="10.0127%" height="15" fill="rgb(242,216,29)" fg:x="7061" fg:w="788"/><text x="89.8405%" y="351.50">memchr::arch::x86_64::avx2::memch..</text></g><g><title>cfree (2 samples, 0.03%)</title><rect x="99.7332%" y="389" width="0.0254%" height="15" fill="rgb(230,116,27)" fg:x="7849" fg:w="2"/><text x="99.8532%" y="399.50"></text></g><g><title>all (7,870 samples, 100%)</title><rect x="0.0000%" y="501" width="100.0000%" height="15" fill="rgb(228,99,48)" fg:x="0" fg:w="7870"/><text x="0.1200%" y="511.50"></text></g><g><title>radian (7,869 samples, 99.99%)</title><rect x="0.0127%" y="485" width="99.9873%" height="15" fill="rgb(253,11,6)" fg:x="1" fg:w="7869"/><text x="0.1327%" y="495.50">radian</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (5,359 samples, 68.09%)</title><rect x="31.9060%" y="469" width="68.0940%" height="15" fill="rgb(247,143,39)" fg:x="2511" fg:w="5359"/><text x="32.0260%" y="479.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (5,359 samples, 68.09%)</title><rect x="31.9060%" y="453" width="68.0940%" height="15" fill="rgb(236,97,10)" fg:x="2511" fg:w="5359"/><text x="32.0260%" y="463.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (5,359 samples, 68.09%)</title><rect x="31.9060%" y="437" width="68.0940%" height="15" fill="rgb(233,208,19)" fg:x="2511" fg:w="5359"/><text x="32.0260%" y="447.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (5,359 samples, 68.09%)</title><rect x="31.9060%" y="421" width="68.0940%" height="15" fill="rgb(216,164,2)" fg:x="2511" fg:w="5359"/><text x="32.0260%" y="431.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (5,359 samples, 68.09%)</title><rect x="31.9060%" y="405" width="68.0940%" height="15" fill="rgb(220,129,5)" fg:x="2511" fg:w="5359"/><text x="32.0260%" y="415.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_all_cold (19 samples, 0.24%)</title><rect x="99.7586%" y="389" width="0.2414%" height="15" fill="rgb(242,17,10)" fg:x="7851" fg:w="19"/><text x="99.8786%" y="399.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (19 samples, 0.24%)</title><rect x="99.7586%" y="373" width="0.2414%" height="15" fill="rgb(242,107,0)" fg:x="7851" fg:w="19"/><text x="99.8786%" y="383.50"></text></g><g><title>&lt;std::fs::File as std::io::Write&gt;::write (19 samples, 0.24%)</title><rect x="99.7586%" y="357" width="0.2414%" height="15" fill="rgb(251,28,31)" fg:x="7851" fg:w="19"/><text x="99.8786%" y="367.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Write&gt;::write (19 samples, 0.24%)</title><rect x="99.7586%" y="341" width="0.2414%" height="15" fill="rgb(233,223,10)" fg:x="7851" fg:w="19"/><text x="99.8786%" y="351.50"></text></g><g><title>std::sys::fs::unix::File::write (19 samples, 0.24%)</title><rect x="99.7586%" y="325" width="0.2414%" height="15" fill="rgb(215,21,27)" fg:x="7851" fg:w="19"/><text x="99.8786%" y="335.50"></text></g><g><title>std::sys::pal::unix::fd::FileDesc::write (19 samples, 0.24%)</title><rect x="99.7586%" y="309" width="0.2414%" height="15" fill="rgb(232,23,21)" fg:x="7851" fg:w="19"/><text x="99.8786%" y="319.50"></text></g><g><title>write (19 samples, 0.24%)</title><rect x="99.7586%" y="293" width="0.2414%" height="15" fill="rgb(244,5,23)" fg:x="7851" fg:w="19"/><text x="99.8786%" y="303.50"></text></g></svg></svg>