<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="2500" height="406" onload="init(evt)" viewBox="0 0 2500 406" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="406" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="389.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="2490" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="2490" y="389.00"> </text><svg id="frames" x="10" width="2480" total_samples="7767"><g><title>&lt;crossbeam_channel::channel::IntoIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.04%)</title><rect x="0.1030%" y="245" width="0.0386%" height="15" fill="rgb(205,185,37)" fg:x="8" fg:w="3"/><text x="0.2230%" y="255.50"></text></g><g><title>crossbeam_channel::flavors::array::Channel&lt;T&gt;::recv (3 samples, 0.04%)</title><rect x="0.1030%" y="229" width="0.0386%" height="15" fill="rgb(238,207,15)" fg:x="8" fg:w="3"/><text x="0.2230%" y="239.50"></text></g><g><title>crossbeam_channel::flavors::array::Channel&lt;T&gt;::recv::{{closure}} (1 samples, 0.01%)</title><rect x="0.1287%" y="213" width="0.0129%" height="15" fill="rgb(213,199,42)" fg:x="10" fg:w="1"/><text x="0.2487%" y="223.50"></text></g><g><title>std::thread::park (1 samples, 0.01%)</title><rect x="0.1287%" y="197" width="0.0129%" height="15" fill="rgb(235,201,11)" fg:x="10" fg:w="1"/><text x="0.2487%" y="207.50"></text></g><g><title>std::thread::Thread::park (1 samples, 0.01%)</title><rect x="0.1287%" y="181" width="0.0129%" height="15" fill="rgb(207,46,11)" fg:x="10" fg:w="1"/><text x="0.2487%" y="191.50"></text></g><g><title>std::sys::sync::thread_parking::futex::Parker::park (1 samples, 0.01%)</title><rect x="0.1287%" y="165" width="0.0129%" height="15" fill="rgb(241,35,35)" fg:x="10" fg:w="1"/><text x="0.2487%" y="175.50"></text></g><g><title>std::sys::pal::unix::futex::futex_wait (1 samples, 0.01%)</title><rect x="0.1287%" y="149" width="0.0129%" height="15" fill="rgb(243,32,47)" fg:x="10" fg:w="1"/><text x="0.2487%" y="159.50"></text></g><g><title>syscall (1 samples, 0.01%)</title><rect x="0.1287%" y="133" width="0.0129%" height="15" fill="rgb(247,202,23)" fg:x="10" fg:w="1"/><text x="0.2487%" y="143.50"></text></g><g><title>__madvise (4 samples, 0.05%)</title><rect x="0.1545%" y="213" width="0.0515%" height="15" fill="rgb(219,102,11)" fg:x="12" fg:w="4"/><text x="0.2745%" y="223.50"></text></g><g><title>bytes::bytes_mut::shared_v_drop (13 samples, 0.17%)</title><rect x="0.1416%" y="245" width="0.1674%" height="15" fill="rgb(243,110,44)" fg:x="11" fg:w="13"/><text x="0.2616%" y="255.50"></text></g><g><title>cfree (12 samples, 0.15%)</title><rect x="0.1545%" y="229" width="0.1545%" height="15" fill="rgb(222,74,54)" fg:x="12" fg:w="12"/><text x="0.2745%" y="239.50"></text></g><g><title>__munmap (8 samples, 0.10%)</title><rect x="0.2060%" y="213" width="0.1030%" height="15" fill="rgb(216,99,12)" fg:x="16" fg:w="8"/><text x="0.3260%" y="223.50"></text></g><g><title>cfree (1 samples, 0.01%)</title><rect x="0.3090%" y="245" width="0.0129%" height="15" fill="rgb(226,22,26)" fg:x="24" fg:w="1"/><text x="0.4290%" y="255.50"></text></g><g><title>bytes::bytes::Bytes::slice_ref (687 samples, 8.85%)</title><rect x="6.9654%" y="165" width="8.8451%" height="15" fill="rgb(217,163,10)" fg:x="541" fg:w="687"/><text x="7.0854%" y="175.50">bytes::bytes::Bytes::slice_ref</text></g><g><title>bytes::bytes_mut::shared_v_clone (306 samples, 3.94%)</title><rect x="11.8707%" y="149" width="3.9397%" height="15" fill="rgb(213,25,53)" fg:x="922" fg:w="306"/><text x="11.9907%" y="159.50">bytes::byte..</text></g><g><title>&lt;rsahmi::kractor::koutput::reader::BytesKoutputChunk as core::iter::traits::iterator::Iterator&gt;::next (1,452 samples, 18.69%)</title><rect x="5.2659%" y="181" width="18.6945%" height="15" fill="rgb(252,105,26)" fg:x="409" fg:w="1452"/><text x="5.3859%" y="191.50">&lt;rsahmi::kractor::koutput::reader::BytesKoutputChunk as core::it..</text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_avx2 (633 samples, 8.15%)</title><rect x="15.8105%" y="165" width="8.1499%" height="15" fill="rgb(220,39,43)" fg:x="1228" fg:w="633"/><text x="15.9305%" y="175.50">memchr::arch::x86_64::memc..</text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::find_raw (600 samples, 7.72%)</title><rect x="16.2354%" y="149" width="7.7250%" height="15" fill="rgb(229,68,48)" fg:x="1261" fg:w="600"/><text x="16.3554%" y="159.50">memchr::arch::x86_64::avx..</text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::find_raw_avx2 (562 samples, 7.24%)</title><rect x="16.7246%" y="133" width="7.2357%" height="15" fill="rgb(252,8,32)" fg:x="1299" fg:w="562"/><text x="16.8446%" y="143.50">memchr::arch::x86_64::a..</text></g><g><title>bytes::bytes_mut::shared_v_drop (266 samples, 3.42%)</title><rect x="23.9603%" y="181" width="3.4247%" height="15" fill="rgb(223,20,43)" fg:x="1861" fg:w="266"/><text x="24.0803%" y="191.50">bytes::byt..</text></g><g><title>crossbeam_channel::waker::Waker::notify (1 samples, 0.01%)</title><rect x="27.3980%" y="133" width="0.0129%" height="15" fill="rgb(229,81,49)" fg:x="2128" fg:w="1"/><text x="27.5180%" y="143.50"></text></g><g><title>crossbeam_channel::channel::Sender&lt;T&gt;::send (10 samples, 0.13%)</title><rect x="27.3851%" y="181" width="0.1287%" height="15" fill="rgb(236,28,36)" fg:x="2127" fg:w="10"/><text x="27.5051%" y="191.50"></text></g><g><title>crossbeam_channel::flavors::array::Channel&lt;T&gt;::send (10 samples, 0.13%)</title><rect x="27.3851%" y="165" width="0.1287%" height="15" fill="rgb(249,185,26)" fg:x="2127" fg:w="10"/><text x="27.5051%" y="175.50"></text></g><g><title>crossbeam_channel::waker::SyncWaker::notify (9 samples, 0.12%)</title><rect x="27.3980%" y="149" width="0.1159%" height="15" fill="rgb(249,174,33)" fg:x="2128" fg:w="9"/><text x="27.5180%" y="159.50"></text></g><g><title>std::sys::pal::unix::futex::futex_wake (8 samples, 0.10%)</title><rect x="27.4108%" y="133" width="0.1030%" height="15" fill="rgb(233,201,37)" fg:x="2129" fg:w="8"/><text x="27.5308%" y="143.50"></text></g><g><title>syscall (8 samples, 0.10%)</title><rect x="27.4108%" y="117" width="0.1030%" height="15" fill="rgb(221,78,26)" fg:x="2129" fg:w="8"/><text x="27.5308%" y="127.50"></text></g><g><title>malloc (1 samples, 0.01%)</title><rect x="27.5138%" y="181" width="0.0129%" height="15" fill="rgb(250,127,30)" fg:x="2137" fg:w="1"/><text x="27.6338%" y="191.50"></text></g><g><title>aho_corasick::ahocorasick::enforce_anchored_consistency (9 samples, 0.12%)</title><rect x="31.8398%" y="165" width="0.1159%" height="15" fill="rgb(230,49,44)" fg:x="2473" fg:w="9"/><text x="31.9598%" y="175.50"></text></g><g><title>aho_corasick::automaton::Automaton::try_find (1,429 samples, 18.40%)</title><rect x="31.9557%" y="165" width="18.3984%" height="15" fill="rgb(229,67,23)" fg:x="2482" fg:w="1429"/><text x="32.0757%" y="175.50">aho_corasick::automaton::Automaton::try_find</text></g><g><title>aho_corasick::automaton::try_find_fwd (1,371 samples, 17.65%)</title><rect x="32.7025%" y="149" width="17.6516%" height="15" fill="rgb(249,83,47)" fg:x="2540" fg:w="1371"/><text x="32.8225%" y="159.50">aho_corasick::automaton::try_find_fwd</text></g><g><title>&lt;aho_corasick::util::prefilter::StartBytesOne as aho_corasick::util::prefilter::PrefilterI&gt;::find_in (333 samples, 4.29%)</title><rect x="46.0667%" y="133" width="4.2874%" height="15" fill="rgb(215,43,3)" fg:x="3578" fg:w="333"/><text x="46.1867%" y="143.50">&lt;aho_corasick..</text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_avx2 (198 samples, 2.55%)</title><rect x="47.8048%" y="117" width="2.5492%" height="15" fill="rgb(238,154,13)" fg:x="3713" fg:w="198"/><text x="47.9248%" y="127.50">memchr:..</text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::find_raw (102 samples, 1.31%)</title><rect x="49.0408%" y="101" width="1.3132%" height="15" fill="rgb(219,56,2)" fg:x="3809" fg:w="102"/><text x="49.1608%" y="111.50">me..</text></g><g><title>aho_corasick::automaton::Automaton::try_find_overlapping (20 samples, 0.26%)</title><rect x="50.3541%" y="165" width="0.2575%" height="15" fill="rgb(233,0,4)" fg:x="3911" fg:w="20"/><text x="50.4741%" y="175.50"></text></g><g><title>memchr::arch::x86_64::avx2::packedpair::Finder::find_impl (208 samples, 2.68%)</title><rect x="50.6116%" y="165" width="2.6780%" height="15" fill="rgb(235,30,7)" fg:x="3931" fg:w="208"/><text x="50.7316%" y="175.50">memchr:..</text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_avx2 (718 samples, 9.24%)</title><rect x="53.2896%" y="165" width="9.2442%" height="15" fill="rgb(250,79,13)" fg:x="4139" fg:w="718"/><text x="53.4096%" y="175.50">memchr::arch::x86_64::memchr::..</text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::find_raw (576 samples, 7.42%)</title><rect x="55.1178%" y="149" width="7.4160%" height="15" fill="rgb(211,146,34)" fg:x="4281" fg:w="576"/><text x="55.2378%" y="159.50">memchr::arch::x86_64::av..</text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::find_raw_avx2 (436 samples, 5.61%)</title><rect x="56.9203%" y="133" width="5.6135%" height="15" fill="rgb(228,22,38)" fg:x="4421" fg:w="436"/><text x="57.0403%" y="143.50">memchr::arch::x86..</text></g><g><title>&lt;rayon_core::job::HeapJob&lt;BODY&gt; as rayon_core::job::Job&gt;::execute (4,890 samples, 62.96%)</title><rect x="0.3476%" y="213" width="62.9587%" height="15" fill="rgb(235,168,5)" fg:x="27" fg:w="4890"/><text x="0.4676%" y="223.50">&lt;rayon_core::job::HeapJob&lt;BODY&gt; as rayon_core::job::Job&gt;::execute</text></g><g><title>rayon_core::scope::ScopeBase::execute_job_closure (4,889 samples, 62.95%)</title><rect x="0.3605%" y="197" width="62.9458%" height="15" fill="rgb(221,155,16)" fg:x="28" fg:w="4889"/><text x="0.4805%" y="207.50">rayon_core::scope::ScopeBase::execute_job_closure</text></g><g><title>rsahmi::kractor::koutput::kractor_match_aho (2,779 samples, 35.78%)</title><rect x="27.5267%" y="181" width="35.7796%" height="15" fill="rgb(215,215,53)" fg:x="2138" fg:w="2779"/><text x="27.6467%" y="191.50">rsahmi::kractor::koutput::kractor_match_aho</text></g><g><title>memchr::memmem::searcher::searcher_kind_avx2 (60 samples, 0.77%)</title><rect x="62.5338%" y="165" width="0.7725%" height="15" fill="rgb(223,4,10)" fg:x="4857" fg:w="60"/><text x="62.6538%" y="175.50"></text></g><g><title>memchr::arch::all::rabinkarp::is_equal_raw (3 samples, 0.04%)</title><rect x="63.2677%" y="149" width="0.0386%" height="15" fill="rgb(234,103,6)" fg:x="4914" fg:w="3"/><text x="63.3877%" y="159.50"></text></g><g><title>malloc (1 samples, 0.01%)</title><rect x="63.3192%" y="165" width="0.0129%" height="15" fill="rgb(227,97,0)" fg:x="4918" fg:w="1"/><text x="63.4392%" y="175.50"></text></g><g><title>rayon_core::sleep::Sleep::wake_any_threads (12 samples, 0.15%)</title><rect x="63.3320%" y="165" width="0.1545%" height="15" fill="rgb(234,150,53)" fg:x="4919" fg:w="12"/><text x="63.4520%" y="175.50"></text></g><g><title>rayon_core::sleep::Sleep::wake_specific_thread (12 samples, 0.15%)</title><rect x="63.3320%" y="149" width="0.1545%" height="15" fill="rgb(228,201,54)" fg:x="4919" fg:w="12"/><text x="63.4520%" y="159.50"></text></g><g><title>syscall (11 samples, 0.14%)</title><rect x="63.3449%" y="133" width="0.1416%" height="15" fill="rgb(222,22,37)" fg:x="4920" fg:w="11"/><text x="63.4649%" y="143.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as core::ops::drop::Drop&gt;::drop (2 samples, 0.03%)</title><rect x="63.4865%" y="149" width="0.0257%" height="15" fill="rgb(237,53,32)" fg:x="4931" fg:w="2"/><text x="63.6065%" y="159.50"></text></g><g><title>cfree (2 samples, 0.03%)</title><rect x="63.4865%" y="133" width="0.0257%" height="15" fill="rgb(233,25,53)" fg:x="4931" fg:w="2"/><text x="63.6065%" y="143.50"></text></g><g><title>__munmap (2 samples, 0.03%)</title><rect x="63.4865%" y="117" width="0.0257%" height="15" fill="rgb(210,40,34)" fg:x="4931" fg:w="2"/><text x="63.6065%" y="127.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (2,714 samples, 34.94%)</title><rect x="63.5123%" y="149" width="34.9427%" height="15" fill="rgb(241,220,44)" fg:x="4933" fg:w="2714"/><text x="63.6323%" y="159.50">&lt;std::fs::File as std::io::Read&gt;::read</text></g><g><title>&lt;&amp;std::fs::File as std::io::Read&gt;::read (2,714 samples, 34.94%)</title><rect x="63.5123%" y="133" width="34.9427%" height="15" fill="rgb(235,28,35)" fg:x="4933" fg:w="2714"/><text x="63.6323%" y="143.50">&lt;&amp;std::fs::File as std::io::Read&gt;::read</text></g><g><title>std::sys::fs::unix::File::read (2,714 samples, 34.94%)</title><rect x="63.5123%" y="117" width="34.9427%" height="15" fill="rgb(210,56,17)" fg:x="4933" fg:w="2714"/><text x="63.6323%" y="127.50">std::sys::fs::unix::File::read</text></g><g><title>std::sys::pal::unix::fd::FileDesc::read (2,714 samples, 34.94%)</title><rect x="63.5123%" y="101" width="34.9427%" height="15" fill="rgb(224,130,29)" fg:x="4933" fg:w="2714"/><text x="63.6323%" y="111.50">std::sys::pal::unix::fd::FileDesc::read</text></g><g><title>read (2,714 samples, 34.94%)</title><rect x="63.5123%" y="85" width="34.9427%" height="15" fill="rgb(235,212,8)" fg:x="4933" fg:w="2714"/><text x="63.6323%" y="95.50">read</text></g><g><title>R_init_rsahmi_extendr (1 samples, 0.01%)</title><rect x="98.4550%" y="133" width="0.0129%" height="15" fill="rgb(223,33,50)" fg:x="7647" fg:w="1"/><text x="98.5750%" y="143.50"></text></g><g><title>bytes::bytes_mut::BytesMut::split_to (4 samples, 0.05%)</title><rect x="98.4550%" y="149" width="0.0515%" height="15" fill="rgb(219,149,13)" fg:x="7647" fg:w="4"/><text x="98.5750%" y="159.50"></text></g><g><title>malloc (3 samples, 0.04%)</title><rect x="98.4679%" y="133" width="0.0386%" height="15" fill="rgb(250,156,29)" fg:x="7648" fg:w="3"/><text x="98.5879%" y="143.50"></text></g><g><title>malloc (4 samples, 0.05%)</title><rect x="98.5065%" y="149" width="0.0515%" height="15" fill="rgb(216,193,19)" fg:x="7651" fg:w="4"/><text x="98.6265%" y="159.50"></text></g><g><title>rayon_core::scope::scope::{{closure}} (2,739 samples, 35.26%)</title><rect x="63.3063%" y="197" width="35.2646%" height="15" fill="rgb(216,135,14)" fg:x="4917" fg:w="2739"/><text x="63.4263%" y="207.50">rayon_core::scope::scope::{{closure}}</text></g><g><title>rayon_core::scope::ScopeBase::complete (2,739 samples, 35.26%)</title><rect x="63.3063%" y="181" width="35.2646%" height="15" fill="rgb(241,47,5)" fg:x="4917" fg:w="2739"/><text x="63.4263%" y="191.50">rayon_core::scope::ScopeBase::complete</text></g><g><title>rsahmi::kractor::koutput::reader::BytesChunkReader&lt;R&gt;::chunk_reader (2,725 samples, 35.08%)</title><rect x="63.4865%" y="165" width="35.0843%" height="15" fill="rgb(233,42,35)" fg:x="4931" fg:w="2725"/><text x="63.6065%" y="175.50">rsahmi::kractor::koutput::reader::BytesChunkReader&lt;R&gt;::chunk_reader</text></g><g><title>memchr::arch::x86_64::memchr::memrchr_raw::find_avx2 (1 samples, 0.01%)</title><rect x="98.5580%" y="149" width="0.0129%" height="15" fill="rgb(231,13,6)" fg:x="7655" fg:w="1"/><text x="98.6780%" y="159.50"></text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::rfind_raw (1 samples, 0.01%)</title><rect x="98.5580%" y="133" width="0.0129%" height="15" fill="rgb(207,181,40)" fg:x="7655" fg:w="1"/><text x="98.6780%" y="143.50"></text></g><g><title>&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (2,740 samples, 35.28%)</title><rect x="63.3063%" y="213" width="35.2775%" height="15" fill="rgb(254,173,49)" fg:x="4917" fg:w="2740"/><text x="63.4263%" y="223.50">&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute</text></g><g><title>rsahmi::kractor::koutput::reader::reader_kractor_koutput (1 samples, 0.01%)</title><rect x="98.5709%" y="197" width="0.0129%" height="15" fill="rgb(221,1,38)" fg:x="7656" fg:w="1"/><text x="98.6909%" y="207.50"></text></g><g><title>std::fs::OpenOptions::_open (1 samples, 0.01%)</title><rect x="98.5709%" y="181" width="0.0129%" height="15" fill="rgb(206,124,46)" fg:x="7656" fg:w="1"/><text x="98.6909%" y="191.50"></text></g><g><title>std::sys::fs::unix::File::open (1 samples, 0.01%)</title><rect x="98.5709%" y="165" width="0.0129%" height="15" fill="rgb(249,21,11)" fg:x="7656" fg:w="1"/><text x="98.6909%" y="175.50"></text></g><g><title>std::sys::pal::common::small_c_string::run_path_with_cstr (1 samples, 0.01%)</title><rect x="98.5709%" y="149" width="0.0129%" height="15" fill="rgb(222,201,40)" fg:x="7656" fg:w="1"/><text x="98.6909%" y="159.50"></text></g><g><title>std::sys::pal::common::small_c_string::run_with_cstr (1 samples, 0.01%)</title><rect x="98.5709%" y="133" width="0.0129%" height="15" fill="rgb(235,61,29)" fg:x="7656" fg:w="1"/><text x="98.6909%" y="143.50"></text></g><g><title>std::sys::pal::common::small_c_string::run_with_cstr_stack (1 samples, 0.01%)</title><rect x="98.5709%" y="117" width="0.0129%" height="15" fill="rgb(219,207,3)" fg:x="7656" fg:w="1"/><text x="98.6909%" y="127.50"></text></g><g><title>std::sys::fs::unix::File::open::{{closure}} (1 samples, 0.01%)</title><rect x="98.5709%" y="101" width="0.0129%" height="15" fill="rgb(222,56,46)" fg:x="7656" fg:w="1"/><text x="98.6909%" y="111.50"></text></g><g><title>std::sys::fs::unix::File::open_c (1 samples, 0.01%)</title><rect x="98.5709%" y="85" width="0.0129%" height="15" fill="rgb(239,76,54)" fg:x="7656" fg:w="1"/><text x="98.6909%" y="95.50"></text></g><g><title>std::sys::pal::unix::cvt_r (1 samples, 0.01%)</title><rect x="98.5709%" y="69" width="0.0129%" height="15" fill="rgb(231,124,27)" fg:x="7656" fg:w="1"/><text x="98.6909%" y="79.50"></text></g><g><title>std::sys::fs::unix::File::open_c::{{closure}} (1 samples, 0.01%)</title><rect x="98.5709%" y="53" width="0.0129%" height="15" fill="rgb(249,195,6)" fg:x="7656" fg:w="1"/><text x="98.6909%" y="63.50"></text></g><g><title>open64 (1 samples, 0.01%)</title><rect x="98.5709%" y="37" width="0.0129%" height="15" fill="rgb(237,174,47)" fg:x="7656" fg:w="1"/><text x="98.6909%" y="47.50"></text></g><g><title>__tls_get_addr (1 samples, 0.01%)</title><rect x="98.6868%" y="165" width="0.0129%" height="15" fill="rgb(206,201,31)" fg:x="7665" fg:w="1"/><text x="98.8068%" y="175.50"></text></g><g><title>crossbeam_epoch::internal::Global::try_advance (23 samples, 0.30%)</title><rect x="98.7769%" y="133" width="0.2961%" height="15" fill="rgb(231,57,52)" fg:x="7672" fg:w="23"/><text x="98.8969%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (39 samples, 0.50%)</title><rect x="98.5838%" y="197" width="0.5021%" height="15" fill="rgb(248,177,22)" fg:x="7657" fg:w="39"/><text x="98.7038%" y="207.50"></text></g><g><title>crossbeam_deque::deque::Stealer&lt;T&gt;::steal (38 samples, 0.49%)</title><rect x="98.5966%" y="181" width="0.4892%" height="15" fill="rgb(215,211,37)" fg:x="7658" fg:w="38"/><text x="98.7166%" y="191.50"></text></g><g><title>crossbeam_epoch::default::with_handle (30 samples, 0.39%)</title><rect x="98.6996%" y="165" width="0.3862%" height="15" fill="rgb(241,128,51)" fg:x="7666" fg:w="30"/><text x="98.8196%" y="175.50"></text></g><g><title>crossbeam_epoch::internal::Global::collect (26 samples, 0.33%)</title><rect x="98.7511%" y="149" width="0.3347%" height="15" fill="rgb(227,165,31)" fg:x="7670" fg:w="26"/><text x="98.8711%" y="159.50"></text></g><g><title>crossbeam_epoch::sync::queue::Queue&lt;T&gt;::try_pop_if (1 samples, 0.01%)</title><rect x="99.0730%" y="133" width="0.0129%" height="15" fill="rgb(228,167,24)" fg:x="7695" fg:w="1"/><text x="99.1930%" y="143.50"></text></g><g><title>crossbeam_deque::deque::Injector&lt;T&gt;::steal (3 samples, 0.04%)</title><rect x="99.0859%" y="197" width="0.0386%" height="15" fill="rgb(228,143,12)" fg:x="7696" fg:w="3"/><text x="99.2059%" y="207.50"></text></g><g><title>rayon_core::registry::WorkerThread::find_work (44 samples, 0.57%)</title><rect x="98.5838%" y="213" width="0.5665%" height="15" fill="rgb(249,149,8)" fg:x="7657" fg:w="44"/><text x="98.7038%" y="223.50"></text></g><g><title>crossbeam_deque::deque::Stealer&lt;T&gt;::steal (2 samples, 0.03%)</title><rect x="99.1245%" y="197" width="0.0257%" height="15" fill="rgb(243,35,44)" fg:x="7699" fg:w="2"/><text x="99.2445%" y="207.50"></text></g><g><title>__tls_get_addr (1 samples, 0.01%)</title><rect x="99.1374%" y="181" width="0.0129%" height="15" fill="rgb(246,89,9)" fg:x="7700" fg:w="1"/><text x="99.2574%" y="191.50"></text></g><g><title>rayon_core::sleep::Sleep::sleep (8 samples, 0.10%)</title><rect x="99.1503%" y="213" width="0.1030%" height="15" fill="rgb(233,213,13)" fg:x="7701" fg:w="8"/><text x="99.2703%" y="223.50"></text></g><g><title>std::sys::sync::condvar::futex::Condvar::wait (6 samples, 0.08%)</title><rect x="99.1760%" y="197" width="0.0772%" height="15" fill="rgb(233,141,41)" fg:x="7703" fg:w="6"/><text x="99.2960%" y="207.50"></text></g><g><title>std::sys::sync::condvar::futex::Condvar::wait_optional_timeout (6 samples, 0.08%)</title><rect x="99.1760%" y="181" width="0.0772%" height="15" fill="rgb(239,167,4)" fg:x="7703" fg:w="6"/><text x="99.2960%" y="191.50"></text></g><g><title>std::sys::pal::unix::futex::futex_wait (6 samples, 0.08%)</title><rect x="99.1760%" y="165" width="0.0772%" height="15" fill="rgb(209,217,16)" fg:x="7703" fg:w="6"/><text x="99.2960%" y="175.50"></text></g><g><title>syscall (6 samples, 0.08%)</title><rect x="99.1760%" y="149" width="0.0772%" height="15" fill="rgb(219,88,35)" fg:x="7703" fg:w="6"/><text x="99.2960%" y="159.50"></text></g><g><title>rayon_core::sleep::Sleep::wake_any_threads (29 samples, 0.37%)</title><rect x="99.2533%" y="213" width="0.3734%" height="15" fill="rgb(220,193,23)" fg:x="7709" fg:w="29"/><text x="99.3733%" y="223.50"></text></g><g><title>rayon_core::sleep::Sleep::wake_specific_thread (29 samples, 0.37%)</title><rect x="99.2533%" y="197" width="0.3734%" height="15" fill="rgb(230,90,52)" fg:x="7709" fg:w="29"/><text x="99.3733%" y="207.50"></text></g><g><title>syscall (29 samples, 0.37%)</title><rect x="99.2533%" y="181" width="0.3734%" height="15" fill="rgb(252,106,19)" fg:x="7709" fg:w="29"/><text x="99.3733%" y="191.50"></text></g><g><title>rayon_core::registry::ThreadBuilder::run (7,728 samples, 99.50%)</title><rect x="0.3219%" y="245" width="99.4979%" height="15" fill="rgb(206,74,20)" fg:x="25" fg:w="7728"/><text x="0.4419%" y="255.50">rayon_core::registry::ThreadBuilder::run</text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold (7,728 samples, 99.50%)</title><rect x="0.3219%" y="229" width="99.4979%" height="15" fill="rgb(230,138,44)" fg:x="25" fg:w="7728"/><text x="0.4419%" y="239.50">rayon_core::registry::WorkerThread::wait_until_cold</text></g><g><title>sched_yield (15 samples, 0.19%)</title><rect x="99.6266%" y="213" width="0.1931%" height="15" fill="rgb(235,182,43)" fg:x="7738" fg:w="15"/><text x="99.7466%" y="223.50"></text></g><g><title>all (7,767 samples, 100%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(242,16,51)" fg:x="0" fg:w="7767"/><text x="0.1200%" y="367.50"></text></g><g><title>radian (7,767 samples, 100.00%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(248,9,4)" fg:x="0" fg:w="7767"/><text x="0.1200%" y="351.50">radian</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (7,767 samples, 100.00%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(210,31,22)" fg:x="0" fg:w="7767"/><text x="0.1200%" y="335.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (7,767 samples, 100.00%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(239,54,39)" fg:x="0" fg:w="7767"/><text x="0.1200%" y="319.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (7,767 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(230,99,41)" fg:x="0" fg:w="7767"/><text x="0.1200%" y="303.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (7,767 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(253,106,12)" fg:x="0" fg:w="7767"/><text x="0.1200%" y="287.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (7,767 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(213,46,41)" fg:x="0" fg:w="7767"/><text x="0.1200%" y="271.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_all_cold (14 samples, 0.18%)</title><rect x="99.8198%" y="245" width="0.1802%" height="15" fill="rgb(215,133,35)" fg:x="7753" fg:w="14"/><text x="99.9398%" y="255.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (14 samples, 0.18%)</title><rect x="99.8198%" y="229" width="0.1802%" height="15" fill="rgb(213,28,5)" fg:x="7753" fg:w="14"/><text x="99.9398%" y="239.50"></text></g><g><title>&lt;std::fs::File as std::io::Write&gt;::write (14 samples, 0.18%)</title><rect x="99.8198%" y="213" width="0.1802%" height="15" fill="rgb(215,77,49)" fg:x="7753" fg:w="14"/><text x="99.9398%" y="223.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Write&gt;::write (14 samples, 0.18%)</title><rect x="99.8198%" y="197" width="0.1802%" height="15" fill="rgb(248,100,22)" fg:x="7753" fg:w="14"/><text x="99.9398%" y="207.50"></text></g><g><title>std::sys::fs::unix::File::write (14 samples, 0.18%)</title><rect x="99.8198%" y="181" width="0.1802%" height="15" fill="rgb(208,67,9)" fg:x="7753" fg:w="14"/><text x="99.9398%" y="191.50"></text></g><g><title>std::sys::pal::unix::fd::FileDesc::write (14 samples, 0.18%)</title><rect x="99.8198%" y="165" width="0.1802%" height="15" fill="rgb(219,133,21)" fg:x="7753" fg:w="14"/><text x="99.9398%" y="175.50"></text></g><g><title>write (14 samples, 0.18%)</title><rect x="99.8198%" y="149" width="0.1802%" height="15" fill="rgb(246,46,29)" fg:x="7753" fg:w="14"/><text x="99.9398%" y="159.50"></text></g></svg></svg>