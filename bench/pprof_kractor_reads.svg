<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="2500" height="566" onload="init(evt)" viewBox="0 0 2500 566" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="566" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="549.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="2490" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="2490" y="549.00"> </text><svg id="frames" x="10" width="2480" total_samples="6432"><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (6 samples, 0.09%)</title><rect x="0.0155%" y="181" width="0.0933%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="6"/><text x="0.1355%" y="191.50"></text></g><g><title>cfree (3 samples, 0.05%)</title><rect x="0.1088%" y="181" width="0.0466%" height="15" fill="rgb(217,0,24)" fg:x="7" fg:w="3"/><text x="0.2288%" y="191.50"></text></g><g><title>rayon_core::registry::Registry::in_worker (1 samples, 0.02%)</title><rect x="0.1555%" y="181" width="0.0155%" height="15" fill="rgb(221,193,54)" fg:x="10" fg:w="1"/><text x="0.2755%" y="191.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="0.1555%" y="165" width="0.0155%" height="15" fill="rgb(248,212,6)" fg:x="10" fg:w="1"/><text x="0.2755%" y="175.50"></text></g><g><title>rayon_core::latch::LockLatch::wait_and_reset (1 samples, 0.02%)</title><rect x="0.1555%" y="149" width="0.0155%" height="15" fill="rgb(208,68,35)" fg:x="10" fg:w="1"/><text x="0.2755%" y="159.50"></text></g><g><title>std::sys::sync::condvar::futex::Condvar::wait (1 samples, 0.02%)</title><rect x="0.1555%" y="133" width="0.0155%" height="15" fill="rgb(232,128,0)" fg:x="10" fg:w="1"/><text x="0.2755%" y="143.50"></text></g><g><title>std::sys::sync::condvar::futex::Condvar::wait_optional_timeout (1 samples, 0.02%)</title><rect x="0.1555%" y="117" width="0.0155%" height="15" fill="rgb(207,160,47)" fg:x="10" fg:w="1"/><text x="0.2755%" y="127.50"></text></g><g><title>std::sys::pal::unix::futex::futex_wait (1 samples, 0.02%)</title><rect x="0.1555%" y="101" width="0.0155%" height="15" fill="rgb(228,23,34)" fg:x="10" fg:w="1"/><text x="0.2755%" y="111.50"></text></g><g><title>syscall (1 samples, 0.02%)</title><rect x="0.1555%" y="85" width="0.0155%" height="15" fill="rgb(218,30,26)" fg:x="10" fg:w="1"/><text x="0.2755%" y="95.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read_buf (5 samples, 0.08%)</title><rect x="0.2177%" y="133" width="0.0777%" height="15" fill="rgb(220,122,19)" fg:x="14" fg:w="5"/><text x="0.3377%" y="143.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Read&gt;::read_buf (5 samples, 0.08%)</title><rect x="0.2177%" y="117" width="0.0777%" height="15" fill="rgb(250,228,42)" fg:x="14" fg:w="5"/><text x="0.3377%" y="127.50"></text></g><g><title>std::sys::fs::unix::File::read_buf (5 samples, 0.08%)</title><rect x="0.2177%" y="101" width="0.0777%" height="15" fill="rgb(240,193,28)" fg:x="14" fg:w="5"/><text x="0.3377%" y="111.50"></text></g><g><title>std::sys::pal::unix::fd::FileDesc::read_buf (5 samples, 0.08%)</title><rect x="0.2177%" y="85" width="0.0777%" height="15" fill="rgb(216,20,37)" fg:x="14" fg:w="5"/><text x="0.3377%" y="95.50"></text></g><g><title>read (5 samples, 0.08%)</title><rect x="0.2177%" y="69" width="0.0777%" height="15" fill="rgb(206,188,39)" fg:x="14" fg:w="5"/><text x="0.3377%" y="79.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (2 samples, 0.03%)</title><rect x="0.2954%" y="133" width="0.0311%" height="15" fill="rgb(217,207,13)" fg:x="19" fg:w="2"/><text x="0.4154%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.02%)</title><rect x="0.3109%" y="117" width="0.0155%" height="15" fill="rgb(231,73,38)" fg:x="20" fg:w="1"/><text x="0.4309%" y="127.50"></text></g><g><title>malloc (1 samples, 0.02%)</title><rect x="0.3109%" y="101" width="0.0155%" height="15" fill="rgb(225,20,46)" fg:x="20" fg:w="1"/><text x="0.4309%" y="111.50"></text></g><g><title>core::slice::memchr::memchr_aligned (6 samples, 0.09%)</title><rect x="0.3265%" y="133" width="0.0933%" height="15" fill="rgb(210,31,41)" fg:x="21" fg:w="6"/><text x="0.4465%" y="143.50"></text></g><g><title>core::slice::memchr::memchr_aligned::runtime (6 samples, 0.09%)</title><rect x="0.3265%" y="117" width="0.0933%" height="15" fill="rgb(221,200,47)" fg:x="21" fg:w="6"/><text x="0.4465%" y="127.50"></text></g><g><title>core::slice::memchr::memchr_naive (6 samples, 0.09%)</title><rect x="0.3265%" y="101" width="0.0933%" height="15" fill="rgb(226,26,5)" fg:x="21" fg:w="6"/><text x="0.4465%" y="111.50"></text></g><g><title>&lt;std::io::Lines&lt;B&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 0.23%)</title><rect x="0.2021%" y="149" width="0.2332%" height="15" fill="rgb(249,33,26)" fg:x="13" fg:w="15"/><text x="0.3221%" y="159.50"></text></g><g><title>core::str::converts::from_utf8 (1 samples, 0.02%)</title><rect x="0.4198%" y="133" width="0.0155%" height="15" fill="rgb(235,183,28)" fg:x="27" fg:w="1"/><text x="0.5398%" y="143.50"></text></g><g><title>core::str::validations::run_utf8_validation (1 samples, 0.02%)</title><rect x="0.4198%" y="117" width="0.0155%" height="15" fill="rgb(221,5,38)" fg:x="27" fg:w="1"/><text x="0.5398%" y="127.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (10 samples, 0.16%)</title><rect x="0.4353%" y="133" width="0.1555%" height="15" fill="rgb(247,18,42)" fg:x="28" fg:w="10"/><text x="0.5553%" y="143.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::next (9 samples, 0.14%)</title><rect x="0.4509%" y="117" width="0.1399%" height="15" fill="rgb(241,131,45)" fg:x="29" fg:w="9"/><text x="0.5709%" y="127.50"></text></g><g><title>_start (47 samples, 0.73%)</title><rect x="0.0000%" y="485" width="0.7307%" height="15" fill="rgb(249,31,29)" fg:x="0" fg:w="47"/><text x="0.1200%" y="495.50"></text></g><g><title>__libc_start_main (47 samples, 0.73%)</title><rect x="0.0000%" y="469" width="0.7307%" height="15" fill="rgb(225,111,53)" fg:x="0" fg:w="47"/><text x="0.1200%" y="479.50"></text></g><g><title>Py_BytesMain (47 samples, 0.73%)</title><rect x="0.0000%" y="453" width="0.7307%" height="15" fill="rgb(238,160,17)" fg:x="0" fg:w="47"/><text x="0.1200%" y="463.50"></text></g><g><title>Py_RunMain (47 samples, 0.73%)</title><rect x="0.0000%" y="437" width="0.7307%" height="15" fill="rgb(214,148,48)" fg:x="0" fg:w="47"/><text x="0.1200%" y="447.50"></text></g><g><title>_PyRun_AnyFileObject (47 samples, 0.73%)</title><rect x="0.0000%" y="421" width="0.7307%" height="15" fill="rgb(232,36,49)" fg:x="0" fg:w="47"/><text x="0.1200%" y="431.50"></text></g><g><title>_PyRun_SimpleFileObject (47 samples, 0.73%)</title><rect x="0.0000%" y="405" width="0.7307%" height="15" fill="rgb(209,103,24)" fg:x="0" fg:w="47"/><text x="0.1200%" y="415.50"></text></g><g><title>PyEval_EvalCode (47 samples, 0.73%)</title><rect x="0.0000%" y="389" width="0.7307%" height="15" fill="rgb(229,88,8)" fg:x="0" fg:w="47"/><text x="0.1200%" y="399.50"></text></g><g><title>_PyEval_EvalFrameDefault (47 samples, 0.73%)</title><rect x="0.0000%" y="373" width="0.7307%" height="15" fill="rgb(213,181,19)" fg:x="0" fg:w="47"/><text x="0.1200%" y="383.50"></text></g><g><title>PyObject_Vectorcall (47 samples, 0.73%)</title><rect x="0.0000%" y="357" width="0.7307%" height="15" fill="rgb(254,191,54)" fg:x="0" fg:w="47"/><text x="0.1200%" y="367.50"></text></g><g><title>_cffi_f_run_Rmainloop (47 samples, 0.73%)</title><rect x="0.0000%" y="341" width="0.7307%" height="15" fill="rgb(241,83,37)" fg:x="0" fg:w="47"/><text x="0.1200%" y="351.50"></text></g><g><title>run_Rmainloop (47 samples, 0.73%)</title><rect x="0.0000%" y="325" width="0.7307%" height="15" fill="rgb(233,36,39)" fg:x="0" fg:w="47"/><text x="0.1200%" y="335.50"></text></g><g><title>run_Rmainloop (47 samples, 0.73%)</title><rect x="0.0000%" y="309" width="0.7307%" height="15" fill="rgb(226,3,54)" fg:x="0" fg:w="47"/><text x="0.1200%" y="319.50"></text></g><g><title>Rf_ReplIteration (47 samples, 0.73%)</title><rect x="0.0000%" y="293" width="0.7307%" height="15" fill="rgb(245,192,40)" fg:x="0" fg:w="47"/><text x="0.1200%" y="303.50"></text></g><g><title>Rf_eval (47 samples, 0.73%)</title><rect x="0.0000%" y="277" width="0.7307%" height="15" fill="rgb(238,167,29)" fg:x="0" fg:w="47"/><text x="0.1200%" y="287.50"></text></g><g><title>Rf_eval (47 samples, 0.73%)</title><rect x="0.0000%" y="261" width="0.7307%" height="15" fill="rgb(232,182,51)" fg:x="0" fg:w="47"/><text x="0.1200%" y="271.50"></text></g><g><title>Rf_eval (47 samples, 0.73%)</title><rect x="0.0000%" y="245" width="0.7307%" height="15" fill="rgb(231,60,39)" fg:x="0" fg:w="47"/><text x="0.1200%" y="255.50"></text></g><g><title>Rf_eval (47 samples, 0.73%)</title><rect x="0.0000%" y="229" width="0.7307%" height="15" fill="rgb(208,69,12)" fg:x="0" fg:w="47"/><text x="0.1200%" y="239.50"></text></g><g><title>wrap__pprof_kractor_reads (47 samples, 0.73%)</title><rect x="0.0000%" y="213" width="0.7307%" height="15" fill="rgb(235,93,37)" fg:x="0" fg:w="47"/><text x="0.1200%" y="223.50"></text></g><g><title>rsahmi::kractor::kractor_reads (47 samples, 0.73%)</title><rect x="0.0000%" y="197" width="0.7307%" height="15" fill="rgb(213,116,39)" fg:x="0" fg:w="47"/><text x="0.1200%" y="207.50"></text></g><g><title>rsahmi::kractor::reads::read_sequence_id_from_koutput (36 samples, 0.56%)</title><rect x="0.1710%" y="181" width="0.5597%" height="15" fill="rgb(222,207,29)" fg:x="11" fg:w="36"/><text x="0.2910%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (36 samples, 0.56%)</title><rect x="0.1710%" y="165" width="0.5597%" height="15" fill="rgb(206,96,30)" fg:x="11" fg:w="36"/><text x="0.2910%" y="175.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (19 samples, 0.30%)</title><rect x="0.4353%" y="149" width="0.2954%" height="15" fill="rgb(218,138,4)" fg:x="28" fg:w="19"/><text x="0.5553%" y="159.50"></text></g><g><title>malloc (9 samples, 0.14%)</title><rect x="0.5908%" y="133" width="0.1399%" height="15" fill="rgb(250,191,14)" fg:x="38" fg:w="9"/><text x="0.7108%" y="143.50"></text></g><g><title>__tls_get_addr (1 samples, 0.02%)</title><rect x="3.9646%" y="373" width="0.0155%" height="15" fill="rgb(239,60,40)" fg:x="255" fg:w="1"/><text x="4.0846%" y="383.50"></text></g><g><title>crossbeam_channel::flavors::array::Channel&lt;T&gt;::recv::{{closure}} (39 samples, 0.61%)</title><rect x="3.9801%" y="373" width="0.6063%" height="15" fill="rgb(206,27,48)" fg:x="256" fg:w="39"/><text x="4.1001%" y="383.50"></text></g><g><title>std::thread::park (37 samples, 0.58%)</title><rect x="4.0112%" y="357" width="0.5752%" height="15" fill="rgb(225,35,8)" fg:x="258" fg:w="37"/><text x="4.1312%" y="367.50"></text></g><g><title>std::thread::Thread::park (35 samples, 0.54%)</title><rect x="4.0423%" y="341" width="0.5442%" height="15" fill="rgb(250,213,24)" fg:x="260" fg:w="35"/><text x="4.1623%" y="351.50"></text></g><g><title>std::sys::sync::thread_parking::futex::Parker::park (35 samples, 0.54%)</title><rect x="4.0423%" y="325" width="0.5442%" height="15" fill="rgb(247,123,22)" fg:x="260" fg:w="35"/><text x="4.1623%" y="335.50"></text></g><g><title>std::sys::pal::unix::futex::futex_wait (35 samples, 0.54%)</title><rect x="4.0423%" y="309" width="0.5442%" height="15" fill="rgb(231,138,38)" fg:x="260" fg:w="35"/><text x="4.1623%" y="319.50"></text></g><g><title>syscall (35 samples, 0.54%)</title><rect x="4.0423%" y="293" width="0.5442%" height="15" fill="rgb(231,145,46)" fg:x="260" fg:w="35"/><text x="4.1623%" y="303.50"></text></g><g><title>&lt;crossbeam_channel::channel::IntoIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (271 samples, 4.21%)</title><rect x="0.8396%" y="405" width="4.2133%" height="15" fill="rgb(251,118,11)" fg:x="54" fg:w="271"/><text x="0.9596%" y="415.50">&lt;crossbeam_c..</text></g><g><title>crossbeam_channel::flavors::array::Channel&lt;T&gt;::recv (270 samples, 4.20%)</title><rect x="0.8551%" y="389" width="4.1978%" height="15" fill="rgb(217,147,25)" fg:x="55" fg:w="270"/><text x="0.9751%" y="399.50">crossbeam_ch..</text></g><g><title>sched_yield (30 samples, 0.47%)</title><rect x="4.5864%" y="373" width="0.4664%" height="15" fill="rgb(247,81,37)" fg:x="295" fg:w="30"/><text x="4.7064%" y="383.50"></text></g><g><title>cfree (2 samples, 0.03%)</title><rect x="5.0529%" y="405" width="0.0311%" height="15" fill="rgb(209,12,38)" fg:x="325" fg:w="2"/><text x="5.1729%" y="415.50"></text></g><g><title>cfree (3 samples, 0.05%)</title><rect x="26.9434%" y="309" width="0.0466%" height="15" fill="rgb(227,1,9)" fg:x="1733" fg:w="3"/><text x="27.0634%" y="319.50"></text></g><g><title>__tls_get_addr (1 samples, 0.02%)</title><rect x="27.1300%" y="245" width="0.0155%" height="15" fill="rgb(248,47,43)" fg:x="1745" fg:w="1"/><text x="27.2500%" y="255.50"></text></g><g><title>crossbeam_channel::waker::Waker::notify (3 samples, 0.05%)</title><rect x="27.1455%" y="245" width="0.0466%" height="15" fill="rgb(221,10,30)" fg:x="1746" fg:w="3"/><text x="27.2655%" y="255.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.05%)</title><rect x="27.1455%" y="229" width="0.0466%" height="15" fill="rgb(210,229,1)" fg:x="1746" fg:w="3"/><text x="27.2655%" y="239.50"></text></g><g><title>std::sys::pal::unix::futex::futex_wake (282 samples, 4.38%)</title><rect x="27.1922%" y="245" width="4.3843%" height="15" fill="rgb(222,148,37)" fg:x="1749" fg:w="282"/><text x="27.3122%" y="255.50">std::sys::pal..</text></g><g><title>syscall (282 samples, 4.38%)</title><rect x="27.1922%" y="229" width="4.3843%" height="15" fill="rgb(234,67,33)" fg:x="1749" fg:w="282"/><text x="27.3122%" y="239.50">syscall</text></g><g><title>crossbeam_channel::channel::Sender&lt;T&gt;::send (292 samples, 4.54%)</title><rect x="27.0522%" y="293" width="4.5398%" height="15" fill="rgb(247,98,35)" fg:x="1740" fg:w="292"/><text x="27.1722%" y="303.50">crossbeam_chan..</text></g><g><title>crossbeam_channel::flavors::array::Channel&lt;T&gt;::send (292 samples, 4.54%)</title><rect x="27.0522%" y="277" width="4.5398%" height="15" fill="rgb(247,138,52)" fg:x="1740" fg:w="292"/><text x="27.1722%" y="287.50">crossbeam_chan..</text></g><g><title>crossbeam_channel::waker::SyncWaker::notify (290 samples, 4.51%)</title><rect x="27.0833%" y="261" width="4.5087%" height="15" fill="rgb(213,79,30)" fg:x="1742" fg:w="290"/><text x="27.2033%" y="271.50">crossbeam_cha..</text></g><g><title>syscall (1 samples, 0.02%)</title><rect x="31.5765%" y="245" width="0.0155%" height="15" fill="rgb(246,177,23)" fg:x="2031" fg:w="1"/><text x="31.6965%" y="255.50"></text></g><g><title>rsahmi::batchsender::BatchSender&lt;T&gt;::send (302 samples, 4.70%)</title><rect x="26.9900%" y="309" width="4.6953%" height="15" fill="rgb(230,62,27)" fg:x="1736" fg:w="302"/><text x="27.1100%" y="319.50">rsahmi::batchs..</text></g><g><title>malloc (6 samples, 0.09%)</title><rect x="31.5920%" y="293" width="0.0933%" height="15" fill="rgb(216,154,8)" fg:x="2032" fg:w="6"/><text x="31.7120%" y="303.50"></text></g><g><title>rsahmi::parser::fastq::reader::FastqReader&lt;S&gt;::read_head (135 samples, 2.10%)</title><rect x="31.6853%" y="309" width="2.0989%" height="15" fill="rgb(244,35,45)" fg:x="2038" fg:w="135"/><text x="31.8053%" y="319.50">rsahm..</text></g><g><title>memchr::arch::x86_64::memchr::memchr2_raw::find_avx2 (81 samples, 1.26%)</title><rect x="32.5249%" y="293" width="1.2593%" height="15" fill="rgb(251,115,12)" fg:x="2092" fg:w="81"/><text x="32.6449%" y="303.50">me..</text></g><g><title>memchr::arch::x86_64::avx2::memchr::Two::find_raw (56 samples, 0.87%)</title><rect x="32.9136%" y="277" width="0.8706%" height="15" fill="rgb(240,54,50)" fg:x="2117" fg:w="56"/><text x="33.0336%" y="287.50">m..</text></g><g><title>memchr::arch::x86_64::avx2::memchr::Two::find_raw_avx2 (48 samples, 0.75%)</title><rect x="33.0379%" y="261" width="0.7463%" height="15" fill="rgb(233,84,52)" fg:x="2125" fg:w="48"/><text x="33.1579%" y="271.50"></text></g><g><title>&lt;rayon::iter::map_with::MapWithFolder&lt;C,U,F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume (1,886 samples, 29.32%)</title><rect x="5.1617%" y="325" width="29.3221%" height="15" fill="rgb(207,117,47)" fg:x="332" fg:w="1886"/><text x="5.2817%" y="335.50">&lt;rayon::iter::map_with::MapWithFolder&lt;C,U,F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume</text></g><g><title>rsahmi::parser::fastq::reader::FastqReader&lt;S&gt;::read_tail (45 samples, 0.70%)</title><rect x="33.7842%" y="309" width="0.6996%" height="15" fill="rgb(249,43,39)" fg:x="2173" fg:w="45"/><text x="33.9042%" y="319.50"></text></g><g><title>__rustc::__rdl_alloc (1 samples, 0.02%)</title><rect x="36.1163%" y="277" width="0.0155%" height="15" fill="rgb(209,38,44)" fg:x="2323" fg:w="1"/><text x="36.2363%" y="287.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.02%)</title><rect x="36.1163%" y="261" width="0.0155%" height="15" fill="rgb(236,212,23)" fg:x="2323" fg:w="1"/><text x="36.2363%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (26 samples, 0.40%)</title><rect x="36.1318%" y="277" width="0.4042%" height="15" fill="rgb(242,79,21)" fg:x="2324" fg:w="26"/><text x="36.2518%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (26 samples, 0.40%)</title><rect x="36.1318%" y="261" width="0.4042%" height="15" fill="rgb(211,96,35)" fg:x="2324" fg:w="26"/><text x="36.2518%" y="271.50"></text></g><g><title>__libc_realloc (23 samples, 0.36%)</title><rect x="36.1785%" y="245" width="0.3576%" height="15" fill="rgb(253,215,40)" fg:x="2327" fg:w="23"/><text x="36.2985%" y="255.50"></text></g><g><title>malloc (4 samples, 0.06%)</title><rect x="36.5361%" y="277" width="0.0622%" height="15" fill="rgb(211,81,21)" fg:x="2350" fg:w="4"/><text x="36.6561%" y="287.50"></text></g><g><title>rsahmi::kractor::reads::mmap::reader::SliceChunkReader::chunk_reader (2,073 samples, 32.23%)</title><rect x="34.4838%" y="325" width="32.2295%" height="15" fill="rgb(208,190,38)" fg:x="2218" fg:w="2073"/><text x="34.6038%" y="335.50">rsahmi::kractor::reads::mmap::reader::SliceChunkReader::chunk_reader</text></g><g><title>rsahmi::kractor::reads::mmap::reader::slice_chunk (2,073 samples, 32.23%)</title><rect x="34.4838%" y="309" width="32.2295%" height="15" fill="rgb(235,213,38)" fg:x="2218" fg:w="2073"/><text x="34.6038%" y="319.50">rsahmi::kractor::reads::mmap::reader::slice_chunk</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2,072 samples, 32.21%)</title><rect x="34.4994%" y="293" width="32.2139%" height="15" fill="rgb(237,122,38)" fg:x="2219" fg:w="2072"/><text x="34.6194%" y="303.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_avx2 (1,937 samples, 30.12%)</title><rect x="36.5983%" y="277" width="30.1150%" height="15" fill="rgb(244,218,35)" fg:x="2354" fg:w="1937"/><text x="36.7183%" y="287.50">memchr::arch::x86_64::memchr::memchr_raw::find_avx2</text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::find_raw (1,873 samples, 29.12%)</title><rect x="37.5933%" y="261" width="29.1200%" height="15" fill="rgb(240,68,47)" fg:x="2418" fg:w="1873"/><text x="37.7133%" y="271.50">memchr::arch::x86_64::avx2::memchr::One::find_raw</text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::find_raw_avx2 (1,816 samples, 28.23%)</title><rect x="38.4795%" y="245" width="28.2338%" height="15" fill="rgb(210,16,53)" fg:x="2475" fg:w="1816"/><text x="38.5995%" y="255.50">memchr::arch::x86_64::avx2::memchr::One::find_raw_avx2</text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock_contended (14 samples, 0.22%)</title><rect x="66.7133%" y="325" width="0.2177%" height="15" fill="rgb(235,124,12)" fg:x="4291" fg:w="14"/><text x="66.8333%" y="335.50"></text></g><g><title>std::sys::pal::unix::futex::futex_wait (14 samples, 0.22%)</title><rect x="66.7133%" y="309" width="0.2177%" height="15" fill="rgb(224,169,11)" fg:x="4291" fg:w="14"/><text x="66.8333%" y="319.50"></text></g><g><title>syscall (13 samples, 0.20%)</title><rect x="66.7289%" y="293" width="0.2021%" height="15" fill="rgb(250,166,2)" fg:x="4292" fg:w="13"/><text x="66.8489%" y="303.50"></text></g><g><title>&lt;&amp;rayon::iter::par_bridge::IterParallelProducer&lt;Iter&gt; as rayon::iter::plumbing::UnindexedProducer&gt;::fold_with (4,062 samples, 63.15%)</title><rect x="5.0840%" y="341" width="63.1530%" height="15" fill="rgb(242,216,29)" fg:x="327" fg:w="4062"/><text x="5.2040%" y="351.50">&lt;&amp;rayon::iter::par_bridge::IterParallelProducer&lt;Iter&gt; as rayon::iter::plumbing::UnindexedProducer&gt;::fold_with</text></g><g><title>syscall (84 samples, 1.31%)</title><rect x="66.9310%" y="325" width="1.3060%" height="15" fill="rgb(230,116,27)" fg:x="4305" fg:w="84"/><text x="67.0510%" y="335.50">sy..</text></g><g><title>rsahmi::batchsender::BatchSender&lt;T&gt;::send (22 samples, 0.34%)</title><rect x="69.4963%" y="277" width="0.3420%" height="15" fill="rgb(228,99,48)" fg:x="4470" fg:w="22"/><text x="69.6163%" y="287.50"></text></g><g><title>crossbeam_channel::channel::Sender&lt;T&gt;::send (22 samples, 0.34%)</title><rect x="69.4963%" y="261" width="0.3420%" height="15" fill="rgb(253,11,6)" fg:x="4470" fg:w="22"/><text x="69.6163%" y="271.50"></text></g><g><title>crossbeam_channel::flavors::array::Channel&lt;T&gt;::send (22 samples, 0.34%)</title><rect x="69.4963%" y="245" width="0.3420%" height="15" fill="rgb(247,143,39)" fg:x="4470" fg:w="22"/><text x="69.6163%" y="255.50"></text></g><g><title>crossbeam_channel::waker::SyncWaker::notify (21 samples, 0.33%)</title><rect x="69.5118%" y="229" width="0.3265%" height="15" fill="rgb(236,97,10)" fg:x="4471" fg:w="21"/><text x="69.6318%" y="239.50"></text></g><g><title>std::sys::pal::unix::futex::futex_wake (18 samples, 0.28%)</title><rect x="69.5585%" y="213" width="0.2799%" height="15" fill="rgb(233,208,19)" fg:x="4474" fg:w="18"/><text x="69.6785%" y="223.50"></text></g><g><title>syscall (18 samples, 0.28%)</title><rect x="69.5585%" y="197" width="0.2799%" height="15" fill="rgb(216,164,2)" fg:x="4474" fg:w="18"/><text x="69.6785%" y="207.50"></text></g><g><title>rsahmi::parser::fastq::reader::FastqReader&lt;S&gt;::read_head (9 samples, 0.14%)</title><rect x="69.8383%" y="277" width="0.1399%" height="15" fill="rgb(220,129,5)" fg:x="4492" fg:w="9"/><text x="69.9583%" y="287.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr2_raw::find_avx2 (8 samples, 0.12%)</title><rect x="69.8539%" y="261" width="0.1244%" height="15" fill="rgb(242,17,10)" fg:x="4493" fg:w="8"/><text x="69.9739%" y="271.50"></text></g><g><title>memchr::arch::x86_64::avx2::memchr::Two::find_raw (5 samples, 0.08%)</title><rect x="69.9005%" y="245" width="0.0777%" height="15" fill="rgb(242,107,0)" fg:x="4496" fg:w="5"/><text x="70.0205%" y="255.50"></text></g><g><title>memchr::arch::x86_64::avx2::memchr::Two::find_raw_avx2 (5 samples, 0.08%)</title><rect x="69.9005%" y="229" width="0.0777%" height="15" fill="rgb(251,28,31)" fg:x="4496" fg:w="5"/><text x="70.0205%" y="239.50"></text></g><g><title>&lt;rayon::iter::map_with::MapWithFolder&lt;C,U,F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume (114 samples, 1.77%)</title><rect x="68.2525%" y="293" width="1.7724%" height="15" fill="rgb(233,223,10)" fg:x="4390" fg:w="114"/><text x="68.3725%" y="303.50">&lt;ray..</text></g><g><title>rsahmi::parser::fastq::reader::FastqReader&lt;S&gt;::read_tail (3 samples, 0.05%)</title><rect x="69.9782%" y="277" width="0.0466%" height="15" fill="rgb(215,21,27)" fg:x="4501" fg:w="3"/><text x="70.0982%" y="287.50"></text></g><g><title>rsahmi::kractor::reads::mmap::reader::SliceChunkReader::chunk_reader (132 samples, 2.05%)</title><rect x="70.0249%" y="293" width="2.0522%" height="15" fill="rgb(232,23,21)" fg:x="4504" fg:w="132"/><text x="70.1449%" y="303.50">rsahm..</text></g><g><title>rsahmi::kractor::reads::mmap::reader::slice_chunk (132 samples, 2.05%)</title><rect x="70.0249%" y="277" width="2.0522%" height="15" fill="rgb(244,5,23)" fg:x="4504" fg:w="132"/><text x="70.1449%" y="287.50">rsahm..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (132 samples, 2.05%)</title><rect x="70.0249%" y="261" width="2.0522%" height="15" fill="rgb(226,81,46)" fg:x="4504" fg:w="132"/><text x="70.1449%" y="271.50">&lt;allo..</text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_avx2 (128 samples, 1.99%)</title><rect x="70.0871%" y="245" width="1.9900%" height="15" fill="rgb(247,70,30)" fg:x="4508" fg:w="128"/><text x="70.2071%" y="255.50">memch..</text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::find_raw (123 samples, 1.91%)</title><rect x="70.1648%" y="229" width="1.9123%" height="15" fill="rgb(212,68,19)" fg:x="4513" fg:w="123"/><text x="70.2848%" y="239.50">memc..</text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::find_raw_avx2 (118 samples, 1.83%)</title><rect x="70.2425%" y="213" width="1.8346%" height="15" fill="rgb(240,187,13)" fg:x="4518" fg:w="118"/><text x="70.3625%" y="223.50">memc..</text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock_contended (1 samples, 0.02%)</title><rect x="72.0771%" y="293" width="0.0155%" height="15" fill="rgb(223,113,26)" fg:x="4636" fg:w="1"/><text x="72.1971%" y="303.50"></text></g><g><title>std::sys::pal::unix::futex::futex_wait (1 samples, 0.02%)</title><rect x="72.0771%" y="277" width="0.0155%" height="15" fill="rgb(206,192,2)" fg:x="4636" fg:w="1"/><text x="72.1971%" y="287.50"></text></g><g><title>syscall (1 samples, 0.02%)</title><rect x="72.0771%" y="261" width="0.0155%" height="15" fill="rgb(241,108,4)" fg:x="4636" fg:w="1"/><text x="72.1971%" y="271.50"></text></g><g><title>&lt;&amp;rayon::iter::par_bridge::IterParallelProducer&lt;Iter&gt; as rayon::iter::plumbing::UnindexedProducer&gt;::fold_with (253 samples, 3.93%)</title><rect x="68.2369%" y="309" width="3.9335%" height="15" fill="rgb(247,173,49)" fg:x="4389" fg:w="253"/><text x="68.3569%" y="319.50">&lt;&amp;rayon::it..</text></g><g><title>syscall (5 samples, 0.08%)</title><rect x="72.0927%" y="293" width="0.0777%" height="15" fill="rgb(224,114,35)" fg:x="4637" fg:w="5"/><text x="72.2127%" y="303.50"></text></g><g><title>crossbeam_channel::channel::Sender&lt;T&gt;::send (62 samples, 0.96%)</title><rect x="76.1505%" y="229" width="0.9639%" height="15" fill="rgb(245,159,27)" fg:x="4898" fg:w="62"/><text x="76.2705%" y="239.50">c..</text></g><g><title>crossbeam_channel::flavors::array::Channel&lt;T&gt;::send (62 samples, 0.96%)</title><rect x="76.1505%" y="213" width="0.9639%" height="15" fill="rgb(245,172,44)" fg:x="4898" fg:w="62"/><text x="76.2705%" y="223.50">c..</text></g><g><title>crossbeam_channel::waker::SyncWaker::notify (60 samples, 0.93%)</title><rect x="76.1816%" y="197" width="0.9328%" height="15" fill="rgb(236,23,11)" fg:x="4900" fg:w="60"/><text x="76.3016%" y="207.50">c..</text></g><g><title>std::sys::pal::unix::futex::futex_wake (57 samples, 0.89%)</title><rect x="76.2282%" y="181" width="0.8862%" height="15" fill="rgb(205,117,38)" fg:x="4903" fg:w="57"/><text x="76.3482%" y="191.50">s..</text></g><g><title>syscall (57 samples, 0.89%)</title><rect x="76.2282%" y="165" width="0.8862%" height="15" fill="rgb(237,72,25)" fg:x="4903" fg:w="57"/><text x="76.3482%" y="175.50">s..</text></g><g><title>rsahmi::batchsender::BatchSender&lt;T&gt;::send (64 samples, 1.00%)</title><rect x="76.1505%" y="245" width="0.9950%" height="15" fill="rgb(244,70,9)" fg:x="4898" fg:w="64"/><text x="76.2705%" y="255.50">r..</text></g><g><title>malloc (2 samples, 0.03%)</title><rect x="77.1144%" y="229" width="0.0311%" height="15" fill="rgb(217,125,39)" fg:x="4960" fg:w="2"/><text x="77.2344%" y="239.50"></text></g><g><title>rsahmi::parser::fastq::reader::FastqReader&lt;S&gt;::read_head (25 samples, 0.39%)</title><rect x="77.1455%" y="245" width="0.3887%" height="15" fill="rgb(235,36,10)" fg:x="4962" fg:w="25"/><text x="77.2655%" y="255.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr2_raw::find_avx2 (14 samples, 0.22%)</title><rect x="77.3165%" y="229" width="0.2177%" height="15" fill="rgb(251,123,47)" fg:x="4973" fg:w="14"/><text x="77.4365%" y="239.50"></text></g><g><title>memchr::arch::x86_64::avx2::memchr::Two::find_raw (10 samples, 0.16%)</title><rect x="77.3787%" y="213" width="0.1555%" height="15" fill="rgb(221,13,13)" fg:x="4977" fg:w="10"/><text x="77.4987%" y="223.50"></text></g><g><title>memchr::arch::x86_64::avx2::memchr::Two::find_raw_avx2 (7 samples, 0.11%)</title><rect x="77.4254%" y="197" width="0.1088%" height="15" fill="rgb(238,131,9)" fg:x="4980" fg:w="7"/><text x="77.5454%" y="207.50"></text></g><g><title>&lt;rayon::iter::map_with::MapWithFolder&lt;C,U,F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume (353 samples, 5.49%)</title><rect x="72.1859%" y="261" width="5.4882%" height="15" fill="rgb(211,50,8)" fg:x="4643" fg:w="353"/><text x="72.3059%" y="271.50">&lt;rayon::iter::map..</text></g><g><title>rsahmi::parser::fastq::reader::FastqReader&lt;S&gt;::read_tail (9 samples, 0.14%)</title><rect x="77.5342%" y="245" width="0.1399%" height="15" fill="rgb(245,182,24)" fg:x="4987" fg:w="9"/><text x="77.6542%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.02%)</title><rect x="77.8918%" y="213" width="0.0155%" height="15" fill="rgb(242,14,37)" fg:x="5010" fg:w="1"/><text x="78.0118%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.02%)</title><rect x="77.8918%" y="197" width="0.0155%" height="15" fill="rgb(246,228,12)" fg:x="5010" fg:w="1"/><text x="78.0118%" y="207.50"></text></g><g><title>__libc_realloc (1 samples, 0.02%)</title><rect x="77.8918%" y="181" width="0.0155%" height="15" fill="rgb(213,55,15)" fg:x="5010" fg:w="1"/><text x="78.0118%" y="191.50"></text></g><g><title>malloc (1 samples, 0.02%)</title><rect x="77.9073%" y="213" width="0.0155%" height="15" fill="rgb(209,9,3)" fg:x="5011" fg:w="1"/><text x="78.0273%" y="223.50"></text></g><g><title>rsahmi::kractor::reads::mmap::reader::SliceChunkReader::chunk_reader (350 samples, 5.44%)</title><rect x="77.6741%" y="261" width="5.4415%" height="15" fill="rgb(230,59,30)" fg:x="4996" fg:w="350"/><text x="77.7941%" y="271.50">rsahmi::kractor::..</text></g><g><title>rsahmi::kractor::reads::mmap::reader::slice_chunk (350 samples, 5.44%)</title><rect x="77.6741%" y="245" width="5.4415%" height="15" fill="rgb(209,121,21)" fg:x="4996" fg:w="350"/><text x="77.7941%" y="255.50">rsahmi::kractor::..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (350 samples, 5.44%)</title><rect x="77.6741%" y="229" width="5.4415%" height="15" fill="rgb(220,109,13)" fg:x="4996" fg:w="350"/><text x="77.7941%" y="239.50">&lt;alloc::vec::Vec&lt;..</text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_avx2 (334 samples, 5.19%)</title><rect x="77.9229%" y="213" width="5.1928%" height="15" fill="rgb(232,18,1)" fg:x="5012" fg:w="334"/><text x="78.0429%" y="223.50">memchr::arch::x8..</text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::find_raw (326 samples, 5.07%)</title><rect x="78.0473%" y="197" width="5.0684%" height="15" fill="rgb(215,41,42)" fg:x="5020" fg:w="326"/><text x="78.1673%" y="207.50">memchr::arch::x..</text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::find_raw_avx2 (313 samples, 4.87%)</title><rect x="78.2494%" y="181" width="4.8663%" height="15" fill="rgb(224,123,36)" fg:x="5033" fg:w="313"/><text x="78.3694%" y="191.50">memchr::arch::x..</text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock_contended (2 samples, 0.03%)</title><rect x="83.1157%" y="261" width="0.0311%" height="15" fill="rgb(240,125,3)" fg:x="5346" fg:w="2"/><text x="83.2357%" y="271.50"></text></g><g><title>std::sys::pal::unix::futex::futex_wait (2 samples, 0.03%)</title><rect x="83.1157%" y="245" width="0.0311%" height="15" fill="rgb(205,98,50)" fg:x="5346" fg:w="2"/><text x="83.2357%" y="255.50"></text></g><g><title>syscall (2 samples, 0.03%)</title><rect x="83.1157%" y="229" width="0.0311%" height="15" fill="rgb(205,185,37)" fg:x="5346" fg:w="2"/><text x="83.2357%" y="239.50"></text></g><g><title>&lt;&amp;rayon::iter::par_bridge::IterParallelProducer&lt;Iter&gt; as rayon::iter::plumbing::UnindexedProducer&gt;::fold_with (724 samples, 11.26%)</title><rect x="72.1704%" y="277" width="11.2562%" height="15" fill="rgb(238,207,15)" fg:x="4642" fg:w="724"/><text x="72.2904%" y="287.50">&lt;&amp;rayon::iter::par_bridge::IterParall..</text></g><g><title>syscall (18 samples, 0.28%)</title><rect x="83.1468%" y="261" width="0.2799%" height="15" fill="rgb(213,199,42)" fg:x="5348" fg:w="18"/><text x="83.2668%" y="271.50"></text></g><g><title>crossbeam_channel::channel::Sender&lt;T&gt;::send (47 samples, 0.73%)</title><rect x="86.1629%" y="197" width="0.7307%" height="15" fill="rgb(235,201,11)" fg:x="5542" fg:w="47"/><text x="86.2829%" y="207.50"></text></g><g><title>crossbeam_channel::flavors::array::Channel&lt;T&gt;::send (47 samples, 0.73%)</title><rect x="86.1629%" y="181" width="0.7307%" height="15" fill="rgb(207,46,11)" fg:x="5542" fg:w="47"/><text x="86.2829%" y="191.50"></text></g><g><title>crossbeam_channel::waker::SyncWaker::notify (47 samples, 0.73%)</title><rect x="86.1629%" y="165" width="0.7307%" height="15" fill="rgb(241,35,35)" fg:x="5542" fg:w="47"/><text x="86.2829%" y="175.50"></text></g><g><title>std::sys::pal::unix::futex::futex_wake (46 samples, 0.72%)</title><rect x="86.1785%" y="149" width="0.7152%" height="15" fill="rgb(243,32,47)" fg:x="5543" fg:w="46"/><text x="86.2985%" y="159.50"></text></g><g><title>syscall (46 samples, 0.72%)</title><rect x="86.1785%" y="133" width="0.7152%" height="15" fill="rgb(247,202,23)" fg:x="5543" fg:w="46"/><text x="86.2985%" y="143.50"></text></g><g><title>rsahmi::batchsender::BatchSender&lt;T&gt;::send (49 samples, 0.76%)</title><rect x="86.1629%" y="213" width="0.7618%" height="15" fill="rgb(219,102,11)" fg:x="5542" fg:w="49"/><text x="86.2829%" y="223.50"></text></g><g><title>malloc (2 samples, 0.03%)</title><rect x="86.8937%" y="197" width="0.0311%" height="15" fill="rgb(243,110,44)" fg:x="5589" fg:w="2"/><text x="87.0137%" y="207.50"></text></g><g><title>rsahmi::parser::fastq::reader::FastqReader&lt;S&gt;::read_head (12 samples, 0.19%)</title><rect x="86.9248%" y="213" width="0.1866%" height="15" fill="rgb(222,74,54)" fg:x="5591" fg:w="12"/><text x="87.0448%" y="223.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr2_raw::find_avx2 (6 samples, 0.09%)</title><rect x="87.0180%" y="197" width="0.0933%" height="15" fill="rgb(216,99,12)" fg:x="5597" fg:w="6"/><text x="87.1380%" y="207.50"></text></g><g><title>memchr::arch::x86_64::avx2::memchr::Two::find_raw (2 samples, 0.03%)</title><rect x="87.0802%" y="181" width="0.0311%" height="15" fill="rgb(226,22,26)" fg:x="5601" fg:w="2"/><text x="87.2002%" y="191.50"></text></g><g><title>memchr::arch::x86_64::avx2::memchr::Two::find_raw_avx2 (1 samples, 0.02%)</title><rect x="87.0958%" y="165" width="0.0155%" height="15" fill="rgb(217,163,10)" fg:x="5602" fg:w="1"/><text x="87.2158%" y="175.50"></text></g><g><title>&lt;rayon::iter::map_with::MapWithFolder&lt;C,U,F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume (242 samples, 3.76%)</title><rect x="83.4422%" y="229" width="3.7624%" height="15" fill="rgb(213,25,53)" fg:x="5367" fg:w="242"/><text x="83.5622%" y="239.50">&lt;rayon::ite..</text></g><g><title>rsahmi::parser::fastq::reader::FastqReader&lt;S&gt;::read_tail (6 samples, 0.09%)</title><rect x="87.1113%" y="213" width="0.0933%" height="15" fill="rgb(252,105,26)" fg:x="5603" fg:w="6"/><text x="87.2313%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (6 samples, 0.09%)</title><rect x="87.3134%" y="181" width="0.0933%" height="15" fill="rgb(220,39,43)" fg:x="5616" fg:w="6"/><text x="87.4334%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (6 samples, 0.09%)</title><rect x="87.3134%" y="165" width="0.0933%" height="15" fill="rgb(229,68,48)" fg:x="5616" fg:w="6"/><text x="87.4334%" y="175.50"></text></g><g><title>__libc_realloc (5 samples, 0.08%)</title><rect x="87.3290%" y="149" width="0.0777%" height="15" fill="rgb(252,8,32)" fg:x="5617" fg:w="5"/><text x="87.4490%" y="159.50"></text></g><g><title>rsahmi::kractor::reads::mmap::reader::SliceChunkReader::chunk_reader (253 samples, 3.93%)</title><rect x="87.2046%" y="229" width="3.9335%" height="15" fill="rgb(223,20,43)" fg:x="5609" fg:w="253"/><text x="87.3246%" y="239.50">rsahmi::kra..</text></g><g><title>rsahmi::kractor::reads::mmap::reader::slice_chunk (252 samples, 3.92%)</title><rect x="87.2201%" y="213" width="3.9179%" height="15" fill="rgb(229,81,49)" fg:x="5610" fg:w="252"/><text x="87.3401%" y="223.50">rsahmi::kra..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (252 samples, 3.92%)</title><rect x="87.2201%" y="197" width="3.9179%" height="15" fill="rgb(236,28,36)" fg:x="5610" fg:w="252"/><text x="87.3401%" y="207.50">&lt;alloc::vec..</text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_avx2 (240 samples, 3.73%)</title><rect x="87.4067%" y="181" width="3.7313%" height="15" fill="rgb(249,185,26)" fg:x="5622" fg:w="240"/><text x="87.5267%" y="191.50">memchr::arc..</text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::find_raw (230 samples, 3.58%)</title><rect x="87.5622%" y="165" width="3.5759%" height="15" fill="rgb(249,174,33)" fg:x="5632" fg:w="230"/><text x="87.6822%" y="175.50">memchr::ar..</text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::find_raw_avx2 (224 samples, 3.48%)</title><rect x="87.6555%" y="149" width="3.4826%" height="15" fill="rgb(233,201,37)" fg:x="5638" fg:w="224"/><text x="87.7755%" y="159.50">memchr::ar..</text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock_contended (2 samples, 0.03%)</title><rect x="91.1381%" y="229" width="0.0311%" height="15" fill="rgb(221,78,26)" fg:x="5862" fg:w="2"/><text x="91.2581%" y="239.50"></text></g><g><title>std::sys::pal::unix::futex::futex_wait (1 samples, 0.02%)</title><rect x="91.1536%" y="213" width="0.0155%" height="15" fill="rgb(250,127,30)" fg:x="5863" fg:w="1"/><text x="91.2736%" y="223.50"></text></g><g><title>syscall (1 samples, 0.02%)</title><rect x="91.1536%" y="197" width="0.0155%" height="15" fill="rgb(230,49,44)" fg:x="5863" fg:w="1"/><text x="91.2736%" y="207.50"></text></g><g><title>&lt;&amp;rayon::iter::par_bridge::IterParallelProducer&lt;Iter&gt; as rayon::iter::plumbing::UnindexedProducer&gt;::fold_with (509 samples, 7.91%)</title><rect x="83.4266%" y="245" width="7.9136%" height="15" fill="rgb(229,67,23)" fg:x="5366" fg:w="509"/><text x="83.5466%" y="255.50">&lt;&amp;rayon::iter::par_bridge..</text></g><g><title>syscall (11 samples, 0.17%)</title><rect x="91.1692%" y="229" width="0.1710%" height="15" fill="rgb(249,83,47)" fg:x="5864" fg:w="11"/><text x="91.2892%" y="239.50"></text></g><g><title>cfree (2 samples, 0.03%)</title><rect x="92.7239%" y="117" width="0.0311%" height="15" fill="rgb(215,43,3)" fg:x="5964" fg:w="2"/><text x="92.8439%" y="127.50"></text></g><g><title>rsahmi::batchsender::BatchSender&lt;T&gt;::send (26 samples, 0.40%)</title><rect x="92.7550%" y="117" width="0.4042%" height="15" fill="rgb(238,154,13)" fg:x="5966" fg:w="26"/><text x="92.8750%" y="127.50"></text></g><g><title>crossbeam_channel::channel::Sender&lt;T&gt;::send (26 samples, 0.40%)</title><rect x="92.7550%" y="101" width="0.4042%" height="15" fill="rgb(219,56,2)" fg:x="5966" fg:w="26"/><text x="92.8750%" y="111.50"></text></g><g><title>crossbeam_channel::flavors::array::Channel&lt;T&gt;::send (25 samples, 0.39%)</title><rect x="92.7705%" y="85" width="0.3887%" height="15" fill="rgb(233,0,4)" fg:x="5967" fg:w="25"/><text x="92.8905%" y="95.50"></text></g><g><title>crossbeam_channel::waker::SyncWaker::notify (25 samples, 0.39%)</title><rect x="92.7705%" y="69" width="0.3887%" height="15" fill="rgb(235,30,7)" fg:x="5967" fg:w="25"/><text x="92.8905%" y="79.50"></text></g><g><title>std::sys::pal::unix::futex::futex_wake (25 samples, 0.39%)</title><rect x="92.7705%" y="53" width="0.3887%" height="15" fill="rgb(250,79,13)" fg:x="5967" fg:w="25"/><text x="92.8905%" y="63.50"></text></g><g><title>syscall (25 samples, 0.39%)</title><rect x="92.7705%" y="37" width="0.3887%" height="15" fill="rgb(211,146,34)" fg:x="5967" fg:w="25"/><text x="92.8905%" y="47.50"></text></g><g><title>rsahmi::parser::fastq::reader::FastqReader&lt;S&gt;::read_head (9 samples, 0.14%)</title><rect x="93.1592%" y="117" width="0.1399%" height="15" fill="rgb(228,22,38)" fg:x="5992" fg:w="9"/><text x="93.2792%" y="127.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr2_raw::find_avx2 (6 samples, 0.09%)</title><rect x="93.2058%" y="101" width="0.0933%" height="15" fill="rgb(235,168,5)" fg:x="5995" fg:w="6"/><text x="93.3258%" y="111.50"></text></g><g><title>memchr::arch::x86_64::avx2::memchr::Two::find_raw (6 samples, 0.09%)</title><rect x="93.2058%" y="85" width="0.0933%" height="15" fill="rgb(221,155,16)" fg:x="5995" fg:w="6"/><text x="93.3258%" y="95.50"></text></g><g><title>memchr::arch::x86_64::avx2::memchr::Two::find_raw_avx2 (3 samples, 0.05%)</title><rect x="93.2525%" y="69" width="0.0466%" height="15" fill="rgb(215,215,53)" fg:x="5998" fg:w="3"/><text x="93.3725%" y="79.50"></text></g><g><title>&lt;rayon::iter::map_with::MapWithFolder&lt;C,U,F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume (131 samples, 2.04%)</title><rect x="91.3402%" y="133" width="2.0367%" height="15" fill="rgb(223,4,10)" fg:x="5875" fg:w="131"/><text x="91.4602%" y="143.50">&lt;rayo..</text></g><g><title>rsahmi::parser::fastq::reader::FastqReader&lt;S&gt;::read_tail (5 samples, 0.08%)</title><rect x="93.2991%" y="117" width="0.0777%" height="15" fill="rgb(234,103,6)" fg:x="6001" fg:w="5"/><text x="93.4191%" y="127.50"></text></g><g><title>rsahmi::kractor::reads::mmap::reader::SliceChunkReader::chunk_reader (120 samples, 1.87%)</title><rect x="93.3769%" y="133" width="1.8657%" height="15" fill="rgb(227,97,0)" fg:x="6006" fg:w="120"/><text x="93.4969%" y="143.50">rsah..</text></g><g><title>rsahmi::kractor::reads::mmap::reader::slice_chunk (120 samples, 1.87%)</title><rect x="93.3769%" y="117" width="1.8657%" height="15" fill="rgb(234,150,53)" fg:x="6006" fg:w="120"/><text x="93.4969%" y="127.50">rsah..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (120 samples, 1.87%)</title><rect x="93.3769%" y="101" width="1.8657%" height="15" fill="rgb(228,201,54)" fg:x="6006" fg:w="120"/><text x="93.4969%" y="111.50">&lt;all..</text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_avx2 (118 samples, 1.83%)</title><rect x="93.4080%" y="85" width="1.8346%" height="15" fill="rgb(222,22,37)" fg:x="6008" fg:w="118"/><text x="93.5280%" y="95.50">memc..</text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::find_raw (115 samples, 1.79%)</title><rect x="93.4546%" y="69" width="1.7879%" height="15" fill="rgb(237,53,32)" fg:x="6011" fg:w="115"/><text x="93.5746%" y="79.50">memc..</text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::find_raw_avx2 (114 samples, 1.77%)</title><rect x="93.4701%" y="53" width="1.7724%" height="15" fill="rgb(233,25,53)" fg:x="6012" fg:w="114"/><text x="93.5901%" y="63.50">memc..</text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock_contended (3 samples, 0.05%)</title><rect x="95.2425%" y="133" width="0.0466%" height="15" fill="rgb(210,40,34)" fg:x="6126" fg:w="3"/><text x="95.3625%" y="143.50"></text></g><g><title>std::sys::pal::unix::futex::futex_wait (2 samples, 0.03%)</title><rect x="95.2581%" y="117" width="0.0311%" height="15" fill="rgb(241,220,44)" fg:x="6127" fg:w="2"/><text x="95.3781%" y="127.50"></text></g><g><title>syscall (2 samples, 0.03%)</title><rect x="95.2581%" y="101" width="0.0311%" height="15" fill="rgb(235,28,35)" fg:x="6127" fg:w="2"/><text x="95.3781%" y="111.50"></text></g><g><title>rayon::iter::plumbing::bridge_unindexed_producer_consumer (5,807 samples, 90.28%)</title><rect x="5.0840%" y="357" width="90.2830%" height="15" fill="rgb(210,56,17)" fg:x="327" fg:w="5807"/><text x="5.2040%" y="367.50">rayon::iter::plumbing::bridge_unindexed_producer_consumer</text></g><g><title>rayon_core::join::join_context::{{closure}} (1,745 samples, 27.13%)</title><rect x="68.2369%" y="341" width="27.1300%" height="15" fill="rgb(224,130,29)" fg:x="4389" fg:w="1745"/><text x="68.3569%" y="351.50">rayon_core::join::join_context::{{closure}}</text></g><g><title>rayon::iter::plumbing::bridge_unindexed_producer_consumer (1,745 samples, 27.13%)</title><rect x="68.2369%" y="325" width="27.1300%" height="15" fill="rgb(235,212,8)" fg:x="4389" fg:w="1745"/><text x="68.3569%" y="335.50">rayon::iter::plumbing::bridge_unindexed_producer_consumer</text></g><g><title>rayon_core::join::join_context::{{closure}} (1,492 samples, 23.20%)</title><rect x="72.1704%" y="309" width="23.1965%" height="15" fill="rgb(223,33,50)" fg:x="4642" fg:w="1492"/><text x="72.2904%" y="319.50">rayon_core::join::join_context::{{closure}}</text></g><g><title>rayon::iter::plumbing::bridge_unindexed_producer_consumer (1,492 samples, 23.20%)</title><rect x="72.1704%" y="293" width="23.1965%" height="15" fill="rgb(219,149,13)" fg:x="4642" fg:w="1492"/><text x="72.2904%" y="303.50">rayon::iter::plumbing::bridge_unindexed_producer_consumer</text></g><g><title>rayon_core::join::join_context::{{closure}} (768 samples, 11.94%)</title><rect x="83.4266%" y="277" width="11.9403%" height="15" fill="rgb(250,156,29)" fg:x="5366" fg:w="768"/><text x="83.5466%" y="287.50">rayon_core::join::join_context::{{closur..</text></g><g><title>rayon::iter::plumbing::bridge_unindexed_producer_consumer (768 samples, 11.94%)</title><rect x="83.4266%" y="261" width="11.9403%" height="15" fill="rgb(216,193,19)" fg:x="5366" fg:w="768"/><text x="83.5466%" y="271.50">rayon::iter::plumbing::bridge_unindexed_..</text></g><g><title>rayon_core::join::join_context::{{closure}} (259 samples, 4.03%)</title><rect x="91.3402%" y="245" width="4.0267%" height="15" fill="rgb(216,135,14)" fg:x="5875" fg:w="259"/><text x="91.4602%" y="255.50">rayon_core::..</text></g><g><title>rayon::iter::plumbing::bridge_unindexed_producer_consumer (259 samples, 4.03%)</title><rect x="91.3402%" y="229" width="4.0267%" height="15" fill="rgb(241,47,5)" fg:x="5875" fg:w="259"/><text x="91.4602%" y="239.50">rayon::iter:..</text></g><g><title>rayon_core::join::join_context::{{closure}} (259 samples, 4.03%)</title><rect x="91.3402%" y="213" width="4.0267%" height="15" fill="rgb(233,42,35)" fg:x="5875" fg:w="259"/><text x="91.4602%" y="223.50">rayon_core::..</text></g><g><title>rayon::iter::plumbing::bridge_unindexed_producer_consumer (259 samples, 4.03%)</title><rect x="91.3402%" y="197" width="4.0267%" height="15" fill="rgb(231,13,6)" fg:x="5875" fg:w="259"/><text x="91.4602%" y="207.50">rayon::iter:..</text></g><g><title>rayon_core::join::join_context::{{closure}} (259 samples, 4.03%)</title><rect x="91.3402%" y="181" width="4.0267%" height="15" fill="rgb(207,181,40)" fg:x="5875" fg:w="259"/><text x="91.4602%" y="191.50">rayon_core::..</text></g><g><title>rayon::iter::plumbing::bridge_unindexed_producer_consumer (259 samples, 4.03%)</title><rect x="91.3402%" y="165" width="4.0267%" height="15" fill="rgb(254,173,49)" fg:x="5875" fg:w="259"/><text x="91.4602%" y="175.50">rayon::iter:..</text></g><g><title>&lt;&amp;rayon::iter::par_bridge::IterParallelProducer&lt;Iter&gt; as rayon::iter::plumbing::UnindexedProducer&gt;::fold_with (259 samples, 4.03%)</title><rect x="91.3402%" y="149" width="4.0267%" height="15" fill="rgb(221,1,38)" fg:x="5875" fg:w="259"/><text x="91.4602%" y="159.50">&lt;&amp;rayon::ite..</text></g><g><title>syscall (5 samples, 0.08%)</title><rect x="95.2892%" y="133" width="0.0777%" height="15" fill="rgb(206,124,46)" fg:x="6129" fg:w="5"/><text x="95.4092%" y="143.50"></text></g><g><title>crossbeam_channel::channel::Sender&lt;T&gt;::send (35 samples, 0.54%)</title><rect x="96.7817%" y="149" width="0.5442%" height="15" fill="rgb(249,21,11)" fg:x="6225" fg:w="35"/><text x="96.9017%" y="159.50"></text></g><g><title>crossbeam_channel::flavors::array::Channel&lt;T&gt;::send (35 samples, 0.54%)</title><rect x="96.7817%" y="133" width="0.5442%" height="15" fill="rgb(222,201,40)" fg:x="6225" fg:w="35"/><text x="96.9017%" y="143.50"></text></g><g><title>crossbeam_channel::waker::SyncWaker::notify (35 samples, 0.54%)</title><rect x="96.7817%" y="117" width="0.5442%" height="15" fill="rgb(235,61,29)" fg:x="6225" fg:w="35"/><text x="96.9017%" y="127.50"></text></g><g><title>std::sys::pal::unix::futex::futex_wake (33 samples, 0.51%)</title><rect x="96.8128%" y="101" width="0.5131%" height="15" fill="rgb(219,207,3)" fg:x="6227" fg:w="33"/><text x="96.9328%" y="111.50"></text></g><g><title>syscall (33 samples, 0.51%)</title><rect x="96.8128%" y="85" width="0.5131%" height="15" fill="rgb(222,56,46)" fg:x="6227" fg:w="33"/><text x="96.9328%" y="95.50"></text></g><g><title>rsahmi::batchsender::BatchSender&lt;T&gt;::send (36 samples, 0.56%)</title><rect x="96.7817%" y="165" width="0.5597%" height="15" fill="rgb(239,76,54)" fg:x="6225" fg:w="36"/><text x="96.9017%" y="175.50"></text></g><g><title>malloc (1 samples, 0.02%)</title><rect x="97.3259%" y="149" width="0.0155%" height="15" fill="rgb(231,124,27)" fg:x="6260" fg:w="1"/><text x="97.4459%" y="159.50"></text></g><g><title>rsahmi::parser::fastq::reader::FastqReader&lt;S&gt;::read_head (7 samples, 0.11%)</title><rect x="97.3414%" y="165" width="0.1088%" height="15" fill="rgb(249,195,6)" fg:x="6261" fg:w="7"/><text x="97.4614%" y="175.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr2_raw::find_avx2 (4 samples, 0.06%)</title><rect x="97.3881%" y="149" width="0.0622%" height="15" fill="rgb(237,174,47)" fg:x="6264" fg:w="4"/><text x="97.5081%" y="159.50"></text></g><g><title>&lt;rayon::iter::map_with::MapWithFolder&lt;C,U,F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume (139 samples, 2.16%)</title><rect x="95.3669%" y="181" width="2.1611%" height="15" fill="rgb(206,201,31)" fg:x="6134" fg:w="139"/><text x="95.4869%" y="191.50">&lt;rayo..</text></g><g><title>rsahmi::parser::fastq::reader::FastqReader&lt;S&gt;::read_tail (5 samples, 0.08%)</title><rect x="97.4502%" y="165" width="0.0777%" height="15" fill="rgb(231,57,52)" fg:x="6268" fg:w="5"/><text x="97.5702%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.02%)</title><rect x="97.5902%" y="133" width="0.0155%" height="15" fill="rgb(248,177,22)" fg:x="6277" fg:w="1"/><text x="97.7102%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.02%)</title><rect x="97.5902%" y="117" width="0.0155%" height="15" fill="rgb(215,211,37)" fg:x="6277" fg:w="1"/><text x="97.7102%" y="127.50"></text></g><g><title>rsahmi::kractor::reads::mmap::reader::SliceChunkReader::chunk_reader (127 samples, 1.97%)</title><rect x="97.5280%" y="181" width="1.9745%" height="15" fill="rgb(241,128,51)" fg:x="6273" fg:w="127"/><text x="97.6480%" y="191.50">rsah..</text></g><g><title>rsahmi::kractor::reads::mmap::reader::slice_chunk (127 samples, 1.97%)</title><rect x="97.5280%" y="165" width="1.9745%" height="15" fill="rgb(227,165,31)" fg:x="6273" fg:w="127"/><text x="97.6480%" y="175.50">rsah..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (127 samples, 1.97%)</title><rect x="97.5280%" y="149" width="1.9745%" height="15" fill="rgb(228,167,24)" fg:x="6273" fg:w="127"/><text x="97.6480%" y="159.50">&lt;all..</text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_avx2 (122 samples, 1.90%)</title><rect x="97.6057%" y="133" width="1.8968%" height="15" fill="rgb(228,143,12)" fg:x="6278" fg:w="122"/><text x="97.7257%" y="143.50">memc..</text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::find_raw (119 samples, 1.85%)</title><rect x="97.6524%" y="117" width="1.8501%" height="15" fill="rgb(249,149,8)" fg:x="6281" fg:w="119"/><text x="97.7724%" y="127.50">memc..</text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::find_raw_avx2 (117 samples, 1.82%)</title><rect x="97.6835%" y="101" width="1.8190%" height="15" fill="rgb(243,35,44)" fg:x="6283" fg:w="117"/><text x="97.8035%" y="111.50">memc..</text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock_contended (1 samples, 0.02%)</title><rect x="99.5025%" y="181" width="0.0155%" height="15" fill="rgb(246,89,9)" fg:x="6400" fg:w="1"/><text x="99.6225%" y="191.50"></text></g><g><title>std::sys::pal::unix::futex::futex_wait (1 samples, 0.02%)</title><rect x="99.5025%" y="165" width="0.0155%" height="15" fill="rgb(233,213,13)" fg:x="6400" fg:w="1"/><text x="99.6225%" y="175.50"></text></g><g><title>syscall (1 samples, 0.02%)</title><rect x="99.5025%" y="149" width="0.0155%" height="15" fill="rgb(233,141,41)" fg:x="6400" fg:w="1"/><text x="99.6225%" y="159.50"></text></g><g><title>rayon_core::join::join_context::{{closure}} (272 samples, 4.23%)</title><rect x="95.3669%" y="357" width="4.2289%" height="15" fill="rgb(239,167,4)" fg:x="6134" fg:w="272"/><text x="95.4869%" y="367.50">rayon_core::..</text></g><g><title>rayon::iter::plumbing::bridge_unindexed_producer_consumer (272 samples, 4.23%)</title><rect x="95.3669%" y="341" width="4.2289%" height="15" fill="rgb(209,217,16)" fg:x="6134" fg:w="272"/><text x="95.4869%" y="351.50">rayon::iter:..</text></g><g><title>rayon_core::join::join_context::{{closure}} (272 samples, 4.23%)</title><rect x="95.3669%" y="325" width="4.2289%" height="15" fill="rgb(219,88,35)" fg:x="6134" fg:w="272"/><text x="95.4869%" y="335.50">rayon_core::..</text></g><g><title>rayon::iter::plumbing::bridge_unindexed_producer_consumer (272 samples, 4.23%)</title><rect x="95.3669%" y="309" width="4.2289%" height="15" fill="rgb(220,193,23)" fg:x="6134" fg:w="272"/><text x="95.4869%" y="319.50">rayon::iter:..</text></g><g><title>rayon_core::join::join_context::{{closure}} (272 samples, 4.23%)</title><rect x="95.3669%" y="293" width="4.2289%" height="15" fill="rgb(230,90,52)" fg:x="6134" fg:w="272"/><text x="95.4869%" y="303.50">rayon_core::..</text></g><g><title>rayon::iter::plumbing::bridge_unindexed_producer_consumer (272 samples, 4.23%)</title><rect x="95.3669%" y="277" width="4.2289%" height="15" fill="rgb(252,106,19)" fg:x="6134" fg:w="272"/><text x="95.4869%" y="287.50">rayon::iter:..</text></g><g><title>rayon_core::join::join_context::{{closure}} (272 samples, 4.23%)</title><rect x="95.3669%" y="261" width="4.2289%" height="15" fill="rgb(206,74,20)" fg:x="6134" fg:w="272"/><text x="95.4869%" y="271.50">rayon_core::..</text></g><g><title>rayon::iter::plumbing::bridge_unindexed_producer_consumer (272 samples, 4.23%)</title><rect x="95.3669%" y="245" width="4.2289%" height="15" fill="rgb(230,138,44)" fg:x="6134" fg:w="272"/><text x="95.4869%" y="255.50">rayon::iter:..</text></g><g><title>rayon_core::join::join_context::{{closure}} (272 samples, 4.23%)</title><rect x="95.3669%" y="229" width="4.2289%" height="15" fill="rgb(235,182,43)" fg:x="6134" fg:w="272"/><text x="95.4869%" y="239.50">rayon_core::..</text></g><g><title>rayon::iter::plumbing::bridge_unindexed_producer_consumer (272 samples, 4.23%)</title><rect x="95.3669%" y="213" width="4.2289%" height="15" fill="rgb(242,16,51)" fg:x="6134" fg:w="272"/><text x="95.4869%" y="223.50">rayon::iter:..</text></g><g><title>&lt;&amp;rayon::iter::par_bridge::IterParallelProducer&lt;Iter&gt; as rayon::iter::plumbing::UnindexedProducer&gt;::fold_with (272 samples, 4.23%)</title><rect x="95.3669%" y="197" width="4.2289%" height="15" fill="rgb(248,9,4)" fg:x="6134" fg:w="272"/><text x="95.4869%" y="207.50">&lt;&amp;rayon::ite..</text></g><g><title>syscall (5 samples, 0.08%)</title><rect x="99.5180%" y="181" width="0.0777%" height="15" fill="rgb(210,31,22)" fg:x="6401" fg:w="5"/><text x="99.6380%" y="191.50"></text></g><g><title>rayon_core::registry::ThreadBuilder::run (6,080 samples, 94.53%)</title><rect x="5.0840%" y="405" width="94.5274%" height="15" fill="rgb(239,54,39)" fg:x="327" fg:w="6080"/><text x="5.2040%" y="415.50">rayon_core::registry::ThreadBuilder::run</text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold (6,080 samples, 94.53%)</title><rect x="5.0840%" y="389" width="94.5274%" height="15" fill="rgb(230,99,41)" fg:x="327" fg:w="6080"/><text x="5.2040%" y="399.50">rayon_core::registry::WorkerThread::wait_until_cold</text></g><g><title>&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (6,080 samples, 94.53%)</title><rect x="5.0840%" y="373" width="94.5274%" height="15" fill="rgb(253,106,12)" fg:x="327" fg:w="6080"/><text x="5.2040%" y="383.50">&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute</text></g><g><title>rayon_core::thread_pool::ThreadPool::install::{{closure}} (1 samples, 0.02%)</title><rect x="99.5958%" y="357" width="0.0155%" height="15" fill="rgb(213,46,41)" fg:x="6406" fg:w="1"/><text x="99.7158%" y="367.50"></text></g><g><title>rsahmi::kractor::reads::mmap_kractor_reads (1 samples, 0.02%)</title><rect x="99.5958%" y="341" width="0.0155%" height="15" fill="rgb(215,133,35)" fg:x="6406" fg:w="1"/><text x="99.7158%" y="351.50"></text></g><g><title>rsahmi::kractor::reads::mmap::single::mmap_kractor_single_read (1 samples, 0.02%)</title><rect x="99.5958%" y="325" width="0.0155%" height="15" fill="rgb(213,28,5)" fg:x="6406" fg:w="1"/><text x="99.7158%" y="335.50"></text></g><g><title>__munmap (1 samples, 0.02%)</title><rect x="99.5958%" y="309" width="0.0155%" height="15" fill="rgb(215,77,49)" fg:x="6406" fg:w="1"/><text x="99.7158%" y="319.50"></text></g><g><title>cfree (1 samples, 0.02%)</title><rect x="99.8601%" y="389" width="0.0155%" height="15" fill="rgb(248,100,22)" fg:x="6423" fg:w="1"/><text x="99.9801%" y="399.50"></text></g><g><title>malloc (1 samples, 0.02%)</title><rect x="99.8756%" y="389" width="0.0155%" height="15" fill="rgb(208,67,9)" fg:x="6424" fg:w="1"/><text x="99.9956%" y="399.50"></text></g><g><title>all (6,432 samples, 100%)</title><rect x="0.0000%" y="517" width="100.0000%" height="15" fill="rgb(219,133,21)" fg:x="0" fg:w="6432"/><text x="0.1200%" y="527.50"></text></g><g><title>radian (6,432 samples, 100.00%)</title><rect x="0.0000%" y="501" width="100.0000%" height="15" fill="rgb(246,46,29)" fg:x="0" fg:w="6432"/><text x="0.1200%" y="511.50">radian</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (6,385 samples, 99.27%)</title><rect x="0.7307%" y="485" width="99.2693%" height="15" fill="rgb(246,185,52)" fg:x="47" fg:w="6385"/><text x="0.8507%" y="495.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (6,385 samples, 99.27%)</title><rect x="0.7307%" y="469" width="99.2693%" height="15" fill="rgb(252,136,11)" fg:x="47" fg:w="6385"/><text x="0.8507%" y="479.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (6,385 samples, 99.27%)</title><rect x="0.7307%" y="453" width="99.2693%" height="15" fill="rgb(219,138,53)" fg:x="47" fg:w="6385"/><text x="0.8507%" y="463.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (6,385 samples, 99.27%)</title><rect x="0.7307%" y="437" width="99.2693%" height="15" fill="rgb(211,51,23)" fg:x="47" fg:w="6385"/><text x="0.8507%" y="447.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (6,385 samples, 99.27%)</title><rect x="0.7307%" y="421" width="99.2693%" height="15" fill="rgb(247,221,28)" fg:x="47" fg:w="6385"/><text x="0.8507%" y="431.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>rsahmi::parser::fasta::FastaRecord&lt;T&gt;::write (25 samples, 0.39%)</title><rect x="99.6113%" y="405" width="0.3887%" height="15" fill="rgb(251,222,45)" fg:x="6407" fg:w="25"/><text x="99.7313%" y="415.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_all_cold (7 samples, 0.11%)</title><rect x="99.8912%" y="389" width="0.1088%" height="15" fill="rgb(217,162,53)" fg:x="6425" fg:w="7"/><text x="100.0112%" y="399.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (7 samples, 0.11%)</title><rect x="99.8912%" y="373" width="0.1088%" height="15" fill="rgb(229,93,14)" fg:x="6425" fg:w="7"/><text x="100.0112%" y="383.50"></text></g><g><title>&lt;std::fs::File as std::io::Write&gt;::write (7 samples, 0.11%)</title><rect x="99.8912%" y="357" width="0.1088%" height="15" fill="rgb(209,67,49)" fg:x="6425" fg:w="7"/><text x="100.0112%" y="367.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Write&gt;::write (7 samples, 0.11%)</title><rect x="99.8912%" y="341" width="0.1088%" height="15" fill="rgb(213,87,29)" fg:x="6425" fg:w="7"/><text x="100.0112%" y="351.50"></text></g><g><title>std::sys::fs::unix::File::write (7 samples, 0.11%)</title><rect x="99.8912%" y="325" width="0.1088%" height="15" fill="rgb(205,151,52)" fg:x="6425" fg:w="7"/><text x="100.0112%" y="335.50"></text></g><g><title>std::sys::pal::unix::fd::FileDesc::write (7 samples, 0.11%)</title><rect x="99.8912%" y="309" width="0.1088%" height="15" fill="rgb(253,215,39)" fg:x="6425" fg:w="7"/><text x="100.0112%" y="319.50"></text></g><g><title>write (7 samples, 0.11%)</title><rect x="99.8912%" y="293" width="0.1088%" height="15" fill="rgb(221,220,41)" fg:x="6425" fg:w="7"/><text x="100.0112%" y="303.50"></text></g></svg></svg>