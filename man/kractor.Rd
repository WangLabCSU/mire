% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/kractor.R
\name{kractor}
\alias{kractor}
\title{Extract Kraken2 Output and Reads (Kraken2 output and reads extractor)}
\usage{
kractor(
  kreport,
  koutput,
  reads,
  ubread = NULL,
  umi_ranges = NULL,
  barcode_ranges = NULL,
  extract_koutput = NULL,
  extract_reads = NULL,
  taxon = c("d__Bacteria", "d__Fungi", "d__Viruses"),
  chunk_size = NULL,
  buffer_size = NULL,
  batch_size = NULL,
  nqueue = NULL,
  threads = NULL,
  odir = NULL,
  mmap_koutput = TRUE,
  mmap_reads = TRUE
)
}
\arguments{
\item{kreport}{Path to the Kraken2 report file.}

\item{koutput}{Path to the Kraken2 output file.}

\item{reads}{A character vector of FASTQ file paths, either the original
reads used as input to Kraken2 or the classified output reads (recommended
for efficiency as they are smaller). Accepts one file for single-end or two
files for paired-end. Note: if \code{ubread} is specified, \code{reads} must be the
original Kraken2 input reads to ensure correct barcode/UMI pairing.}

\item{ubread}{Path to the input sequence file that contains UMI and/or
barcode sequences. If \code{NULL}, UMI/barcode parsing is disabled. When
specified, \code{reads} must contain only a single FASTQ file. This is commonly
used for 10x Genomics single-cell data, where the first read file contains
only UMI and barcode sequences. In such cases, you should provide that file
via \code{ubread}.}

\item{umi_ranges}{A range or a list of ranges specifying where UMI sequences
are located in the reads. Must be created using the \code{ubrange()} function.
Only used when \code{ubread} is not \code{NULL}.}

\item{barcode_ranges}{A range or a list of ranges specifying where cell
barcode sequences are located in the reads. Must be created using the
\code{ubrange()} function.  Only used when \code{ubread} is not \code{NULL}.}

\item{extract_koutput}{Path to the file where the extracted Kraken2 output
matching the specified \code{taxon} will be saved. Defaults to
\code{"kraken_microbiome_output.txt"}.}

\item{extract_reads}{A character vector of the same length as \code{reads},
specifying the output FASTQ file(s) where the matching reads will be saved.
Defaults to \code{"kraken_microbiome_reads(_1|2).txt"}.}

\item{taxon}{An atomic character specify the taxa name wanted. Should follow
the kraken style, connected by rank codes, two underscores, and the
scientific name of the taxon (e.g., "d__Viruses").}

\item{chunk_size}{Integer. Size in bytes of the intermediate chunk used to
split and distribute data to worker threads during processing. Default is
\code{10 * 1024 * 1024} (10MB).}

\item{buffer_size}{Integer specifying the buffer size in bytes used for
writing to disk. This controls the capacity of the buffered file writer.
Default is \code{1 * 1024 * 1024} (1MB).}

\item{batch_size}{Integer. Number of records to accumulate before triggering
a write operation. Default is \code{500}.}

\item{nqueue}{Integer. Maximum number of buffers per thread, controlling the
amount of in-flight data awaiting writing. Default: \code{3}.}

\item{threads}{Integer. Number of threads to use. Default will determined
atomatically by rayon.}

\item{odir}{A string of directory to save the output files. Please see
\code{Value} section for details.}

\item{mmap_koutput, mmap_reads}{Logical. Whether to enable memory-mapped file
access for reading input files (\code{mmap_reads}) and writing Kraken2 output
(\code{mmap_koutput}). When set to \code{TRUE}, the function uses memory mapping to
reduce data copying and improve performance in multi-threaded environments.
This can be highly efficient on some systems, but performance gains may
vary depending on the operating system and file system. Defaults to \code{TRUE}.}
}
\value{
None. This function generates the following files:
\itemize{
\item \code{extract_koutput}: Kraken2 output entries corresponding to the specified
\code{taxon}, extracted from koutput.
\item \code{extract_reads}: Sequence file(s) containing reads assigned to the
specified \code{taxon}.
}
}
\description{
This function extracts reads and classification results from Kraken2 output,
based on a set of specified taxonomic IDs.
}
\examples{
\dontrun{
blit::kraken2(
    fq1 = fq1,
    fq2 = fq2,
    classified_out = "classified.fq",
    # Number of threads to use
    blit::arg("--threads", 10L, format = "\%d"),
    # the kraken database
    blit::arg("--db", kraken_db),
    "--use-names", "--report-minimizer-data",
) |> blit::cmd_run()

# 1. `kreport` should be the kraken2 report file of `blit::kraken2()`
# 2. `koutput` should be the kraken2 output file of `blit::kraken2()`
# 3. `reads` should be the same with `fq1` and `fq2` in `blit::kraken2()`
kractor(
    kreport = "kraken_report.txt",
    koutput = "kraken_output.txt",
    reads = c(fq1, fq2)
)
}
}
\seealso{
\code{\link[=krakenx]{krakenx()}}
}
